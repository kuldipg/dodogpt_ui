/*! jQuery v3.5.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],r=Object.getPrototypeOf,s=t.slice,g=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},E=C.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.5.1",S=function(e,t){return new S.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:f,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(n){return this.pushStack(S.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||S.isPlainObject(n)?n:{},i=!1,a[t]=S.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},S.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(p(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?S.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(p(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g(a)},guid:1,support:y}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var d=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,S="sizzle"+1*new Date,p=n.document,k=0,r=0,m=ue(),x=ue(),A=ue(),N=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",F=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",B=new RegExp(M+"+","g"),$=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp(F),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(p.childNodes),p.childNodes),t[p.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&(T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!N[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&(U.test(t)||z.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&d.scope||((s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=S)),o=(l=h(t)).length;while(o--)l[o]=(s?"#"+s:":scope")+" "+xe(l[o]);c=l.join(",")}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){N(t,!0)}finally{s===S&&e.removeAttribute("id")}}}return g(t.replace($,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[S]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:p;return r!=C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),p!=C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.scope=ce(function(e){return a.appendChild(e).appendChild(C.createElement("div")),"undefined"!=typeof e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=S,!C.getElementsByName||!C.getElementsByName(S).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML="<a id='"+S+"'></a><select id='"+S+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+S+"-]").length||v.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+S+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",F)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==p&&y(p,e)?-1:t==C||t.ownerDocument==p&&y(p,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==C?-1:t==C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]==p?-1:s[r]==p?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(T(e),d.matchesSelector&&E&&!N[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){N(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&m(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(B," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[k,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===k&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[S]||(a[S]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[k,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[S]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,"$1"));return s[S]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[k,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[S]||(e[S]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===k&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[S]&&(v=Ce(v)),y&&!y[S]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[S]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace($,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=A[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[S]?i.push(a):o.push(a);(a=A(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=k+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t==C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument==C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(k=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(k=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=S.split("").sort(D).join("")===S,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);S.find=d,S.expr=d.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=d.uniqueSort,S.text=d.getText,S.isXMLDoc=d.isXML,S.contains=d.contains,S.escapeSelector=d.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&S(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=S.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,n,r){return m(n)?S.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?S.grep(e,function(e){return e===n!==r}):"string"!=typeof n?S.grep(e,function(e){return-1<i.call(n,e)!==r}):S.filter(n,e,r)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<r;t++)if(S.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,i[t],n);return 1<r?S.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&k.test(e)?S(e):e||[],!1).length}});var j,q=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:q.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),N.test(r[1])&&S.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,j=S(E);var L=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){while((e=e[t])&&1!==e.nodeType);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&S(e);if(!k.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(S(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,"parentNode")},parentsUntil:function(e,t,n){return h(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return h(e,"nextSibling")},prevAll:function(e){return h(e,"previousSibling")},nextUntil:function(e,t,n){return h(e,"nextSibling",n)},prevUntil:function(e,t,n){return h(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(r,i){S.fn[r]=function(e,t){var n=S.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=S.filter(t,n)),1<this.length&&(H[r]||S.uniqueSort(n),L.test(r)&&n.reverse()),this.pushStack(n)}});var P=/[^\x20\t\r\n\f]+/g;function R(e){return e}function M(e){throw e}function I(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},S.each(e.match(P)||[],function(e,t){n[t]=!0}),n):S.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){S.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return S.each(arguments,function(e,t){var n;while(-1<(n=S.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<S.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},S.extend({Deferred:function(e){var o=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return S.Deferred(function(r){S.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,R,s),l(u,o,M,s)):(u++,t.call(e,l(u,o,R,s),l(u,o,M,s),l(u,o,R,o.notifyWith))):(a!==R&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==M&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),C.setTimeout(t))}}return S.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:R,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:R)),o[2][3].add(l(0,e,m(n)?n:M))}).promise()},promise:function(e){return null!=e?S.extend(e,a):a}},s={};return S.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=S.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(I(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)I(i[t],a(t),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&W.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){C.setTimeout(function(){throw e})};var F=S.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),S.ready()}S.fn.ready=function(e){return F.then(e)["catch"](function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||F.resolveWith(E,[S])}}),S.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(S.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(S(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},_=/^-ms-/,z=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function X(e){return e.replace(_,"ms-").replace(z,U)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=S.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[X(t)]=n;else for(r in t)i[X(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(P)||[]).length;while(n--)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Y=new G,Q=new G,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:J.test(i)?JSON.parse(i):i)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return Q.hasData(e)||Y.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=Q.get(o),1===o.nodeType&&!Y.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=X(r.slice(5)),Z(o,r,i[r]));Y.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){Q.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=Q.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),r=n.length,i=n.shift(),o=S._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){S.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Y.get(e,n)||Y.access(e,n,{empty:S.Callbacks("once memory").add(function(){Y.remove(e,[t+"queue",n])})})}}),S.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===n?this:this.each(function(){var e=S.queue(this,t,n);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=S.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Y.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],re=E.documentElement,ie=function(e){return S.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===S.css(e,"display")};function se(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return S.css(e,t,"")},u=s(),l=n&&n[3]||(S.cssNumber[t]?"":"px"),c=e.nodeType&&(S.cssNumber[t]||"px"!==l&&+u)&&te.exec(S.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)S.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,S.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ue={};function le(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Y.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ue[s])||(o=a.body.appendChild(a.createElement(s)),u=S.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ue[s]=u)))):"none"!==n&&(l[c]="none",Y.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}S.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?S(this).show():S(this).hide()})}});var ce,fe,pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;ce=E.createDocumentFragment().appendChild(E.createElement("div")),(fe=E.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),ce.appendChild(fe),y.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",y.option=!!ce.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?S.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],"globalEval",!t||Y.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var me=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))S.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+S.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;S.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<S.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}var be=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Ee(){return!1}function Se(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)ke(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ee;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return S().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=S.guid++)),e.each(function(){S.event.add(this,t,i,r,n)})}function Ae(e,i,o){o?(Y.set(e,i,!1),S.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(S.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Y.set(this,i,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&S.event.add(e,i,Ce)}S.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Y.get(t);if(V(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(re,i),n.guid||(n.guid=S.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(P)||[""]).length;while(l--)d=g=(s=Te.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=S.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=S.event.special[d]||{},c=S.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),S.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(P)||[""]).length;while(l--)if(d=g=(s=Te.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=S.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||S.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)S.event.remove(e,d+t[l],n,r,!0);S.isEmptyObject(u)&&Y.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=S.event.fix(e),l=(Y.get(this,"events")||Object.create(null))[u.type]||[],c=S.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=S.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<S(i,this).index(l):S.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Ce),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Y.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return Ae(this,e,Se),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){S.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||S.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),S.fn.extend({on:function(e,t,n,r){return ke(this,e,t,n,r)},one:function(e,t,n,r){return ke(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each(function(){S.event.remove(this,e,n,t)})}});var Ne=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function qe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)S.event.add(t,i,s[i][n]);Q.hasData(e)&&(o=Q.access(e),a=S.extend({},o),Q.set(t,a))}}function Pe(n,r,i,o){r=g(r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&De.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Pe(t,r,i,o)});if(f&&(t=(e=xe(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=S.map(ve(e,"script"),Le)).length;c<f;c++)u=e,c!==p&&(u=S.clone(u,!0,!0),s&&S.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,S.map(a,He),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Y.access(u,"globalEval")&&S.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?S._evalUrl&&!u.noModule&&S._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):b(u.textContent.replace(je,""),u,l))}return n}function Re(e,t,n){for(var r,i=t?S.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(ve(r)),r.parentNode&&(n&&ie(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Oe(o[r],a[r]);else Oe(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=S.event.special,o=0;void 0!==(n=e[o]);o++)if(V(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return $(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Pe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||qe(this,e).appendChild(e)})},prepend:function(){return Pe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=qe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Pe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Pe(this,arguments,function(e){var t=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){S.fn[e]=function(e){for(var t,n=[],r=S(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),S(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Me=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},We=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Fe=new RegExp(ne.join("|"),"i");function Be(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ie(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ie(e)||(a=S.style(e,t)),!y.pixelBoxStyles()&&Me.test(a)&&Fe.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(u).appendChild(l);var e=C.getComputedStyle(l);n="1%"!==e.top,s=12===t(e.marginLeft),l.style.right="60%",o=36===t(e.right),r=36===t(e.width),l.style.position="absolute",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=E.createElement("div"),l=E.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===l.style.backgroundClip,S.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=E.createElement("table"),t=E.createElement("tr"),n=E.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",re.appendChild(e).appendChild(t).appendChild(n),r=C.getComputedStyle(t),a=3<parseInt(r.height),re.removeChild(e)),a}}))}();var _e=["Webkit","Moz","ms"],ze=E.createElement("div").style,Ue={};function Xe(e){var t=S.cssProps[e]||Ue[e];return t||(e in ze?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=_e.length;while(n--)if((e=_e[n]+t)in ze)return e}(e)||e)}var Ve=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Qe={letterSpacing:"0",fontWeight:"400"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ke(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=S.css(e,n+ne[a],!0,i)),r?("content"===n&&(u-=S.css(e,"padding"+ne[a],!0,i)),"margin"!==n&&(u-=S.css(e,"border"+ne[a]+"Width",!0,i))):(u+=S.css(e,"padding"+ne[a],!0,i),"padding"!==n?u+=S.css(e,"border"+ne[a]+"Width",!0,i):s+=S.css(e,"border"+ne[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function Ze(e,t,n){var r=Ie(e),i=(!y.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),o=i,a=Be(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Me.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===S.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ke(e,t,n||(i?"border":"content"),o,r,a)+"px"}function et(e,t,n,r,i){return new et.prototype.init(e,t,n,r,i)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=X(t),u=Ge.test(t),l=e.style;if(u||(t=Xe(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=se(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(S.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=X(t);return Ge.test(t)||(t=Xe(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Be(e,t,r)),"normal"===i&&t in Qe&&(i=Qe[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each(["height","width"],function(e,u){S.cssHooks[u]={get:function(e,t,n){if(t)return!Ve.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,u,n):We(e,Ye,function(){return Ze(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===S.css(e,"boxSizing",!1,i),s=n?Ke(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ke(e,u,"border",!1,i)-.5)),s&&(r=te.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=S.css(e,u)),Je(0,t,s)}}}),S.cssHooks.marginLeft=$e(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(i,o){S.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(S.cssHooks[i+o].set=Je)}),S.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=S.css(e,t[a],!1,r);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=et).prototype={constructor:et,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}}).init.prototype=et.prototype,(et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Xe(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=et.prototype.init,S.fx.step={};var tt,nt,rt,it,ot=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function st(){nt&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(st):C.setTimeout(st,S.fx.interval),S.fx.tick())}function ut(){return C.setTimeout(function(){tt=void 0}),tt=Date.now()}function lt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ne[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ft(o,e,t){var n,a,r=0,i=ft.prefilters.length,s=S.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=tt||ut(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:tt||ut(),duration:t.duration,tweens:[],createTween:function(e,t){var n=S.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=X(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=ft.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(S._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return S.map(c,ct,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),S.fx.timer(S.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}S.Animation=S.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(P);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),v=Y.get(e,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],ot.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||S.style(e,r)}if((u=!S.isEmptyObject(t))||!S.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Y.get(e,"display")),"none"===(c=S.css(e,"display"))&&(l?c=l:(le([e],!0),l=e.style.display||l,c=S.css(e,"display"),le([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===S.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Y.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&le([e],!0),p.done(function(){for(r in g||le([e]),Y.remove(e,"fxshow"),d)S.style(e,r,d[r])})),u=ct(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),a=function(){var e=ft(this,S.extend({},t),o);(i||Y.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=S.timers,r=Y.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&at.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||S.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Y.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=S.timers,o=n?n.length:0;for(t.finish=!0,S.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,r){var i=S.fn[r];S.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(lt(r,!0),e,t,n)}}),S.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){S.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),tt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){nt||(nt=!0,st())},S.fx.stop=function(){nt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(r,e){return r=S.fx&&S.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},rt=E.createElement("input"),it=E.createElement("select").appendChild(E.createElement("option")),rt.type="checkbox",y.checkOn=""!==rt.value,y.optSelected=it.selected,(rt=E.createElement("input")).value="t",rt.type="radio",y.radioValue="t"===rt.value;var pt,dt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return $(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(i=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(P);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var a=dt[t]||S.find.attr;dt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=dt[o],dt[o]=r,r=null!=a(e,t,n)?o:null,dt[o]=i),r}});var ht=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function vt(e){return(e.match(P)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(P)||[]}S.fn.extend({prop:function(e,t){return $(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,i=S.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){S(this).addClass(t.call(this,e,yt(this)))});if((e=mt(t)).length)while(n=this[u++])if(i=yt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){S(this).removeClass(t.call(this,e,yt(this)))});if(!arguments.length)return this.attr("class","");if((e=mt(t)).length)while(n=this[u++])if(i=yt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){S(this).toggleClass(i.call(this,e,yt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=S(this),r=mt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=yt(this))&&Y.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Y.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+vt(yt(n))+" ").indexOf(t))return!0;return!1}});var xt=/\r/g;S.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,S(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=S.map(t,function(e){return null==e?"":e+""})),(r=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=S.valHooks[t.type]||S.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(xt,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:vt(S.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=S.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<S.inArray(S.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},y.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!bt.test(d+S.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[S.expando]?e:new S.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),c=S.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,bt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Y.get(o,"events")||Object.create(null))[e.type]&&Y.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&V(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!V(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),S.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,wt),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,wt),S.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),y.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){S.event.simulate(r,e.target,S.event.fix(e))};S.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}});var Tt=C.location,Ct={guid:Date.now()},Et=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var St=/\[\]$/,kt=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Dt(n,e,r,i){var t;if(Array.isArray(e))S.each(e,function(e,t){r||St.test(n)?i(n,t):Dt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)Dt(n+"["+t+"]",e[t],r,i)}S.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){i(this.name,this.value)});else for(n in e)Dt(n,e[n],t,i);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Nt.test(this.nodeName)&&!At.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var jt=/%20/g,qt=/#.*$/,Lt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Pt=/^\/\//,Rt={},Mt={},It="*/".concat("*"),Wt=E.createElement("a");function Ft(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(P)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Bt(t,i,o,a){var s={},u=t===Mt;function l(e){var r;return s[e]=!0,S.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function $t(e,t){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Wt.href=Tt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,S.ajaxSettings),t):$t(S.ajaxSettings,e)},ajaxPrefilter:Ft(Rt),ajaxTransport:Ft(Mt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=S.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?S(y):S.event,x=S.Deferred(),b=S.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Ht.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Tt.href)+"").replace(Pt,Tt.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(P)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Wt.protocol+"//"+Wt.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=S.param(v.data,v.traditional)),Bt(Rt,v,t,T),h)return T;for(i in(g=S.event&&v.global)&&0==S.active++&&S.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Ot.test(v.type),f=v.url.replace(qt,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(jt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(Et.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Lt,"$1"),o=(Et.test(f)?"&":"?")+"_="+Ct.guid+++o),v.url=f+o),v.ifModified&&(S.lastModified[f]&&T.setRequestHeader("If-Modified-Since",S.lastModified[f]),S.etag[f]&&T.setRequestHeader("If-None-Match",S.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+It+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=Bt(Mt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),!i&&-1<S.inArray("script",v.dataTypes)&&(v.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(S.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(S.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--S.active||S.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,i){S[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),S.ajax(S.extend({url:e,type:i,dataType:r,data:t,success:n},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){S(this).wrapInner(n.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){S(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},zt=S.ajaxSettings.xhr();y.cors=!!zt&&"withCredentials"in zt,y.ajax=zt=!!zt,S.ajaxTransport(function(i){var o,a;if(y.cors||zt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(_t[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=S("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Ut,Xt=[],Vt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||S.expando+"_"+Ct.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||S.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?S(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Ut=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=vt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&S.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=S.css(e,"position"),c=S(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=S.css(e,"top"),u=S.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):("number"==typeof f.top&&(f.top+="px"),"number"==typeof f.left&&(f.left+="px"),c.css(f))}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),i.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-S.css(r,"marginTop",!0),left:t.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===S.css(e,"position"))e=e.offsetParent;return e||re})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;S.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),S.each(["top","left"],function(e,n){S.cssHooks[n]=$e(y.pixelPosition,function(e,t){if(t)return t=Be(e,n),Me.test(t)?S(e).position()[n]+"px":t})}),S.each({Height:"height",Width:"width"},function(a,s){S.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){S.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?S.css(e,t,i):S.style(e,t,n,i)},s,n?e:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){S.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var Gt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||S.guid++,i},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=A,S.isFunction=m,S.isWindow=x,S.camelCase=X,S.type=w,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S});var Yt=C.jQuery,Qt=C.$;return S.noConflict=function(e){return C.$===S&&(C.$=Qt),e&&C.jQuery===S&&(C.jQuery=Yt),S},"undefined"==typeof e&&(C.jQuery=C.$=S),S});
function AppMeasurement_Module_Media(q) {
    var b = this;
    b.s = q;
    q = window;
    q.s_c_in || (q.s_c_il = [], q.s_c_in = 0);
    b._il = q.s_c_il;
    b._in = q.s_c_in;
    b._il[b._in] = b;
    q.s_c_in++;
    b._c = "s_m";
    b.list = [];
    b.open = function(d, c, e, k) {
        var f = {},
            a = new Date,
            l = "",
            g;
        c || (c = -1);
        if (d && e) {
            b.list || (b.list = {});
            b.list[d] && b.close(d);
            k && k.id && (l = k.id);
            if (l)
                for (g in b.list) !Object.prototype[g] && b.list[g] && b.list[g].R == l && b.close(b.list[g].name);
            f.name = d;
            f.length = c;
            f.offset = 0;
            f.e = 0;
            f.playerName = b.playerName ? b.playerName : e;
            f.R = l;
            f.C = 0;
            f.a = 0;
            f.timestamp =
                Math.floor(a.getTime() / 1E3);
            f.k = 0;
            f.u = f.timestamp;
            f.c = -1;
            f.n = "";
            f.g = -1;
            f.D = 0;
            f.I = {};
            f.G = 0;
            f.m = 0;
            f.f = "";
            f.B = 0;
            f.L = 0;
            f.A = 0;
            f.F = 0;
            f.l = !1;
            f.v = "";
            f.J = "";
            f.K = 0;
            f.r = !1;
            f.H = "";
            f.complete = 0;
            f.Q = 0;
            f.p = 0;
            f.q = 0;
            b.list[d] = f
        }
    };
    b.openAd = function(d, c, e, k, f, a, l, g) {
        var h = {};
        b.open(d, c, e, g);
        if (h = b.list[d]) h.l = !0, h.v = k, h.J = f, h.K = a, h.H = l
    };
    b.M = function(d) {
        var c = b.list[d];
        b.list[d] = 0;
        c && c.monitor && clearTimeout(c.monitor.interval)
    };
    b.close = function(d) {
        b.i(d, 0, -1)
    };
    b.play = function(d, c, e, k) {
        var f = b.i(d, 1, c, e, k);
        f && !f.monitor &&
            (f.monitor = {}, f.monitor.update = function() {
                1 == f.k && b.i(f.name, 3, -1);
                f.monitor.interval = setTimeout(f.monitor.update, 1E3)
            }, f.monitor.update())
    };
    b.click = function(d, c) {
        b.i(d, 7, c)
    };
    b.complete = function(d, c) {
        b.i(d, 5, c)
    };
    b.stop = function(d, c) {
        b.i(d, 2, c)
    };
    b.track = function(d) {
        b.i(d, 4, -1)
    };
    b.P = function(d, c) {
        var e = "a.media.",
            k = d.linkTrackVars,
            f = d.linkTrackEvents,
            a = "m_i",
            l, g = d.contextData,
            h;
        c.l && (e += "ad.", c.v && (g["a.media.name"] = c.v, g[e + "pod"] = c.J, g[e + "podPosition"] = c.K), c.G || (g[e + "CPM"] = c.H));
        c.r && (g[e + "clicked"] = !0, c.r = !1);
        g["a.contentType"] = "video" + (c.l ? "Ad" : "");
        g["a.media.channel"] = b.channel;
        g[e + "name"] = c.name;
        g[e + "playerName"] = c.playerName;
        0 < c.length && (g[e + "length"] = c.length);
        g[e + "timePlayed"] = Math.floor(c.a);
        0 < Math.floor(c.a) && (g[e + "timePlayed"] = Math.floor(c.a));
        c.G || (g[e + "view"] = !0, a = "m_s", b.Heartbeat && b.Heartbeat.enabled && (a = c.l ? b.__primetime ? "mspa_s" : "msa_s" : b.__primetime ? "msp_s" : "ms_s"), c.G = 1);
        c.f && (g[e + "segmentNum"] = c.m, g[e + "segment"] = c.f, 0 < c.B && (g[e + "segmentLength"] = c.B), c.A && 0 < c.a && (g[e + "segmentView"] = !0));
        !c.Q && c.complete && (g[e + "complete"] = !0, c.S = 1);
        0 < c.p && (g[e + "milestone"] = c.p);
        0 < c.q && (g[e + "offsetMilestone"] = c.q);
        if (k)
            for (h in g) Object.prototype[h] || (k += ",contextData." + h);
        l = g["a.contentType"];
        d.pe = a;
        d.pev3 = l;
        var q, s;
        if (b.contextDataMapping)
            for (h in d.events2 || (d.events2 = ""), k && (k += ",events"), b.contextDataMapping)
                if (!Object.prototype[h]) {
                    a = h.length > e.length && h.substring(0, e.length) == e ? h.substring(e.length) : "";
                    l = b.contextDataMapping[h];
                    if ("string" == typeof l)
                        for (q = l.split(","), s = 0; s < q.length; s++) l =
                            q[s], "a.contentType" == h ? (k && (k += "," + l), d[l] = g[h]) : "view" == a || "segmentView" == a || "clicked" == a || "complete" == a || "timePlayed" == a || "CPM" == a ? (f && (f += "," + l), "timePlayed" == a || "CPM" == a ? g[h] && (d.events2 += (d.events2 ? "," : "") + l + "=" + g[h]) : g[h] && (d.events2 += (d.events2 ? "," : "") + l)) : "segment" == a && g[h + "Num"] ? (k && (k += "," + l), d[l] = g[h + "Num"] + ":" + g[h]) : (k && (k += "," + l), d[l] = g[h]);
                    else if ("milestones" == a || "offsetMilestones" == a) h = h.substring(0, h.length - 1), g[h] && b.contextDataMapping[h + "s"][g[h]] && (f && (f += "," + b.contextDataMapping[h +
                        "s"][g[h]]), d.events2 += (d.events2 ? "," : "") + b.contextDataMapping[h + "s"][g[h]]);
                    g[h] && (g[h] = 0);
                    "segment" == a && g[h + "Num"] && (g[h + "Num"] = 0)
                }
        d.linkTrackVars = k;
        d.linkTrackEvents = f
    };
    b.i = function(d, c, e, k, f) {
        var a = {},
            l = (new Date).getTime() / 1E3,
            g, h, q = b.trackVars,
            s = b.trackEvents,
            t = b.trackSeconds,
            u = b.trackMilestones,
            v = b.trackOffsetMilestones,
            w = b.segmentByMilestones,
            x = b.segmentByOffsetMilestones,
            p, n, r = 1,
            m = {},
            y;
        b.channel || (b.channel = b.s.w.location.hostname);
        if (a = d && b.list && b.list[d] ? b.list[d] : 0)
            if (a.l && (t = b.adTrackSeconds,
                    u = b.adTrackMilestones, v = b.adTrackOffsetMilestones, w = b.adSegmentByMilestones, x = b.adSegmentByOffsetMilestones), 0 > e && (e = 1 == a.k && 0 < a.u ? l - a.u + a.c : a.c), 0 < a.length && (e = e < a.length ? e : a.length), 0 > e && (e = 0), a.offset = e, 0 < a.length && (a.e = a.offset / a.length * 100, a.e = 100 < a.e ? 100 : a.e), 0 > a.c && (a.c = e), y = a.D, m.name = d, m.ad = a.l, m.length = a.length, m.openTime = new Date, m.openTime.setTime(1E3 * a.timestamp), m.offset = a.offset, m.percent = a.e, m.playerName = a.playerName, m.mediaEvent = 0 > a.g ? "OPEN" : 1 == c ? "PLAY" : 2 == c ? "STOP" : 3 == c ? "MONITOR" :
                4 == c ? "TRACK" : 5 == c ? "COMPLETE" : 7 == c ? "CLICK" : "CLOSE", 2 < c || c != a.k && (2 != c || 1 == a.k)) {
                f || (k = a.m, f = a.f);
                if (c) {
                    1 == c && (a.c = e);
                    if ((3 >= c || 5 <= c) && 0 <= a.g && (r = !1, q = s = "None", a.g != e)) {
                        h = a.g;
                        h > e && (h = a.c, h > e && (h = e));
                        p = u ? u.split(",") : 0;
                        if (0 < a.length && p && e >= h)
                            for (n = 0; n < p.length; n++)(g = p[n] ? parseFloat("" + p[n]) : 0) && h / a.length * 100 < g && a.e >= g && (r = !0, n = p.length, m.mediaEvent = "MILESTONE", a.p = m.milestone = g);
                        if ((p = v ? v.split(",") : 0) && e >= h)
                            for (n = 0; n < p.length; n++)(g = p[n] ? parseFloat("" + p[n]) : 0) && h < g && e >= g && (r = !0, n = p.length, m.mediaEvent =
                                "OFFSET_MILESTONE", a.q = m.offsetMilestone = g)
                    }
                    if (a.L || !f) {
                        if (w && u && 0 < a.length) {
                            if (p = u.split(","))
                                for (p.push("100"), n = h = 0; n < p.length; n++)
                                    if (g = p[n] ? parseFloat("" + p[n]) : 0) a.e < g && (k = n + 1, f = "M:" + h + "-" + g, n = p.length), h = g
                        } else if (x && v && (p = v.split(",")))
                            for (p.push("" + (0 < a.length ? a.length : "E")), n = h = 0; n < p.length; n++)
                                if ((g = p[n] ? parseFloat("" + p[n]) : 0) || "E" == p[n]) {
                                    if (e < g || "E" == p[n]) k = n + 1, f = "O:" + h + "-" + g, n = p.length;
                                    h = g
                                }
                        f && (a.L = !0)
                    }(f || a.f) && f != a.f && (a.F = !0, a.f || (a.m = k, a.f = f), 0 <= a.g && (r = !0));
                    (2 <= c || 100 <= a.e) && a.c < e &&
                        (a.C += e - a.c, a.a += e - a.c);
                    if (2 >= c || 3 == c && !a.k) a.n += (1 == c || 3 == c ? "S" : "E") + Math.floor(e), a.k = 3 == c ? 1 : c;
                    !r && 0 <= a.g && 3 >= c && (t = t ? t : 0) && a.a >= t && (r = !0, m.mediaEvent = "SECONDS");
                    a.u = l;
                    a.c = e
                }
                if (!c || 3 >= c && 100 <= a.e) 2 != a.k && (a.n += "E" + Math.floor(e)), c = 0, q = s = "None", m.mediaEvent = "CLOSE";
                7 == c && (r = m.clicked = a.r = !0);
                if (5 == c || b.completeByCloseOffset && (!c || 100 <= a.e) && 0 < a.length && e >= a.length - b.completeCloseOffsetThreshold) r = m.complete = a.complete = !0;
                l = m.mediaEvent;
                "MILESTONE" == l ? l += "_" + m.milestone : "OFFSET_MILESTONE" == l && (l +=
                    "_" + m.offsetMilestone);
                a.I[l] ? m.eventFirstTime = !1 : (m.eventFirstTime = !0, a.I[l] = 1);
                m.event = m.mediaEvent;
                m.timePlayed = a.C;
                m.segmentNum = a.m;
                m.segment = a.f;
                m.segmentLength = a.B;
                b.monitor && 4 != c && b.monitor(b.s, m);
                b.Heartbeat && b.Heartbeat.enabled && 0 <= a.g && (r = !1);
                0 == c && b.M(d);
                r && a.D == y && (d = {
                    contextData: {}
                }, d.linkTrackVars = q, d.linkTrackEvents = s, d.linkTrackVars || (d.linkTrackVars = ""), d.linkTrackEvents || (d.linkTrackEvents = ""), b.P(d, a), d.linkTrackVars || (d["!linkTrackVars"] = 1), d.linkTrackEvents || (d["!linkTrackEvents"] =
                    1), b.s.track(d), a.F ? (a.m = k, a.f = f, a.A = !0, a.F = !1) : 0 < a.a && (a.A = !1), a.n = "", a.p = a.q = 0, a.a -= Math.floor(a.a), a.g = e, a.D++)
            }
        return a
    };
    b.O = function(d, c, e, k, f) {
        var a = 0;
        if (d && (!b.autoTrackMediaLengthRequired || c && 0 < c)) {
            if (b.list && b.list[d]) a = 1;
            else if (1 == e || 3 == e) b.open(d, c, "HTML5 Video", f), a = 1;
            a && b.i(d, e, k, -1, 0)
        }
    };
    b.attach = function(d) {
        var c, e, k;
        d && d.tagName && "VIDEO" == d.tagName.toUpperCase() && (b.o || (b.o = function(c, a, d) {
            var e, h;
            b.autoTrack && (e = c.currentSrc, (h = c.duration) || (h = -1), 0 > d && (d = c.currentTime), b.O(e, h, a,
                d, c))
        }), c = function() {
            b.o(d, 1, -1)
        }, e = function() {
            b.o(d, 1, -1)
        }, b.j(d, "play", c), b.j(d, "pause", e), b.j(d, "seeking", e), b.j(d, "seeked", c), b.j(d, "ended", function() {
            b.o(d, 0, -1)
        }), b.j(d, "timeupdate", c), k = function() {
            d.paused || d.ended || d.seeking || b.o(d, 3, -1);
            setTimeout(k, 1E3)
        }, k())
    };
    b.j = function(b, c, e) {
        b.attachEvent ? b.attachEvent("on" + c, e) : b.addEventListener && b.addEventListener(c, e, !1)
    };
    void 0 == b.completeByCloseOffset && (b.completeByCloseOffset = 1);
    void 0 == b.completeCloseOffsetThreshold && (b.completeCloseOffsetThreshold =
        1);
    b.Heartbeat = {};
    b.N = function() {
        var d, c;
        if (b.autoTrack && (d = b.s.d.getElementsByTagName("VIDEO")))
            for (c = 0; c < d.length; c++) b.attach(d[c])
    };
    b.j(q, "load", b.N)
}
window["ssmp-js-core"] = (function(ssmp) {
    "use strict";

    function getSite(){
        var defaultSite = "stt";
        try {
            return window.ssmpConfig.site || defaultSite;
        } catch (err) {
            return defaultSite;
        }
    }

    /**
     * How long, in milliseconds, it takes for elements to fade in/out
     * @type {Number}
     */
    var FADE_DURATION = 200;

    var SITE = getSite();

    /**
     * URL of the API that provides us with dynamic header links
     * @type {String}
     */
    function getSpecialLinks() { 
        //return "/bin/v1/" + SITE + "/specialLinks.json";
        return "/bin/stt/specialLinks.json";
    }
    var SPECIAL_LINKS_API_URL = getSpecialLinks();

    // Export our configuration
    ssmp.FADE_DURATION = FADE_DURATION;
    ssmp.SPECIAL_LINKS_API_URL = SPECIAL_LINKS_API_URL;
    ssmp.SITE = SITE;

    return ssmp;
}(window["ssmp-js-core"] || {}));
window["ssmp-js-parse-web-address"] = (function() {
    "use strict";
    
    /**
     * A web address Object which has all the facets of a URL
     * @typedef {Object} WebAddress
     * @property {String} href The full address of the WebAddress
     * @property {String} protocol The protocol used by the address
     * @property {String} host The host of the address which is the hostname and the port
     * @property {String} hostname The domain of the web address
     * @property {String} port The port used by the address
     * @property {String} pathname The path of the address
     * @property {String} search The query string of the adddress
     * @property {String} hash The hash of the address
     */
    
    /**
     * The expression used to glean facets from a URL
     * @type {RegExp}
     */
    var webAddressRegEx = new RegExp([
        "^",
        "(?:(https?:)//)?", // protocol
        "(([^[:/?#]*)(?::([0-9]+))?)", // host, hostname and port
        "(/[^?#]*)?", // pathname
        "(\\?[^#]*)?", // search
        "(#.*)?", // hash
        "$"
    ].join(""));
    
    /**
     * Parse information from a URL
     * @param {String} address The URL to deconstruct
     * @returns {WebAddress} The deconstructed parts of a URL
     * @throws {TypeError} Must provide a String to parse
     */
    function parseWebAddress(address) {
        if (typeof address !== "string") throw new TypeError("address must be a String");
        
        // Glean the parts of the address
        var match = address.match(webAddressRegEx);
        
        if(!match) {
            return false;
        }else {
            // Send back our populated WebAddress
            return {
                address: address || "",
                protocol: match[1] || "",
                host: match[2] || "",
                hostname: match[3] || "",
                port: match[4] || "",
                pathname: match[5] || "",
                search: match[6] || "",
                hash: match[7] || ""
            };
        }
    }
    
    return {
        parseWebAddress: parseWebAddress
    };
}());
window["ssmp-js-core"] = (function(
    $, 
    ssmpCore,
    ssmpParseWebAddress
){
    "use strict";

    /**
     * Get the runmdode of the current AEM Instance
     * @returns {boolean} true - if Author Instance, else false
     */
    function getInstanceMode(){
        try {
            return window.ssmpConfig.author || undefined;
        } catch (err) {
            return undefined;
        }
    }
    
    /**
     * Retrieve the special links data
     * @returns {Promise<Object>} Resolves to the special links data
     */
    function getSpecialLinks() {
        return $.ajax({
            method: "GET",
            url: ssmpCore.SPECIAL_LINKS_API_URL,
            dataType: "json"
        });
    }  

    /**
     * Microscopic polyfill for Array.prototype.find which searches an Array for a value that fulfills the predicate function and returns that value or undefined
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find MDN Documentation for Array.prototype.find}
     * @param {*[]} arr The Array to search
     * @param {Function} predicatFn Function to call on each element to determine if the sought element has been found
     * @returns {(*|undefined)} The first found element or undefined if no match was found
     */
    function arrFind(arr, predicatFn) {
        for (var i = 0; i < arr.length; i++) {
            if (predicatFn(arr[i])) return arr[i];
        }
    }
      
    /**
     * Function to attach a failure handler to an XHR request that will trigger navigation to the fallback url
     * @param {jqXHR} xhr The XHR request that should be made to lead to fallback on failure
     * @returns {jqXHR} The given XHR wrapped in a catch
     */
    function attachFallbackToFailure(xhr) {
        function unloadHandler() {
            xhr.abort();
        }
        
        $(window).on("beforeunload", unloadHandler);
        
        xhr.always(function() {
            $(window).off("beforeunload", unloadHandler);
        });
        
        return xhr.fail(function(jqXHR, textStatus) {
            var status = jqXHR.status;
            
            /*
             * Deal with issues that are still errors, but should 
             * not trigger fallback navigate to occur
             */
            if ((textStatus === "abort") || (status === 0)){
                throw new Error("Request aborted");
            }
            
            // Do fallback navigation if there is no alternative
        });
    }

    /**
     * If the url has the external URL host compared to the current page URL
     * @param {String} url The url needs to compare with the current page URL
     * @returns {Boolean}
     */
    function hasExternalURLHost(url){
        url = $.trim(url);
        if(!url){
            return false;
        }

        var currentHost = window.location.host,
            urlParts = ssmpParseWebAddress.parseWebAddress(url),
            urlHost = urlParts ? urlParts.host : "";
       
        if(urlHost && currentHost !== urlHost){
            return true;
        }

        return false;
    }

    /**
     * Function to determine whether digitalData and its sub-objects exist.
     * @param {str1,str2} object Array of object names 
     * @returns {Promise<Object>} return digitalData object.
     */
    function isDigitalData (str1,str2) {
        // init digitalData object
        if(typeof window.digitalData === "undefined" || !window.digitalData){
            window.digitalData = {};
        }
        // init event array
        if(!window.digitalData.event) {
            window.digitalData.event = []
        }
        // like "page" / "findFinder" / "FFsearch" objects that are direct children of digitalData
        if(str1 && !window.digitalData[str1]) {
            window.digitalData[str1] = {};          
        }
        // like "pageInfo" / "attributes" / "user" / "eventInfo" sub-objects that children of "page"
        if (str2 && !window.digitalData[str1][str2]) {
            window.digitalData[str1][str2] = {};
        }       
    }

    /**
     * Function to get linkPosition attributes for AA clicks event.
     * @param {object}  $obj jquery object of the click element
     * @returns {string} return link position text.
     */
    function getLinkPositionForAA ($obj) {
        var linkPosition = "";
        $obj.parents(".aem-GridColumn").each(function(){
            if($(this).hasClass("responsivegrid")){
                linkPosition = $(this).find("h1").eq(0).text();
                return false;
            }
            linkPosition = $(this).find("h2").eq(0).text();
            return !linkPosition;
        });

        return $.trim(linkPosition) || "page-body"; 
    }

    /**
     * Function to get linkUrl attributes (absolute URL format) for AA clicks event
     * @param {object}  $obj jquery object of the click element
     * @returns {string} return link url text.
     */
    function getLinkUrlForAA ($obj) {
        var linkUrl = "";
        if($obj.length > 0) {
            linkUrl = $.trim($obj.get(0).href);
        }
        
        linkUrl = linkUrl || "no value";

        return linkUrl;
    }

    /**
     * Function to get attributes for AA general clicks event.
     * @param {object}  $obj jquery object
     * @returns {object} return generalClickAttr object.
     */
    function getGeneralClickAttrForAA ($obj) {
        if(!$obj || $obj.length <= 0){
            return null;
        }

        var linkPosition = "",
            linkType = "",
            eventName = "",
            linkName = $.trim($obj.text());

        if ($obj.parents().is(".header")) {
            linkPosition = "Header"
        } else if ($obj.parents().is(".footer")) {
            linkPosition = "Footer"
        }else {
            linkPosition = getLinkPositionForAA($obj);
        }

        if(hasExternalURLHost($obj.attr("href"))){
            linkType = "Exit link";
            eventName = "Outbound";
        }else if($obj.find("img").length > 0){
            linkType = "Image link";
            eventName = "Image";
            linkName = linkName || "Image Link";
        }else if($obj.closest(".ssmp-ctalink--button, .ssmp-ctalink--button-outlined, .ssmp-ctalink--button-solid").length > 0){
            linkType = "Button link";
            eventName = "Button";
        }else {
            linkType = "Text link";
            eventName = "Text";
        }

        if($obj.attr("data-hero-banner-link") === "true"){
            eventName = "Homepage Banner Click";
        }

        return {
            eventInfo: {
                linkType: linkType,
                eventName: eventName
            },
            attributes: {
                linkName : linkName,
                linkPosition: linkPosition,
                linkUrl : getLinkUrlForAA($obj)
            }
        };
    }

    /**
     * Function to set attributes for AA general clicks event.
     * @param {object}  $obj jquery object
     */
    function setGeneralClickEventForAA($obj){
        var linkHref = $obj.attr("href"),
            isDownload = false,
            pdfLink = /.pdf/,
            downloadLink = /\.(?:doc|docx|eps|xls|ppt|pptx|pdf|xlsx|tab|csv|zip|txt|vsd|vxd|xml|js|css|rar|exe|wma|mov|avi|wmv|mp3|wav|m4v)($|\&|\?)/;
        if((pdfLink.test(linkHref) || downloadLink.test(linkHref)) && $obj.data("target-checked") !== "true"){
            isDownload = true;
        }
        // Don't need to track downloadlist click event / fund detail page tabs / other elements that have "event-info" as they have own AA tracks
        if (!isDownload && !$obj.parents().is(".fund-nav") && !$obj.parents().is(".tab-nav") && !$obj.attr("event-info")) {
            window.digitalData.event.push(getGeneralClickAttrForAA($obj));
        }
    }

    /**
     * Function to measure the grayscale of a color .
     * @param {String} color The color need to measure, support Hex or RGB(A) value of color.
     * @returns {Boolean} true :represents to the color is dark.
     *                    false :represents to the color is light.
     */
    function checkGray(color){
        var regHex=/^#([0-9a-f]{3}|[0-9a-f]{6})/i,
            regRgb=/^(rgb)/i,
            r= 255, g= 255, b=255;
        color=color.replace(/\s/g,"")
        if(regHex.test(color)){
            var newColor="";
            if(color.length===4){
                newColor=Array.prototype.map.call(color,function(n){
                    return n.concat(n);
                }).join('').split("##")[1];
            }else{
                newColor=color.split("#")[1];
            }
            r=parseInt(newColor.slice(0,2),16);
            g=parseInt(newColor.slice(2,4),16);
            b=parseInt(newColor.slice(4,6),16);
        }else if(regRgb.test(color)){
            var rgb=color.split("(")[1].split(")")[0].split(',');
                var a=parseFloat(rgb[3]) || 1; //support for rgba
                r=(1-a)*255+a*parseInt(rgb[0]);
                g=(1-a)*255+a*parseInt(rgb[1]);
                b=(1-a)*255+a*parseInt(rgb[2]);
        }
        var gray = (r*299+g*587+b*114+500)/1000;
        
        return gray < 100 ;
    }


    /**
     * Get the Parameter value by name from the URL
     * @param {String} name The Parameter name
     * @param {String} url The URL to be searched for
     */
    function getURLParamByName(name, url){
        var search = url || window.location.search,
            regex = new RegExp("[?&]" + name + "=([^&;#]*)"),
            result = null;

        result = regex.exec(search);
        return result ? decodeURIComponent(result[1]) : "";
    }
    
    /**
     * Retrieve the Vue library
     * @returns {Promise<Object>} Resolves to an Object containing the localization data
     */
    var loadChartLibrary = (function (){
        var chartLibrary;
        if(typeof window.Highcharts === "function"){
            chartLibrary = $.when();
        }
        return function(){
            if(!chartLibrary){
                var deferredObj = $.Deferred();
                attachFallbackToFailure($.ajax({
                    url: "/etc.clientlibs/statestreet-common/clientlibs/clientlib-vendor/highcharts.min.js",
                    dataType: "script",
                    method: "GET",
                    cache: true
                })).then(function(response) {
                    deferredObj.resolve(response);
                })
                .fail(function(request, status, error) {
                    deferredObj.reject(error);
                    console.warn("Chart Library:: " + error);
                });
                chartLibrary = deferredObj.promise();
            }
            return chartLibrary;
        };
    })();

    /**
     * Retrieve the Animation library
     * @returns {Promise<Object>} Resolves to an Object containing the localization data
     */
    var loadAnimationLibrary = (function (){
        var animationLibrary;
        if(typeof window.Gsap === "function"){
            animationLibrary = $.when();
        }
        return function(){
            if(!animationLibrary){
                var deferredObj = $.Deferred();
                attachFallbackToFailure($.ajax({
                    url: "/etc.clientlibs/statestreet-common/clientlibs/clientlib-vendor/gsap.min.js",
                    dataType: "script",
                    method: "GET",
                    cache: true
                })).then(function(response) {
                    deferredObj.resolve(response);
                })
                .fail(function(request, status, error) {
                    deferredObj.reject(error);
                    console.warn("Animation Library:: " + error);
                });
                animationLibrary = deferredObj.promise();
            }
            return animationLibrary;
        };
    })();
 
    /**
     * Function to add Analytics attributes for the links/buttons
     * @param {jQuery<object>}  $sec The area which need to check the links.
     */
    function addClickAttrForAA($sec){
        $sec.find("a").each(function(){
            var $obj = $(this),
                analyticsAttr = "";
            
            // Don't need to track nav links / other elements that have "data-aa-checked" as they have own AA attributes
            if ($obj.attr("data-aa-checked") !== "true" && !$obj.parents().is(".cmp-navigation")) {
                if($obj.closest(".ssmp-ctalink--button, .ssmp-ctalink--button-outlined, .ssmp-ctalink--button-solid").length > 0){
                    analyticsAttr = "aa-global-ctabutton";
                }else {
                    analyticsAttr = "aa-global-ctalink";
                }
            }

            if(analyticsAttr) {
                $obj.attr(analyticsAttr, "").attr("data-aa-checked", "true");
            }
        });

        $sec.find(".ssmp-ctalink button").attr({
            "aa-global-ctabutton": "",
            "data-aa-checked": "true"
        });
    }

    ssmpCore.getSpecialLinks = getSpecialLinks;
    ssmpCore.arrFind = arrFind;
    ssmpCore.attachFallbackToFailure = attachFallbackToFailure;
    ssmpCore.isAuthorMode = getInstanceMode;
    ssmpCore.hasExternalURLHost = hasExternalURLHost;

    ssmpCore.isDigitalData = isDigitalData;
    ssmpCore.getGeneralClickAttrForAA = getGeneralClickAttrForAA;    
    ssmpCore.getLinkPositionForAA = getLinkPositionForAA;
    ssmpCore.getLinkUrlForAA = getLinkUrlForAA;
    ssmpCore.setGeneralClickEventForAA = setGeneralClickEventForAA;
    ssmpCore.addClickAttrForAA = addClickAttrForAA;
    ssmpCore.checkGray = checkGray;
    ssmpCore.getURLParamByName = getURLParamByName;

    ssmpCore.loadChartLibrary = loadChartLibrary;
    ssmpCore.loadAnimationLibrary = loadAnimationLibrary;
    return ssmpCore;
}(
    window.jQuery, 
    window["ssmp-js-core"],
    window["ssmp-js-parse-web-address"]
));

(function($) {
    "use strict";

    //Check the link to a specific page of a PDF on an iPad/iPhone
    var IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
    var IS_IPHONE = (navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
    if (IS_IPAD || IS_IPHONE) {
        $("a").each(function(){
            $(this).attr("href", function(i, val){
                if(val==undefined){
                    return;
                }else if(val.indexOf(".pdf#page=") != -1){
                    return val.replace("#page=","#page");
                }
            });
        })
    }

}(window.jQuery));

window["ssmp-icons"] = (function(ssmp)
{
    "use strict";

    /**
     * Function to generate a svg Element by its Id and size.
     * @param {String} id The icon Id.
     * @param {String} size The icon size like 1x,2x or xxs.
     * @returns {DOM Element} The generated Element of an icon.
     */
    function injectSvgElement(id,size,color){
        var $svgIcon=document.createElementNS("http://www.w3.org/2000/svg","svg");
        var iconClass=size?"ssmpsvg ssmpsvg-"+size+" "+id:"ssmpsvg "+id;
        $svgIcon.setAttribute("class",iconClass);
        $svgIcon.setAttribute("style","fill:"+color);
        var use = document.createElementNS("http://www.w3.org/2000/svg","use");
        use.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#"+id);
        $svgIcon.appendChild(use);
        return $svgIcon;
    }

    ssmp.icon = {
        injectSvgElement: injectSvgElement
    };
    return ssmp;
}(
    window["ssmp-js-core"] || {}
));

/**
 * 
 */
var clrResponse = {};
var disclaimersResponse = {};
var redirectMap = {};
var finalCountrySelection, finalLanguageSelection, finalRoleSelection = '';
var finalCountryLabel, finalLanguageLabel, finalRoleLabel = '';
var currentCountrySelection, currentLanguageSelection, currentRoleSelection = '';
var clrCountries = {};
var clrPopupPopulated = false;
var currentUrl = new URL(window.location.href);
selectedPreference = currentUrl.pathname.replace('/content/statestreet/', "").replace(".html", "");
var targetUrlCookie = currentUrl.pathname;
var prefCountry, prefLang, prefRole;
var isDomainRequest = false;
var siteContentRoot = "/content/statestreet";
var isVanityUrl = false;
var vanityTarget = '';
var defaultVanityCountry = 'us', defaultVanityRole = 'asset-manager', defaultVanityLanguage = 'en';
let optional_cid;

if (selectedPreference) {
	var prefTokens = selectedPreference.replace(/^\/|\/$/g, '').split("/");
	prefCountry = prefTokens[0];
	prefLang = prefTokens[1];
	prefRole = prefTokens[2];
} else if (targetUrlCookie && targetUrlCookie.indexOf("us/en/asset-manager") == -1) {
	var prefTokens = targetUrlCookie.replace(/^\/|\/$/g, '').split("/");
	prefCountry = prefTokens[0];
	prefLang = prefTokens[1];
	prefRole = prefTokens[2];
}


function processDisclaimers(disclaimersResponse) {
	if (isEmpty(disclaimersResponse)) {
		$.ajax({
			url: "/bin/stt/disclaimers", success: function (response) {
				disclaimersResponse = response;
				populateDisclaimers(disclaimersResponse);
			}
		});
	} else {
		populateDisclaimers(disclaimersResponse);

	}


}

function getVanityTarget(redirectMap, refererVanity) {
	var vanityTarget = '';
	if (isEmpty(redirectMap)) {
		$.ajax({
			url: "/bin/stt/redirection", success: function (response) {
				redirectMap = response.redirectMap;
				vanityTarget = redirectMap.refererVanity;

			}
		});
	} else {
		vanityTarget = redirectMap.refererVanity;

	}
}


/**
   * Set the content for disclaimer.
   * @param disclaimertext The String conatining the content for the Disclaimer.
   */
function setDisclaimers(disclaimerText) {
	$("#js-ssmp-disclosure").html("");
	if (disclaimerText) {
		$("#js-ssmp-disclosure").html(disclaimerText).show();
	} else {
		$("#js-ssmp-disclosure").hide();
	}

}


function setPrivacyPoilcyURL(privacyPolicyURL) {
	if (privacyPolicyURL) {
		$("#js-ssmp-clrPrivacyText").attr("href", privacyPolicyURL).show();
	} else {
		$("#js-ssmp-clrPrivacyText").hide();
	}
}

function setTermsAndConditionsURL(termsAndCondURL) {
	if (termsAndCondURL) {
		$("#js-ssmp-clrTermsText").attr("href", termsAndCondURL).show();
	} else {
		$("#js-ssmp-clrTermsText").hide();
	}
}

function setInvestorsURL(investorsURL, location) {
	if (investorsURL && location !== "nl") {
		$("#js-ssmp-investorsText").attr("href", investorsURL).show();
		$("#js-ssmp-investorsText-alt").hide();
	} else if (investorsURL && location === "nl") {
		$("#js-ssmp-investorsText-alt").attr("href", investorsURL).show();
		$("#js-ssmp-investorsText").hide();
	} else {
		$("#js-ssmp-investorsText, #js-ssmp-investorsText-alt").hide();
	}
}

$(document).ready(function () {
	$.ajax({
		url: "/bin/stt/redirection", success: function (response) {

			redirectMap = response.redirectMap;
			var previouseCLRCookie = getCookie('stt-clr');
			var clrArray = previouseCLRCookie ? previouseCLRCookie.split(":") : undefined;
			if (clrArray) {
				currentCountrySelection = clrArray[0];
				currentLanguageSelection = clrArray[1];
				currentRoleSelection = clrArray[2];
			}
			if (currentCountrySelection && currentLanguageSelection && currentRoleSelection) {
				updateBreadCrumb(currentCountrySelection, currentLanguageSelection, currentRoleSelection);
			}
			var currentLocation = window.location.href;
			var requestedUrl = new URL(currentLocation);
			if (requestedUrl.pathname.indexOf("//") != -1) {
				var correctedLocation = currentLocation.replace(/([^:]\/)\/+/g, "$1");
				window.location.href = correctedLocation;
			}
			//vanity logic
			var url = new URL(window.location.href);
			selectedPreference = url.pathname.replace('/content/statestreet/', "").replace(".html", "");
			var selPrefCookie = selectedPreference;
			var currentLocationReferer = document.referrer;
			var requestUrl = '';
			if (currentLocationReferer) {
				requestUrl = new URL(currentLocationReferer);
			}
			var refererPath = '';
			if (requestUrl) {
				refererPath = requestUrl.pathname;
			}
			if (!refererPath) {
				refererPath = url.pathname;
			}
			var containsRedirectTarget = (refererPath && redirectMap[refererPath]) ? true : false;
			isVanityUrl = (currentLocation.indexOf("vanity-redirect") != -1 || containsRedirectTarget) ? true : false;

			if (!isVanityUrl) {
				if (selPrefCookie && redirectMap[selPrefCookie] !== undefined) {
					isVanityUrl = true;
					vanityTarget = redirectMap[selPrefCookie];
				}
			}


			if (isVanityUrl) {
				const queryString = window.location.search;
				const urlParams = new URLSearchParams(queryString);
				var refererVanity = urlParams.get('referer');
				optional_cid = urlParams.get('cid')

				if (!refererVanity) {
					if (containsRedirectTarget) {
						refererVanity = refererPath;
					}
				}
				console.log('refererVanity:' + refererVanity);
				if (!vanityTarget || vanityTarget === "") {
					vanityTarget = redirectMap[refererVanity];
				}

				if (vanityTarget && vanityTarget.indexOf('/location/') != -1 && clrArray) {
					vanityTarget = vanityTarget.replace("/location/", "/" + clrArray[0] + "/");
				}
				if (vanityTarget && vanityTarget.indexOf('/language/') != -1 && clrArray) {
					vanityTarget = vanityTarget.replace("/language/", "/" + clrArray[1] + "/");
				}
				if (vanityTarget && vanityTarget.indexOf('/role') != -1 && clrArray) {
					vanityTarget = vanityTarget.replace("/role", "/" + clrArray[2]);
				}

				var vanityTokens = vanityTarget.split("/");
				if (vanityTokens && vanityTokens.length >= 4) {
					if (vanityTokens[1] !== "location") {
						defaultVanityCountry = vanityTokens[1];
					}
					if (vanityTokens[2] !== "language") {
						defaultVanityLanguage = vanityTokens[2];
					}
					if (vanityTokens[3] !== "role") {
						defaultVanityRole = vanityTokens[3];
					}
				}
			}
			console.log("vanityTarget:" + vanityTarget);
			var excludeClrValidation = $("#clr_validation").attr("data-exclude-clr-validation") == "true" ? true : false;
			var isAuthor = $("#wcm_is_author").text() == "true" ? true : false;
			var isViewAsPublishedPage = (currentLocation.indexOf("wcmmode=disabled") != -1);
			var sttRedirected = getCookie('stt-redirected');
			var defaultRedirectLocation = '/content/statestreet/us/en/asset-manager.html';
			var isRootRedirect = currentLocation.endsWith('statestreet.com/') || currentLocation.endsWith('.com/') || currentLocation.endsWith('statestreet.com') || currentLocation.endsWith('.com');
			var isDefaultRedirect = (currentLocation.endsWith('us/en/asset-manager') || currentLocation.endsWith('us/en/asset-manager/'));
			var isDefaultOrRootRedirect = currentLocation.endsWith('statestreet.com/') || currentLocation.endsWith('.com/') || currentLocation.endsWith('statestreet.com') || currentLocation.endsWith('.com') || (currentLocation.indexOf('us/en/asset-manager') != -1);
			var clrPreference = previouseCLRCookie ? previouseCLRCookie.replaceAll(":", "/") : null;
			var isExcludedPath = (currentLocation.indexOf("/conf/stt/settings") != -1 || currentLocation.indexOf("/editor.html/") != -1) || currentLocation.indexOf("/content/alpha") != -1;
			if (isAuthor) {
				$("#clr_no_cookie_popup").hide();
			}
			if (!isAuthor && isDefaultOrRootRedirect && !previouseCLRCookie) {
				$("#clr_no_cookie_popup").show();
				if (detectDeviceType() !== "Desktop") {
					$(".ssmp-modal__page.ssmp-modal__navigation-page").hide();
					$("#selfidentifier_popup").show();
				}
				$("#countries_ul .ssmp-form-select__select-optionlist__option").each(function () {
					if ($(this).attr("data-location-code") && ($(this).attr("data-location-code") == prefCountry || (isVanityUrl && $(this).attr("data-location-code") == defaultVanityCountry))) {
						$(this).click();
						$("#countries_button .ssmp-form-select__select-activator__text").text($(this).text());
					}

				});
				$("#ssmp-self-identifier__close-button").hide();
				$(".ssmp-header__hamburger-close").hide();
			}
			if (!isExcludedPath) {
				if (!isDefaultOrRootRedirect || (isDefaultOrRootRedirect && previouseCLRCookie)) {
					$("#clr_no_cookie_popup").hide();
				}
				if (!previouseCLRCookie && (!isDefaultRedirect || !isDefaultOrRootRedirect) && !excludeClrValidation) {
					//window.location.href = '/content/statestreet/us/en/asset-manager.html';
					$("#clr_no_cookie_popup").show();
					displayCLRPopup();
				}

				if (isVanityUrl && vanityTarget && previouseCLRCookie) {
					console.log("script redirect v1");
					if (optional_cid) {
						window.location.href = '/content/statestreet' + vanityTarget + ".html?cid=" + optional_cid;
					} else {
						window.location.href = '/content/statestreet' + vanityTarget + ".html";
					}
				}
				else if ((isRootRedirect || isDefaultRedirect) && previouseCLRCookie && currentLocation.indexOf(clrPreference) == -1) {
					console.log("script redirect63");
					if (optional_cid) {
						window.location.href = '/content/statestreet/' + clrPreference + ".html?cid=" + optional_cid;
					} else {
						window.location.href = '/content/statestreet/' + clrPreference + '.html';
					}
				}
				else if (!isAuthor && !isExcludedPath && !excludeClrValidation && !isVanityUrl && previouseCLRCookie && sttRedirected && currentLocation.indexOf(clrPreference) == -1 && isRootRedirect) {
					console.log("script redirect1");
					if (optional_cid) {
						window.location.href = '/content/statestreet/' + clrPreference + ".html?cid=" + optional_cid;
					} else {
						window.location.href = '/content/statestreet/' + clrPreference + ".html";
					}
					setCookie("stt-redirected", "ok", 365);

				} else {
					if (!isAuthor && !isExcludedPath && !excludeClrValidation && !isVanityUrl && isDefaultOrRootRedirect && clrPreference && !selectedPreference) {
						console.log("script redirect5");
						if (optional_cid) {
							window.location.href = '/content/statestreet/' + clrPreference + ".html?cid=" + optional_cid;
						} else {
							window.location.href = '/content/statestreet/' + clrPreference + '.html';
						}
					} else if (isDefaultOrRootRedirect && !previouseCLRCookie) {
						console.log("script redirect61");
						displayCLRPopup();
					}
				}
			}
		}
	});
	$("#clr_breadcrumb").click(function () {
		$("#clr_no_cookie_popup").show();
		var previouseCLRCookie = getCookie('stt-clr');
		var clrArray = previouseCLRCookie ? previouseCLRCookie.split(":") : undefined;
		if (clrArray) {
			prefCountry = clrArray[0];
			prefLang = clrArray[1];
			prefRole = clrArray[2];
			$("#countries_ul .ssmp-form-select__select-optionlist__option").each(function () {
				if ($(this).attr("data-location-code") && ($(this).attr("data-location-code") == prefCountry || (isVanityUrl && $(this).attr("data-location-code") == defaultVanityCountry))) {
					$(this).click();
					$("#countries_button .ssmp-form-select__select-activator__text").text($(this).text());
				}

			});
		}
		if (!clrPopupPopulated) {
			displayCLRPopup();
			$("#countries_ul .ssmp-form-select__select-optionlist__option").each(function () {
				if ($(this).attr("data-location-code") && ($(this).attr("data-location-code") == prefCountry || (isVanityUrl && $(this).attr("data-location-code") == defaultVanityCountry))) {
					$(this).click();
					$("#countries_button .ssmp-form-select__select-activator__text").text($(this).text());
				}

			});
		}

	}
	);
	$("#ssmp-self-identifier__close-button").click(function () {
		$("#clr_no_cookie_popup").hide();
	});
});

function populateCountries(liHtml, optionHtml) {
	$(".ssmp-self-identifier__button").hide();
	$('#clr_countries_ul').append('<ul id="countries_ul" class="ssmp-form-select__select-optionlist" role="listbox" aria-label="listbox">' + liHtml + '</ul>');
	$('#js-ssmp-locationDrop').append(optionHtml);
	$("#selfidentifier_popup").addClass("locations_only");
	$("#countries_ul .ssmp-form-select__select-optionlist__option").each(function () {
		if ($(this).attr("data-location-code") && ($(this).attr("data-location-code") == prefCountry || (isVanityUrl && $(this).attr("data-location-code") == defaultVanityCountry))) {
			$(this).click();
			$("#countries_button .ssmp-form-select__select-activator__text").text($(this).text());
		}
	});

}

function displayCLRPopup() {
	console.log("script redirect62");
	eraseCookie("stt-requested");
	$.ajax({
		url: "/bin/stt/clrAssociations", success: function (response) {
			clrResponse = response;
			siteContentRoot = clrResponse["siteContentRoot"];
			var liHtml = '';
			var optionHtml = '';
			//liHtml += '<li class="location_li location_title">Select a location</li>';//add by xin
			clrCountries = clrResponse.countries;
			var locationCodes = Object.keys(clrCountries);
			$.each(locationCodes, function (index) {
				var locationCode = locationCodes[index];
				var individualCountryObject = clrCountries[locationCode];
				var currentLanguagesList = individualCountryObject["languages"];
				var currentLanguagesKeyList = Object.keys(individualCountryObject["languages"]);
				var countryDefaultLanguage = currentLanguagesKeyList[0];
				var labelKey = countryDefaultLanguage + "_" + locationCode + "-name";
				var countryTranslatedLabel = individualCountryObject[labelKey];
				if (!countryTranslatedLabel) {
					labelKey = countryDefaultLanguage + "-name";
					countryTranslatedLabel = individualCountryObject[labelKey];
				}

				if (!countryTranslatedLabel) {
					countryTranslatedLabel = individualCountryObject["en-name"];
				}
				liHtml = liHtml + '<li class="ssmp-form-select__select-optionlist__option group-start" role="option" aria-selected="false" tabindex="-1" data-location-code="' + locationCode + '" onclick="populateRolesLanguages($(this))">' + countryTranslatedLabel + '</li>';
				optionHtml = optionHtml + '<option  data-location-code="' + locationCode + '" onclick="populateRolesLanguages($(this))">' + countryTranslatedLabel + '</option>';
				currentCountrySelection = locationCode;
				currentLanguageSelection = countryDefaultLanguage;
			});
			$("#js-ssmp-disclosure").hide();
			populateCountries(liHtml, optionHtml);
			var languageRolesMap = Object.values(response);

		}

	});
	clrPopupPopulated = true;
}
function populateRolesLanguages(selectedLocationElement) {
	$("#countries_ul").hide();
	$("#clr_countries_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(0deg)");//add by xin

	resetCLRTitle();
	$("#clr_lang_lables").html("");
	$("#countries_button .ssmp-form-select__select-activator__text").text($(selectedLocationElement).text());
	var selectedCountry = $(selectedLocationElement).attr("data-location-code");
	var currentLanguagesObject = clrCountries[selectedCountry]["languages"];
	var currentLanguages = Object.keys(currentLanguagesObject);
	changeSelectedClass(selectedLocationElement);
	finalCountrySelection = selectedCountry;

	var langLabelSpan = "";
	$.each(currentLanguages, function (index) {
		var currentLanguage = currentLanguages[index].replace(/\s/g, '');
		if (index == 0) {
			langLabelSpan = langLabelSpan + ' <span value=' + currentLanguage + ' data-lang-code=' + currentLanguage + ' onclick=changeSelectedClass($(this));populateRoles("' + selectedCountry + '","' + currentLanguage + '",{});setLanguageCookieValue("' + currentLanguage + '"); class="lang_span selected">' + currentLanguage + '</span>';
		} else {
			langLabelSpan = langLabelSpan + ' <span value=' + currentLanguage + ' data-lang-code=' + currentLanguage + ' onclick=changeSelectedClass($(this));populateRoles("' + selectedCountry + '","' + currentLanguage + '",{});setLanguageCookieValue("' + currentLanguage + '"); class="lang_span">' + currentLanguage + '</span>';
		}

	});
	var selectedLanuage = currentLanguages[0];
	$(".lang_span").each(function () {
		if ($(this).hasClass("selected")) {
			selectedLanuage = $(this).attr("data-lang-code");
		}
	});

	finalLanguageSeleAction = selectedLanuage;

	updateCLRTitle();
	var selectedCountryLanguageRoles = currentLanguagesObject[selectedLanuage]["roles"];
	populateRoles(selectedCountry, selectedLanuage, selectedCountryLanguageRoles);
	$("#clr_lang_lables").append(langLabelSpan);
	$(".lang_span").each(function () {
		if ($(this).attr("data-lang-code") && $(this).attr("data-lang-code") == prefLang) {
			finalLanguageSelection = prefLang;
			$(this).click();
		}
		if (isVanityUrl && $(this).attr("data-lang-code") && $(this).attr("data-lang-code") == defaultVanityLanguage) {
			finalLanguageSelection = defaultVanityLanguage;
			$(this).click();
		}
	});
}

function populateRoles(selectedCountry, languageSelected, selectedCountryLanguageRoles) {
	//$("#clr_roles").html("");
	$("#js-ssmp-roleDrop").html("");
	$("#clr_roles_ul .ssmp-form-select__select-optionlist").remove();
	var roleLiHtml = '';
	var roleOptionHtml = '';
	if (Object.keys(selectedCountryLanguageRoles).length === 0) {
		selectedCountryLanguageRoles = clrResponse["countries"][selectedCountry]["languages"][languageSelected]["roles"];
	}
	var roleKeys = Object.keys(selectedCountryLanguageRoles);

	$.each(roleKeys, function (index) {
		var rl = roleKeys[index];
		var rtl = selectedCountryLanguageRoles[rl]["name"];
		var roleLabelObject = selectedCountryLanguageRoles[rl];
		if (rl === finalRoleSelection) {
			//xin add updateRoleDropVal for defect 2482985 b)
			roleLiHtml = roleLiHtml + '<li class="role_li selected" data-role-label="' + rl + '"onclick=changeSelectedClass($(this));updateRoleDropDownVal($(this));setRoleCookieValue("' + rl + '");></li>';
			roleOptionHtml = roleOptionHtml + '<option class="ssmp-form-select__select-optionlist__option group-start selected" data-role-label="' + rl + '"onclick=changeSelectedClass($(this));updateRoleDropDownVal($(this));setRoleCookieValue("' + rl + '"); role="option" aria-selected="true" tabindex="-1" data-option-value="" data-option-code="us" data-option-group="tier1">' + rl + '</option>';
		}
		else {
			roleLiHtml = roleLiHtml + '<li class="role_li" data-role-label="' + rl + '"onclick=changeSelectedClass($(this));updateRoleDropDownVal($(this));setRoleCookieValue("' + rl + '");></li>';
			roleOptionHtml = roleOptionHtml + '<option class="ssmp-form-select__select-optionlist__option group-start selected" data-role-label="' + rl + '"onclick=changeSelectedClass($(this));updateRoleDropDownVal($(this));setRoleCookieValue("' + rl + '"); role="option" aria-selected="true" tabindex="-1" data-option-value="" data-option-code="us" data-option-group="tier1">' + rl + '</option>';
		}
	});
	//$("#clr_roles").append('<ul class="ul_no_list_style">' + roleLiHtml + '</ul>');
	$('#clr_roles_ul').append('<ul class="ssmp-form-select__select-optionlist" role="listbox" aria-label="listbox">' + roleLiHtml + '</ul>');
	$('#js-ssmp-roleDrop').append(roleOptionHtml);
	currentCountrySelection = selectedCountry;
	currentLanguageSelection = languageSelected;
	updateCLRTitle();
	updateLabels();
	$("#stt_accept_cookie").show();
	$("#selfidentifier_popup").removeClass("locations_only");

	$(".role_li").each(function () {
		if ($(this).attr("data-role-label") && $(this).attr("data-role-label") == finalRoleSelection) {
			$(this).click();
		}
	});
	$(".role_li").each(function () {
		if ($(this).attr("data-role-label") && $(this).attr("data-role-label") == prefRole) {
			finalRoleSelection = prefRole;
			$(this).click();
		}
		if (isVanityUrl && $(this).attr("data-role-label") && $(this).attr("data-role-label") == defaultVanityRole) {
			finalRoleSelection = defaultVanityRole;
			$(this).click();
		}
	});


}


function setRoleCookieValue(selectedRole) {
	$(".ssmp-self-identifier__button").show();
	finalLanguageSelection = currentLanguageSelection;
	currentRoleSelection = selectedRole;
	finalRoleSelection = selectedRole;

	currentRoleSelection = finalRoleSelection;
	updateCookieButtonLabels();
	processDisclaimers(disclaimersResponse);
	setRoleDataAttributes();
	updateCLRTitle();
}

function updateRoleDropDownVal(rtl) {
	$("#roles_button .ssmp-form-select__select-activator__text").text(rtl.text());
}
function setLanguageCookieValue(selectedLanguage) {

	finalLanguageSelection = selectedLanguage.replace(/\s/g, '');
}
function setCookie(name, value, days) {
	var expires = "";
	if (days) {
		var date = new Date();
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		expires = "; expires=" + date.toUTCString();
	}
	document.cookie = name + "=" + (value || "") + expires + "; path=/";
}
function getCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') c = c.substring(1, c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
	}
	return null;
}
function eraseCookie(name) {
	document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}

$(document).ready(function () {
	$("#js-ssmp-clrButtonLabel").click(function () {
		var clrCookie = finalCountrySelection + ":" + finalLanguageSelection + ":" + finalRoleSelection;
		setCLRCookie("", "stt-clr", clrCookie);
	});
});

function changeSelectedClass(currentElement) {
	$(currentElement).addClass("selected");
	$(currentElement).siblings().removeClass("selected");
	//$("#roles_button .ssmp-form-select__select-activator__text").text($(currentElement).text());
	$("#clr_roles_ul .ssmp-form-select__select-optionlist").hide();
	$("#clr_roles_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(0deg)");//add by xin
}

function updateCLRTitle() {

	setCountryDataAttributes();
	var $title = $("#stt-self-identifier__title .title-text"),
		locationLabel = $title.attr("data-location-label"),
		roleLabel = $title.attr("data-role-label"),
		titleText = "",
		countryPlaceholder = "%%C%%",
		rolePlaceholder = "%%R%%";

	if (locationLabel && roleLabel) {
		titleText = $title.attr("data-cr-title").replace(countryPlaceholder, "<span>" + locationLabel + "</span>").replace(rolePlaceholder, "<span>" + roleLabel + "</span>");
	} else if (locationLabel) {
		titleText = $title.attr("data-c-title").replace(countryPlaceholder, "<span>" + locationLabel + "</span>");
	}

	if (titleText) {
		$title.html(titleText);
	}
}

function resetCLRTitle() {
	var $title = $("#stt-self-identifier__title .title-text");
	$title.removeAttr("data-c-title");
	$title.removeAttr("data-cr-title");
	$title.removeAttr("data-location-label");
	$title.removeAttr("data-role-label");
}


function updateLabels(locationCode, countryDefaultLanguage) {

	var searchKey = finalCountrySelection + "-" + finalLanguageSelection + "-" + finalRoleSelection;
	/*if(finalCountrySelection && finalLanguageSelection && finalRoleSelection){

	}*/
	if (locationCode && countryDefaultLanguage) {
		//roles
		$("#clr_roles").hide();
		$(".role_li").each(function () {
			var roleLablel = $(this).attr("data-role-label");
			if (roleLablel) {
				var roleTitle = clrResponse["countries"][selectedCountry]["roles"][roleLablel][countryDefaultLanguage + "-name"];
				$(this).text(roleTitle);
			}
		});
		$("#clr_roles").show();


	}
}
function updateBreadCrumb(currentCountrySelection, currentLanguageSelection, currentRoleSelection) {
	$.ajax({
		url: "/bin/stt/clrAssociations", success: function (response) {
			clrResponse = response;
			//BreadCrumb country
			var locationLablel = currentCountrySelection;
			if (locationLablel) {
				var titleKey = [currentLanguageSelection + "_" + locationLablel + "-name"];

				var locationTitle = clrResponse["countries"][locationLablel][titleKey];

				if (!locationTitle) {
					titleKey = [currentLanguageSelection + "-name"];
					locationTitle = clrResponse["countries"][locationLablel][titleKey];
				}
				if (!locationTitle) {
					titleKey = [locationLablel + "-name"];
					locationTitle = clrResponse["countries"][locationLablel][titleKey];
				}
				if (!locationTitle) {
					titleKey = "en-name";
					locationTitle = clrResponse["countries"][locationLablel][titleKey];
				}
				$("#clr_breadcrumb_country").text(locationTitle);
			}
			//BreadCrumb role
			if (currentCountrySelection && currentLanguageSelection) {
				var roleLablel = currentRoleSelection;
				if (roleLablel) {
					var roleTitle = clrResponse["countries"][currentCountrySelection]["roles"][roleLablel][currentLanguageSelection + "-name"];
					$("#clr_breadcrumb_role").text(roleTitle);
				}
			}
		}

	});
}
function updateLabels() {
	//countries
	$("#clr_countries").hide();
	$(".location_li").each(function () {
		var locationLablel = $(this).attr("data-location-code");
		if (locationLablel) {
			var titleKey = [currentLanguageSelection + "_" + locationLablel + "-name"];

			var locationTitle = clrResponse["countries"][locationLablel][titleKey];

			if (!locationTitle) {
				titleKey = [currentLanguageSelection + "-name"];
				locationTitle = clrResponse["countries"][locationLablel][titleKey];
			}
			if (!locationTitle) {
				titleKey = [locationLablel + "-name"];
				locationTitle = clrResponse["countries"][locationLablel][titleKey];
			}
			if (!locationTitle) {
				titleKey = "en-name";
				locationTitle = clrResponse["countries"][locationLablel][titleKey];
			}
			$(this).text(locationTitle);
		}
	});
	$("#clr_countries").show();
	//roles
	if (currentCountrySelection && currentLanguageSelection) {
		$("#clr_roles").hide();
		$(".role_li").each(function () {
			var roleLablel = $(this).attr("data-role-label");
			if (roleLablel) {
				var roleTitle = clrResponse["countries"][currentCountrySelection]["roles"][roleLablel][currentLanguageSelection + "-name"];
				$(this).text(roleTitle);
			}
		});
		$("#clr_roles").show();
	}


}

function updateCookieButtonLabels() {
	if (currentCountrySelection && currentLanguageSelection) {
		//accept button
		var buttonLabelKey = currentLanguageSelection + "_" + currentCountrySelection + "-clrButtonLabel";
		var cookieButtonLabel = clrResponse[buttonLabelKey];
		if (!cookieButtonLabel) {
			buttonLabelKey = currentLanguageSelection + "-clrButtonLabel";
			cookieButtonLabel = clrResponse[buttonLabelKey];
		}
		if (!cookieButtonLabel) {
			cookieButtonLabel = clrResponse["en-clrButtonLabel"];
		}
		$("#js-ssmp-clrButtonLabel").text(cookieButtonLabel);

		//settings button

		var settingsButtonLabelKey = currentLanguageSelection + "_" + currentCountrySelection + "-clrEscapeLink";
		var cookieSettingsLabel = clrResponse[settingsButtonLabelKey];
		if (!cookieSettingsLabel) {
			settingsButtonLabelKey = currentLanguageSelection + "-clrEscapeLink";
			cookieSettingsLabel = clrResponse[settingsButtonLabelKey];
		}
		if (!cookieSettingsLabel) {
			cookieSettingsLabel = clrResponse["en-clrEscapeLink"];
		}
		$("#js-ssmp-clrCookieSettingsLabel").text(cookieSettingsLabel);

	}
}

function setCLRCookie(locationContext, cookieName, cookieValue) {
	var now = new Date();
	var then = new Date();
	then.setMonth(then.getMonth() + 13); // 13 months from now
	var diff = (then.getTime() - now.getTime()) / 1000;

	return $.ajax({
		method: "POST",
		url: "/bin/stt/clrCookie" + "?" + $.param({
			"cookieName": cookieName,
			"cookieValue": cookieValue,
			"Secure": true,
			"Expiration": diff,
			"currentCountry": locationContext
		}),
		success: function (data, textStatus) {
			if (data) {
				// data.redirect contains the string URL to redirect to
				var redirectURL = data.cookieResponse.redirect;
				if (isVanityUrl && vanityTarget) {
					var previouseCLRCookie = getCookie('stt-clr');
					var clrArray = previouseCLRCookie ? previouseCLRCookie.split(":") : undefined;
					if (vanityTarget && vanityTarget.indexOf('/location/') != -1 && clrArray) {
						vanityTarget = vanityTarget.replace("/location/", "/" + clrArray[0] + "/");
					}
					if (vanityTarget && vanityTarget.indexOf('/language/') != -1 && clrArray) {
						vanityTarget = vanityTarget.replace("/language/", "/" + clrArray[1] + "/");
					}
					if (vanityTarget && vanityTarget.indexOf('/role') != -1 && clrArray) {
						vanityTarget = vanityTarget.replace("/role", "/" + clrArray[2]);
					}
					console.log("isVanityUrl:" + isVanityUrl);
					console.log("vanityTarget:" + vanityTarget);
					targetUrlCookie = vanityTarget;
				}
				var targetUrl = targetUrlCookie;
				if (targetUrl != null && targetUrl.indexOf("null") == -1 && targetUrl !== undefined && targetUrl.indexOf(redirectURL.replace("/content/statestreet", "").replace(".html", "")) != -1) {
					eraseCookie("stt-targeturl");
                    if (optional_cid) {
					console.log("script redirection7");
					window.location.href = targetUrl+ "?cid=" + optional_cid;
                    }else{
                    console.log("script redirection71");
					window.location.href = targetUrl;
                    }
				} else {
					eraseCookie("stt-targeturl");
					console.log("script redirection8");
					var contentPathRemovedUrl = redirectURL.replace("/content/statestreet", "").replace(".html", "");
					if (contentPathRemovedUrl !== undefined && targetUrl !== undefined) {
						var redirectURLSplitted = contentPathRemovedUrl.split("/");
						if (redirectURLSplitted.length >= 3 && contentPathRemovedUrl.indexOf(finalCountrySelection + "/" + finalLanguageSelection + "/" + finalRoleSelection) != -1) {
							var splitTarget = targetUrl.split("/");
							if (splitTarget.length >= 3) {
								splitTarget[1] = finalCountrySelection;
								splitTarget[2] = finalLanguageSelection;
								splitTarget[3] = finalRoleSelection;
							}
							var finalRedirectUrl = "";
							var splitTargetLength = splitTarget.length;
							for (i = 0; i < splitTarget.length; i++) {
								if (i !== splitTargetLength - 1) {
									finalRedirectUrl = "/" + finalRedirectUrl + splitTarget[i] + "/";
								}
								if (i === splitTargetLength - 1) {
									finalRedirectUrl = "/" + finalRedirectUrl + splitTarget[i];
								}

							}
						}
						if (finalRedirectUrl !== "/") {
							console.log("script redirect9");
							window.location.href = "/content/statestreet" + finalRedirectUrl + ".html";
						}
					}
					else {
						console.log("script redirect91");
						window.location.href = redirectURL;
					}
				}
			} else {
				// data.form contains the HTML for the replacement form
				//  $("#myform").replaceWith(data.form);
			}
		}
	});
}

function setCountryDataAttributes() {
	var dataCountryTitle = clrResponse[finalLanguageSelection + "_" + finalCountrySelection + "-clrTitleForC"];
	var dataLocationLabel = clrResponse["countries"][finalCountrySelection][finalLanguageSelection + "_" + finalCountrySelection + "-name"];
	if (!dataCountryTitle) {
		dataCountryTitle = clrResponse[finalLanguageSelection + "-clrTitleForC"] ? clrResponse[finalLanguageSelection + "-clrTitleForC"] : clrResponse["en-clrTitleForC"];
	}
	$("#stt-self-identifier__title .title-text").attr("data-c-title", dataCountryTitle);
	if (!dataLocationLabel) {
		dataLocationLabel = clrResponse["countries"][finalCountrySelection][finalLanguageSelection + "-name"] ? clrResponse["countries"][finalCountrySelection][finalLanguageSelection + "-name"] : clrResponse["countries"][finalCountrySelection]["en-name"];
	}
	$("#stt-self-identifier__title .title-text").attr("data-location-label", dataLocationLabel);
}

function setRoleDataAttributes() {
	var dataCountryRoleTitle = clrResponse[finalLanguageSelection + "_" + finalCountrySelection + "-clrTitleForCR"];
	var dataRoleLabel = '';
	if (clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"] !== undefined &&
		clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection] !== undefined) {
		dataRoleLabel = clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection][finalLanguageSelection + "-name"] ?
			clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection][finalLanguageSelection + "-name"] :
			clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection]["en-name"];
	}

	if (!dataCountryRoleTitle) {
		dataCountryRoleTitle = clrResponse[finalLanguageSelection + "-clrTitleForCR"] ? clrResponse[finalLanguageSelection + "-clrTitleForCR"] : clrResponse["en-clrTitleForCR"];
	}
	$("#stt-self-identifier__title .title-text").attr("data-cr-title", dataCountryRoleTitle);
	if (!dataRoleLabel && clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"] && clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection]) {
		dataRoleLabel = clrResponse["countries"][finalCountrySelection]["languages"][finalLanguageSelection]["roles"][finalRoleSelection]["name"];
	}

	$("#stt-self-identifier__title .title-text").attr("data-role-label", dataRoleLabel);

}

function isEmpty(obj) {
	for (var prop in obj) {
		if (Object.prototype.hasOwnProperty.call(obj, prop)) {
			return false;
		}
	}

	return JSON.stringify(obj) === JSON.stringify({});
}

function populateDisclaimers(disclaimersResponse) {
	var allDisclaimerContents = '';
	var disclaimerText = '';
	var privacyPolicyURL = '';
	var termsAndCondURL = '';
	var investorsURL = '';
	var requiredKey = '';
	var searchKey = finalCountrySelection + "-" + finalLanguageSelection + "-" + finalRoleSelection;

	var disclaimerKeys = Object.keys(disclaimersResponse);
	$.each(disclaimerKeys, function (index) {
		if (disclaimerKeys[index].indexOf(searchKey) != -1) {
			requiredKey = disclaimerKeys[index];
		}
	});
	if (requiredKey) {
		allDisclaimerContents = disclaimersResponse[requiredKey];
		disclaimerText = allDisclaimerContents['clrDisclaimerText'];
		privacyPolicyURL = allDisclaimerContents['clrPrivacyURL'];
		termsAndCondURL = allDisclaimerContents['clrTermsURL'];
		investorsURL = allDisclaimerContents['investorsURL'];
	} else {
		allDisclaimerContents = disclaimersResponse['/content/dam/stt/content-fragment/disclaimers-for-clr/disclaimer-us-en-common/jcr:content/data/master'];
		disclaimerText = allDisclaimerContents['clrDisclaimerText'];
		privacyPolicyURL = allDisclaimerContents['clrPrivacyURL'];
		termsAndCondURL = allDisclaimerContents['clrTermsURL'];
		investorsURL = allDisclaimerContents['investorsURL'];
	}

	setDisclaimers(disclaimerText);
	isDomainRequest = $("#dynamic_domain").attr("data-dynamic-domain").indexOf("statestreet.com") != -1 ? true : false;
	if (isDomainRequest) {
		setPrivacyPoilcyURL(privacyPolicyURL.replace("/content/statestreet", ""));
		setTermsAndConditionsURL(termsAndCondURL.replace("/content/statestreet", ""));
		setInvestorsURL(investorsURL.replace("/content/statestreet", ""));
	}
	else {
		setPrivacyPoilcyURL(privacyPolicyURL + ".html");
		setTermsAndConditionsURL(termsAndCondURL + ".html");
		setInvestorsURL(investorsURL + ".html", 'us');
	}
}

$(document).ready(function () {
	if (getCookie("wcmmode") === 'edit') {
		//$('#clr_no_cookie_popup').hide();
	}
	if (getCookie("wcmmode") === 'preview') {
		if (!getCookie("stt-clr")) {
			//$('#clr_no_cookie_popup').css('display','flex');
		}
	}
});
$(document).ready(function () {
	$("#js-ssmp-clrCookieSettingsLabel").click(function (e) {
		if ($('body').hasClass('show-ot-banner')) {
			if ($(".ot-floating-button__open")) {
				$(".ot-floating-button__open").click();

			} else {
				OneTrust.ToggleInfoDisplay();
			}
		}

	});

});

$(document).ready(function () {
	$("#js-ssmp-clrButtonLabel").click(function (e) {
		if ($('body').hasClass('show-ot-banner')) {
			if ($("#onetrust-pc-sdk .onetrust-close-btn-handler")) {
				if (getCookie("OptanonConsent") && getCookie("OptanonAlertBoxClosed")) {
					$("#onetrust-pc-sdk .onetrust-close-btn-handler").click();
				} else {
					OneTrust.AllowAll();
				}
			} else {
				OneTrust.AllowAll();
			}
		}
	});
	$("#countries_button").click(function () {
		//xin defect 2482985 a)
		if( $("#countries_ul")[0].style.display != 'none' ){
			$("#countries_ul").hide();
			$("#clr_countries_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(0deg)");//add by xin
		}else{
			$("#countries_ul").show();
			$("#clr_countries_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(-180deg)");//add by xin
		}
	});
	$("#roles_button").click(function () {
		//xin defect 2482985 a)
		if( $("#clr_roles_ul .ssmp-form-select__select-optionlist")[0].style.display != 'none' ){
			$("#clr_roles_ul .ssmp-form-select__select-optionlist").hide();
			$("#clr_roles_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(0deg)");//add by xin
		}else {
			$("#clr_roles_ul .ssmp-form-select__select-optionlist").show();
			$("#clr_roles_ul .ssmp-form-select__select-activator .ssmpsvg").css("transform", "rotate(-180deg)");//add by xin
		}	
	});
	console.log("device type:" + detectDeviceType()); // "Mobile" or "Desktop"
	if (detectDeviceType() !== "Desktop") {
		showMobileCLR();
		$("#selfidentifier_popup").hide();
		$(".cmp-navigation__group").append('<li  class="cmp-navigation__item cmp-navigation__item--level-0" id="clr_mobile_entry" onclick="showCLRMobilePopup()">Change Location or Role' + '<svg class="ssmpsvg ssmpsvg-s caret-down" style="fill:undefined"><use xlink:href="#caret-down"></use></svg>' + '</li>');
		console.log("appended clr link in mobile");
	}
	$(".ssmp-header__hamburger-open").click(function () {
		$(".cmp-navigation").show();
		$(".ssmp-mobile-header__secondarylink-container").show();
		$("#selfidentifier_popup").hide();
	});
});
function showMobileCLR() {
	$("#clr_no_cookie_popup").show();
	var previouseCLRCookie = getCookie('stt-clr');
	var clrArray = previouseCLRCookie ? previouseCLRCookie.split(":") : undefined;
	if (clrArray) {
		prefCountry = clrArray[0];
		prefLang = clrArray[1];
		prefRole = clrArray[2];
	}
	if (!clrPopupPopulated) {
		displayCLRPopup();
	}
	console.log("shown  mobile clr");
}
function showCLRMobilePopup() {
	$("#selfidentifier_popup").show();
	$("#ssmp-self-identifier__close-button").hide();
	$(".cmp-navigation").hide();
	$(".ssmp-mobile-header__secondarylink-container").hide();
}
const detectDeviceType = () =>
	/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
		? 'Mobile'
		: 'Desktop';

/*eslint prefer-template: off*/

window["ssmp-js-core"] = (function(ssmp, $) {
    "use strict";

    var MODAL_PROCESSED_ATTRIBUTE = "ssmp-global-modal-processed";

    /**
     * Hide a modal on the page
     * @param {String} selector CSS Selector that targets the modal to hide
     */
    function hideModal(selector) {
        $(selector).filter("[data-" + MODAL_PROCESSED_ATTRIBUTE + "='true']")
            .fadeOut(ssmp.FADE_DURATION)
            .promise()
            .done(function() {
                $("body").removeClass("modal-open");
            });
    }

    /**
     * Show a particular modal
     * @param {String} selector CSS Selector that targets the modal to hide
     */
    function showModal(selector) {
        /*
         * Full page modals make AEM authoring difficult so they are
         * set to not show while in editing mode.  The CQ Object
         * should be undefined whenever we are in a published mode
         */
        if (typeof CQ !== "undefined") {
            console.warn("Modals are configured to not display in WCM Edit Mode");
            return;
        }

        var modalToUse = $(selector);

        // Bail if there is no modal to show
        if (!modalToUse.length) {
            console.warn("No such modal");
            return;
        }

        // Show the modal
        modalToUse.filter("[data-" + MODAL_PROCESSED_ATTRIBUTE + "='true']")
            .css("display", "flex") // Set default display to flex
            .hide() // Immediately hide in the same animation frame
            .fadeIn(ssmp.FADE_DURATION) // Fade up the modal
            .promise()
            .done(function() {
                // Prevent page under modal from scrolling
                $("body").addClass("modal-open");
            });
    }

    /*
     * Iterate over all elements marked as modal elements, which have not
     * been processed yet, and move them so that they are siblings of <body>.
     * If they are marked to be closable, give them a button that will close
     * them.  Finally, mark them as processed.
     */
    $(function() {
        // Move modals to body
        $(".ssmp-global-modal")
            .not("[data-ssmp-global-modal-processed='true']")
            .each(function() {
                var modal = $(this);
                if (modal.data("show-close-button")) {
                    modal
                        .find(".ssmp-global-modal__container")
                        .prepend($("<button></button>", {
                            type: "button",
                            "class": "ssmp-global-modal__close-button",
                            click:function(e) {
                                e.preventDefault();
                                modal
                                    .fadeOut(ssmp.FADE_DURATION)
                                    .promise()
                                    .done(function() {
                                        $("body").removeClass("modal-open");
                                    });
                            },
                            html:ssmp.icon.injectSvgElement("close","2x")
                        }));
                }
            })
            .appendTo($("body"))
            .attr("data-ssmp-global-modal-processed", true);
    });

    ssmp.modal = {
        showModal: showModal,
        hideModal: hideModal
    };

    return ssmp;
}(window["ssmp-js-core"] || {}, window.jQuery));

window["ssmp-link-popup"] = (function($, ssmpCore, ssmpParseWebAddress) {
    var linkPopups = [],
        defaultLang = "en",
        popupModalId = "#ssmp-link-popup-modal",
        leavesiteModalId = "#ssmp-leaving-site-modal",
        $popupModal = $(popupModalId),
        $leavesiteModal = $(leavesiteModalId);
    
    function getLinkPopupsData(){
        return $.ajax({
            method: "GET",
            url: "/bin/v1/" + ssmpCore.SITE + "/popupContent.json",
            dataType: "json"
        });
    } 
    function loadPopupsData(){
        var linkPopupDeferred = $.Deferred();

        ssmpCore.attachFallbackToFailure(getLinkPopupsData())
        .done(function(response) {
            linkPopupDeferred.resolve(response);
        })
        .fail(function(request, status, error) {
            linkPopupDeferred.reject(error);
            console.warn("Link Popups Data Failed:: " + error);
        });
        
        return linkPopupDeferred.promise();
    }

    function getPopupDataByLanguage(popups, language){
        var firstPopupLang = Object.keys(popups)[0],
            languageQueue = [language, "en", "en_gb", firstPopupLang],
            popupData = null;
        
        $.each(languageQueue, function(i, lang){
            popupData = popups[lang];
            return !popupData;
        });

        return popupData;
    } 

    function getLinkPopupData(currentPath, linkHref, linkPopups){
        var popupData = false;
        $.each(linkPopups, function(i, linkObj){
            var urls = linkObj.urls,
                isUrlMatched = false,
                allowedCLRP = linkObj.allowedCLRP,
                popups = linkObj.popups;
            if($.isPlainObject(currentPath)) {
                defaultLang = currentPath.language;
                currentPath = "/" + currentPath.location + "/" + currentPath.language + "/" 
                + currentPath.role + "/" + currentPath.product + "/";
            }
            if(!popups || Object.keys(popups).length <= 0 || urls.length <= 0 || allowedCLRP.length <= 0){
                return true;
            }
            $.each(urls, function(k, url){
                if(linkHref.indexOf(url) > -1){
                    isUrlMatched = true;
                    return false;
                }
            });
            if(!isUrlMatched) {
                return true;
            }
            $.each(allowedCLRP, function(j, allowedRegion){
                if(currentPath.indexOf(allowedRegion) > -1){
                    popupData = getPopupDataByLanguage(popups, defaultLang);
                    return false;
                }
            });
            return !popupData;
        });
        return popupData;
    }

    function getExternalPopupdata(currentPath, linkHref, linkPopups) {
        var popups = linkPopups.popups,
            externalPopupData = false;
        if(!popups || Object.keys(popups).length <= 0) {
            return false;
        }
        if($.isPlainObject(currentPath)) {
            defaultLang = currentPath.language;
        }
        if(!ssmpParseWebAddress.parseWebAddress(linkHref).protocol 
            || !ssmpParseWebAddress.parseWebAddress(linkHref).host 
            || (ssmpParseWebAddress.parseWebAddress(linkHref).host == 
            ssmpParseWebAddress.parseWebAddress(window.location.href).host)) {
            return false;
        }else {
            externalPopupData = getPopupDataByLanguage(popups, defaultLang);
        }
        return externalPopupData;
    }
    //Fix the issue caused by AA launch js that would open some doc directly if no target="_blank"
    function checkLinkTarget($link){
        if($link.data("target-checked") !== "true"){
            var target = $link.attr("target");
            $link.attr({"data-target": target, "target": "_blank"}).data("target-checked", "true"); 
        }
    }

    function checkLinkPopup($link, currentPath, linkPopups){
        var linkHref = $link.attr("href"),
            popupData = null,
            externalPopupData = null,
            isNeedleave = true,
            isInvalidHref = /^\s*#?\s*$/.test(linkHref);

        $link.data("popup-checked", "true");
        if(!linkHref || isInvalidHref || !linkPopups || linkPopups.length <= 0){
            return false;
        }
        popupData = getLinkPopupData(currentPath, linkHref, linkPopups);
        externalPopupData = getExternalPopupdata(currentPath, linkHref, linkPopups);
        if(popupData){
            $link.data({
                "popup-title": popupData.title,
                "popup-content": popupData.disclaimerText,
                "popup-accept": popupData.acceptLabel,
                "popup-close": popupData.closeLabel
            });
            $link.attr("data-disclaimer","true");
            checkLinkTarget($link);
        }
        if(externalPopupData) {
            if(linkPopups.urls) {
                $.each(linkPopups.urls, function(k, url){
                    if(linkHref.indexOf(url) > -1){
                        isNeedleave = false;
                        return false;
                    }
                }); 
            }
            if(isNeedleave) {
                $link.data({
                    "popup-title": externalPopupData.title,
                    "popup-content": externalPopupData.disclaimerText,
                    "popup-accept": externalPopupData.acceptLabel,
                    "popup-close": externalPopupData.closeLabel,
                    "external-link" : true
                });
                $link.attr("data-disclaimer","true");
            }
            $link.attr("target", "_blank");
        }
    }

    function showLinkPopup($link, $modal, modalId, isExternal){
        $modal.find(".popup-title").html($link.data("popup-title"));
        $modal.find(".popup-content").html($link.data("popup-content"));
        if(!isExternal) {
            $modal.find(".ssmp-accept-disclaimer").html($link.data("popup-accept")).attr({
                "href": $link.attr("href"),
                "target": $link.attr("data-target")
            });
        }else {
            $modal.find(".ssmp-accept-disclaimer").html($link.data("popup-accept")).attr({
                "href": $link.attr("href"),
                "target": "_blank"
            });
        }
        $modal.find(".ssmp-decline-disclaimer").html($link.data("popup-close"));
        ssmpCore.modal.showModal(modalId);
    }

    function initLinkPopup(){
        $popupModal.find(".ssmp-decline-disclaimer").on("click", function (e) {
            e.preventDefault();
            ssmpCore.modal.hideModal(popupModalId);
        });
        $popupModal.find(".ssmp-accept-disclaimer").on("click", function () {
            ssmpCore.modal.hideModal(popupModalId);
        });
        $leavesiteModal.find(".ssmp-decline-disclaimer").on("click", function (e) {
            e.preventDefault();
            ssmpCore.modal.hideModal(leavesiteModalId);
        });
        $leavesiteModal.find(".ssmp-accept-disclaimer").on("click", function () {
            ssmpCore.modal.hideModal(leavesiteModalId);
        });
    }

    function loadLinkPopup(result, currentPath) {
        var externalLinks = result.externalLinks;
        linkPopups = result.links;
        if(!linkPopups || linkPopups.length <= 0){
            return false;
        }
        initLinkPopup();
        $(".ssmp-page a").each(function(){
            checkLinkPopup($(this), currentPath, linkPopups);
            checkLinkPopup($(this), currentPath, externalLinks);
        });

        $(".ssmp-mobile-header__pages a").each(function(){
            checkLinkPopup($(this), currentPath, linkPopups);
            checkLinkPopup($(this), currentPath, externalLinks);
        });
        function linkEvent($this, e) {
            if($this.data("popup-checked") !== "true"){
                checkLinkPopup($this, currentPath, linkPopups);
                checkLinkPopup($this, currentPath, externalLinks);
            }
            if($this.data("popup-content")){
                e.preventDefault();
                if($this.data("external-link")) {
                    showLinkPopup($this, $leavesiteModal, leavesiteModalId, true);
                }else {
                    showLinkPopup($this, $popupModal, popupModalId);
                }
            }
        }
        //link tile click trigger
        $(".ssmp-page .linktile-item a").click(function(e){
            linkEvent($(this), e);
        })
        $(document).on("click touch", ".ssmp-page a, .ssmp-mobile-header__pages a, .ssmp-mobile-header__actions a", function(e){
            linkEvent($(this), e);
        });
    }

    return {
        loadPopupsData: loadPopupsData,
        loadLinkPopup: loadLinkPopup
    }
}(window.jQuery, window["ssmp-js-core"], window["ssmp-js-parse-web-address"]));

(function (win, $) {
    "use strict";

    $(document).ready(function () {
        if($(".link-tile .linkarea").length <= 0) {
            return false;
        }
        //check link area if has linktile link
        $(".link-tile .linkarea").each(function(){
            if($(this).find('.linktile-item a,.linktile-item button').length > 0) {
                $(this).addClass("linkhover");
                $(this).closest(".link-tile").find(".link-img").addClass("linkhover");
                $(this).find('.linktile-item a,.linktile-item button').on('click', function(e){
                    e.stopPropagation();
                });
                $(this).on('click', function() {
                    $(this).find('.linktile-item a,.linktile-item button')[0].click();
                });
            }else if($(this).is("a")){
                $(this).addClass("linkhover");
            }else {
                $(this).removeClass("linkhover");
            }
            
        });
        $(".link-tile .linkarea,.link-img").each(function(){
            $(this).on("mouseenter", function(){
                $(this).closest(".link-tile").find(".linkarea").addClass('hover');
            });
            $(this).on("mouseleave", function(){
                $(this).closest(".link-tile").find(".linkarea").removeClass('hover');
            })
        });
    })

}(window, window.jQuery));
/* eslint no-console: off*/

(function(win, $, ssmp) {
    "use strict";

    /**
     * Collapse expanded accordion items that are children of given accordion
     * @param {jQuery} accordion Accordion jQ object
     * @param {jQuery} exclude Accordion item to exclude from collapsing
     */
    function collapseOthers(accordion, exclude) {
        var expandedAccordionItems = accordion
            .find(".ssmp-accordion__item.ssmp-accordion--expanded")
            .not(exclude);

        var expandedAccordionItemsBody = expandedAccordionItems
            .find(".ssmp-accordion__body");

        expandedAccordionItemsBody.slideToggle();
        expandedAccordionItems.toggleClass("ssmp-accordion--expanded");
    }

    /**
     * Function to set the accordion event for AA
     * @param {string} text The text of the accordion item
     * @param {string} status The status of the accordion item "Expand/Collapse"
     * @param {string} position The position of the accordion item
     */
    function setAccordionEventForAA(text, status, position) {
        window.digitalData.event.push({
            eventInfo: {
                linkType: "Accordion " + status,
                eventAction: status,
                eventName: "Accordion " + status
            },
            attributes: {
                linkName: $.trim(text),
                linkPosition: position,
                linkUrl: "no value"
            }
        });
    }

    function toggleAccordion() {
        var $this = $(this);
        var accordion = $this.closest(".ssmp-accordion");
        var accordionItem = $this.closest(".ssmp-accordion__item");
        var accordionBody = $this.siblings(".ssmp-accordion__body");
        var accordionText = $this.find(".ssmp-accordion__summary-text").text();
        var linkPosition = ssmp.getLinkPositionForAA($this);

        // Only apply in mobile
        if (win.matchMedia("(max-width: 600px)").matches) {
            collapseOthers(accordion, accordionItem);
        }

        accordionBody.slideToggle();
        accordionItem.toggleClass("ssmp-accordion--expanded");

        //Start track accordion for AA
        ssmp.isDigitalData();
        
        if(accordionItem.hasClass("ssmp-accordion--expanded")) {
            setAccordionEventForAA(accordionText, "Expand", linkPosition);
            $(this).attr("aa-global-ctacollapse", "");
            $(this).removeAttr("aa-global-ctaexpand");
        }else {
            setAccordionEventForAA(accordionText, "Collapse", linkPosition);
            $(this).attr("aa-global-ctaexpand", "");
            $(this).removeAttr("aa-global-ctacollapse");
        }
        //End track accordion for AA
    }

    $(function() {
        // Delegate so that dynamically created accordions will work
        $(document)
            .on("click", ".ssmp-accordion .ssmp-accordion__summary", toggleAccordion);
    });
}(window, window.jQuery, window["ssmp-js-core"]));

(function($) {
    var DEFAULT_ITEMS_AT_A_TIME = 10;

    function reveal() {
        var $this = $(this);
        var $article = $this.closest(".ssmp-listitem--articles");
        var itemsAtATime = parseInt($article.attr("data-ssmp-article-items-at-a-time"), 10) || DEFAULT_ITEMS_AT_A_TIME;

        $article.find(".ssmp-listitem__item.ssmp-listitem--hidden")
            .slice(0, itemsAtATime)
            .removeClass("ssmp-listitem--hidden");

        var remainingHiddenArticles = $this.closest(".ssmp-listitem--articles:has(.ssmp-listitem__item.ssmp-listitem--hidden)");

        if (!remainingHiddenArticles.length) {
            $this.closest(".ssmp-listitem--articles__load-more-button").hide();
        }
    }

    $(function() {
        $(".ssmp-listitem--articles:has(.ssmp-listitem__item.ssmp-listitem--hidden)")
            .find(".ssmp-listitem--articles__load-more-button")
            .show();

        $(".ssmp-listitem--articles")
            .on("click", ".ssmp-listitem--articles__load-more-button .ssmp-ctalink--button .ssmp-ctalink .ssmp-ctalink__link", reveal);

        $(".ssmp-listitem--articles .ssmp-listitem--articles__load-more-button .ssmp-ctalink--button .ssmp-ctalink .ssmp-ctalink__link").each(reveal);
    });
}(window.jQuery));

window["ssmp-js-chart"] = (function(win, $, Highcharts, ssmpChart, ssmp, chartStyles) {
    "use strict";

    /** All variables can be defined by yourself in your local js
        e.g. First, create a chart.js.
            window["ssmp-js-chart-styles"] = (function() {
                "use strict";
                var styles = {
                    color: '#F00',
                    fontSize: '',
                    ...
                }
                return styles;
            }());
        Then, import chart.js before the chart.js of statestreet-common
     */

    function setStyle() {
        var defaultStyles = {
            color: "#273F33",
            fontSize: "14px",
            lineHeight: "18px",
            titleFontSize: "18px",
            titleLineHeight: "24px",
            defaultColorSeries: ["#273F33", "#00F1AF", "#2121ED", "#C9C05D", "#007D6C", "#26DFFF", "#959DFF"],
            areaColors: ["#475D52", "#26DFFF", "#E6FF00", "#A5ACFF", "#00F1AF", "#4949F0", "#FF7C56"],
            areaGoldColors: ["#C3B94B", "#475D52", "#E6FF00", "#A5ACFF", "#00F1AF", "#4949F0", "#FF7C56"],
            lineColors: ["#273F33", "#00F1AF", "#2121ED", "#CCC366", "#26DFFF", "#FFA000", "#337AA3"],
            pieColors: ["#273F33", "#26DFFF", "#E6FF00", "#A5ACFF", "#00F1AF", "#4949F0", "#FF7C56", "#007D6C",
                "#C3B94B", "#337AA3", "#8F384A", "#C6FAE0", "#FFA100", "#B9F0FF", "#EFC2B9", "#FFE800"],
            goldColors: ["#C3B94B", "#273F33", "#00F1AF"],
            treemapMinColor: "#B9F0FF",
            treemapMaxColor: "#00D9FF"
        }
        
        $.extend(defaultStyles, chartStyles);

        return defaultStyles;
    }
    
    function loadGeneralChart($ele){
        try {
            var dataStr = $ele.find(".chart-data-soruce").val(),
            theme = $ele.find(".chart-data-soruce").attr("data-theme"),
            $chartContainer = $ele.find(".chart"),
            chartId = "chart" + $ele.attr("data-index"),
            data = JSON.parse(dataStr);
            if(data){
                $ele.addClass("loaded");
                $chartContainer.attr("id", chartId);

                createGeneralChart($chartContainer, data, theme);
            }
        } catch (e) {
            console.warn("The chart data is not well-formatted: ", e.message);
        }
    }

    function reflowGeneralChart($ele){
        var currChart = $ele.find(".chart").highcharts();
        if(currChart){
            currChart.reflow();
        }
    }

    function observerCallback(entries){
        entries.forEach(function(entry){
            if(entry.isIntersecting){
                var $chartEle = $(entry.target);
                if($chartEle.hasClass("loaded")){
                    reflowGeneralChart($chartEle);
                }else {
                    loadGeneralChart($chartEle);
                }
            }
        });
    }

    function createGeneralCharts($containers){
        ssmp.loadChartLibrary().then(function(){
            Highcharts = window.Highcharts;

            var chartObserver;
            if(typeof IntersectionObserver === "function" && typeof CQ === "undefined"){
                //Lazy Load charts
                chartObserver = new IntersectionObserver(observerCallback);
            }

            $containers.each(function(index){
                var $chart = $(this);
                if($chart.hasClass("loaded")) {
                    return true;
                }
                $chart.attr("data-index", index);
                if(chartObserver){
                    chartObserver.observe(this);
                }else {
                    loadGeneralChart($chart);
                }
            });
        });
    }  

    function createGeneralChart($container, data, theme){
        var bodyFontFamily = $("body").css("font-family"),
            fontFamily = bodyFontFamily || "FoundersGrotesk",
            fontSemiBold = "600",
            fontRegular = "400",
            styles = setStyle();

        var options = {
            chart: {
                renderTo: $container.attr("id"),
                spacing: [10, 10, 5, 10],
                height: 450,
                style: {
                    fontFamily: fontFamily,
                    fontSize: styles.fontSize,
                    fontWeight: fontRegular,
                    lineHeight: styles.lineHeight,
                    color: styles.color
                }
            },
            colors: styles.defaultColorSeries,
            title: {
                text: data.title,
                align: "left",
                style: {
                    fontSize: styles.titleFontSize,
                    fontWeight: fontSemiBold,
                    lineHeight: styles.titleLineHeight,
                    color: styles.color
                },
				margin: 18,
				x: -10
            },
            subtitle: {
                text: data.subtitle,
                align: "left",
                style: {
                    fontSize: styles.titleFontSize,
                    lineHeight: styles.titleLineHeight,
					color: styles.color,
					transform: "translateY(-4px)"
				},
				x: -10
            },
            exporting: {
                enabled: false
            },
            credits: {
                enabled: false
            },
            legend: {
                itemStyle: {
                    fontSize: styles.fontSize,
                    fontWeight: fontRegular,
                    lineHeight: styles.lineHeight,
                    color: styles.color
                },
                align: "left",
                symbolRadius: 0,
                squareSymbol: false,
                itemMarginTop: 8,
                itemDistance: 30,
                symbolPadding: 7,
                padding: 0,
                margin: 10,
				x: -10
            },
            tooltip: {
                headerFormat: "<span style='font-weight: " + fontSemiBold + ";'>{point.key}</span><br/>",
                style: {
                    fontSize: styles.fontSize,
                    fontWeight: fontRegular,
                    lineHeight: styles.lineHeight,
                    color: styles.color
                },
                padding: 10
            },
            plotOptions: {
                series: {
                    dataLabels: {
                        states: {
                            hover: {
                                radius: 6,
                                lineWidth: 1,
                                lineColor: "#fff"
                            }
                        }
                    }
                },
                scatter: {
                    marker: {
                        radius: 5
                    }
                },
                pie: {
                    dataLabels: {
                        enabled: false
                    },
                    showInLegend: true,
                    borderWidth: 0,
                    tooltip: {
                        followPointer: false
                    }
                },
                line: {
                    marker: {
                        enabled: false
                    }
                },
                area: {
                    marker: {
                        enabled: false
                    },
                    fillOpacity: 1
                },
                column: {
                    minPointLength: 3
                },
                bar: {
                    groupPadding: 0.1
                },
                treemap: {
                    layoutAlgorithm: 'squarified',
                    dataLabels: {
                        style: {
                            textOutline: '0 none',
                            fontSize: styles.fontSize,
                            fontWeight: fontRegular,
                            lineHeight: styles.lineHeight,
                            color: styles.color,
                            textOverflow: "ellipsis"
                        }
                    },
                    borderWidth: 3,
                    borderColor: "#fff",
                    states: {
                        hover: {
                            borderColor: "#fff",
                            brightness: 0.05
                        }
                    }
                }
            },
            series: [],
            xAxis: {
                categories: data.categories,
                tickLength: 2,
                tickPosition: "inside",
                lineWidth: 1,
                lineColor: styles.color,
                tickColor: styles.color,
                tickWidth: 1,
                labels: {
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
                    },
                    autoRotation: [-90]
                },
                title: {
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
                    },
                    align: "low",
                    x: 7,
					text: data.xAxisLabel,
					margin: 14
                },
                tickmarkPlacement: "on"
            },
            yAxis: [{
                title: {
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
					},
					margin: 14
                },
                labels: {
                    overflow: "allow",
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
                    },
                    x: -7,
                    autoRotation: [-90]
                },
                gridLineWidth:0,
                lineWidth: 1,
                lineColor: styles.color,
                tickColor: styles.color,
                tickWidth: 1,
                tickLength: 2,
                tickPixelInterval: 45,
                tickPosition: "inside",
				reversedStacks: false
            }, {
                title: {
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
                    },
					margin: 14
                },
                labels: {
                    overflow: "allow",
                    style: {
                        fontSize: styles.fontSize,
                        fontWeight: fontSemiBold,
                        lineHeight: styles.lineHeight,
                        color: styles.color
                    },
                    x: 7,
                    autoRotation: [-90]
                },
                opposite: true,
                gridLineWidth:0,
                lineWidth: 1,
                lineColor: styles.color,
                tickColor: styles.color,
                tickWidth: 1,
                tickLength: 2,
                tickPosition: "inside",
                tickPixelInterval: 45,
                visible: false,
                reversedStacks: false
            }]
        };
        
        var chartTypes = [], ifDrawCharts = true;
        
        $.each(data.dimensions, function(index, dimension){
            var valuePrefix = "",
                valueSuffix = "";
            
            switch(dimension.unit){
                case "%":
                    valueSuffix = dimension.unit;
                    break;
                case "$":
                    valuePrefix = dimension.unit;
                    break;
                default:
                    valuePrefix = dimension.unit;
                    break;
            }
            
            $.map(dimension.typeSeries, function(val){
                ifDrawCharts = isDrawCharts(val);
                if(ifDrawCharts) {
                    var convertedData = [];
                    val.yAxis = index;
                    if(val.type === "line" || val.type === "scatter"){
                        val.zIndex = 1;
                        options.colors = styles.lineColors;
                    } else if(val.type === "pie"){
                        $.each(val.data, function(a, value){
                            convertedData.push([data.categories[a], value]);
                        });
                        val.data = convertedData;
                        options.tooltip.headerFormat = "";

                        $.extend(options.legend, {
                            layout: "vertical",
                            verticalAlign: "middle",
                            useHTML: true,
                            labelFormatter: function(){
                                var value = this.y;
                                value = formatNumber(value, data.numFormat);
                                return this.name + "<span style='font-weight: 600;margin-left:5px;'>" + valuePrefix + value + valueSuffix + "</span>";
                            }
                        });

                        options.responsive = {
                            rules:[{
                                condition: {
                                    maxWidth: 600
                                },
                                chartOptions: {
                                    chart: {
                                        height: 550,
                                    },
                                    legend: {
                                        align: "center",
                                        verticalAlign: "bottom"
                                    }
                                }
                            }]
                        };
                        options.colors = styles.pieColors;
                    } else if(val.type === "treemap"){
                        convertedData = [];
                        $.each(val.data, function(i, value){
                            convertedData.push({
                                name: data.categories[i],
                                value: value,
                                index: i,
                                colorValue: i + 1
                            });
                        });
                        val.data = convertedData;
                        options.tooltip.headerFormat = "";
                        options.chart.spacing = [10, 0, 5, 0];
                        options.title.x = 0;
                        options.subtitle.x = 0;
                        options.legend = {
                            enabled: false
                        };
                        options.colorAxis = {
                            minColor: styles.treemapMaxColor,
                            maxColor: styles.treemapMinColor,
                            showInLegend: false
                        };
                    } else if(val.type === "bar"){
                        options.yAxis[0].title.align = "low";
                        options.yAxis[0].title.x = 0;
                        options.yAxis[0].title.offset = undefined;
                        options.yAxis[0].title.margin = 14;
                        options.yAxis[1].title.align = "low";
                        options.yAxis[1].title.x = 0;
                        options.yAxis[1].title.offset = undefined;
                        options.yAxis[1].title.textAlign = "left";
                        options.yAxis[1].title.margin = 14;
                        options.xAxis.title.align = "middle";
                        options.xAxis.title.margin = 20;
                    } else if(val.type === "area") {
                        options.colors = styles.areaColors;
                    }

                    themeColors(theme, options, styles, val);
                    
                    val.tooltip = {
                        pointFormatter: function(){
                            var value = this.y || this.value,
                                name = this.series.name;

                            value = formatNumber(value, data.numFormat);
                            if(val.type === "pie" || val.type === "treemap"){
                                name = this.name;
                            }
                            return name + ": <span style='font-weight: 600;'>" + valuePrefix + value + valueSuffix + "</span><br/>"
                        }
                    }
                    chartTypes.push(val.type);
                    return val;  
                }
            });
            $.merge(options.series, dimension.typeSeries);
            
            options.yAxis[index].title.text = dimension.label;
            options.yAxis[index].labels.formatter = function(){
                var value = this.value;
                value = formatNumber(value, data.numFormat);
                return valuePrefix + value + valueSuffix;
            };

            if(index === 1){
                options.yAxis[index].visible = true;
            }
        });
        
        if(chartTypes.indexOf("column") > -1 || chartTypes.indexOf("bar") > -1){
            options.xAxis.tickLength = 0;

            if(data.dimensions.length === 1) {
                options.yAxis[0].plotLines = [{
                    value: 0,
                    color: styles.color,
                    width: 1,
                    zIndex: 1
                }];
            }
            
        }

        if(ifDrawCharts) {
            new Highcharts.Chart(options);
        }else {
            window.console("Upload document data format error");
        }
        
    }

    function isDrawCharts(val) {
        var ifDrawCharts = true;
        $.each(val.data, function(i, value){
            if(typeof value !== 'number' && isNaN(value)) {
                ifDrawCharts = false;
                console.error("Upload document data format error");
            }
        });
        return ifDrawCharts;
    }

    function themeColors(theme, options, styles, val) {
        if(theme == "gold") {
            options.colors = styles.goldColors;
            if(val.type === "area") {
                options.colors = styles.areaGoldColors;
            }
        }
    }

    function formatNumber(value, formatType){
        if(formatType === "europeFormat") {
            value = Highcharts.numberFormat(value, -1, ",", " ");
        }else {
            value = Highcharts.numberFormat(value, -1, ".", ",");
        }
        return value;
    }

    $(function(){
        var $chartHolder = $(".general-chart-holder");
        if($chartHolder.length <= 0) {
            return false;
        }

        createGeneralCharts($(".general-chart-holder"));
    });

    ssmpChart.createGeneralCharts = createGeneralCharts;
    return ssmpChart;

}(window, window.jQuery, window.Highcharts, window["ssmp-js-chart"] || {}, window["ssmp-js-core"], window["ssmp-js-chart-styles"]));
window["ssmp-lazy-load"] =(function ($) {
    function lazyLoadForImages(){
        var lazyImages = $("img.lazy").not("[src],[src='']").filter("[data-srcset]"); 

        if(lazyImages.length > 0 && typeof IntersectionObserver === "function" && typeof CQ === "undefined"){
            var options = {
                rootMargin: "500px 0px"
            }
            var lazyImageObserver = new IntersectionObserver(function (entries,observer) {
                $.each(entries,function (index,entry) {
                    if (entry.isIntersecting) {
                        var lazyImage = entry.target;
                        lazyImage.src = lazyImage.dataset.srcset;
                        lazyImage.classList.remove("lazy");
                        observer.unobserve(lazyImage);
                    }
                })
            }, options);
            
            $.each(lazyImages,function(index,image){
                lazyImageObserver.observe(image);
            })
        }else{
            $.each(lazyImages,function(index,lazyImage){
                lazyImage.src = lazyImage.dataset.srcset;
                lazyImage.classList.remove("lazy");
            })
        }
    }

    $(function(){
        lazyLoadForImages();
    });

    return {
        lazyLoadForImages: lazyLoadForImages
    }
}(window.jQuery));
(function (win, $, gsap, ssmp, document) {
    "use strict";
    
    function injectAnimationSVG($ele){
        $.get($ele.data("path"),function(svgDoc){
            var importedSVGRootElement= document.importNode(svgDoc.documentElement,true);
            $ele.append(importedSVGRootElement);

            if(typeof IntersectionObserver === "function" && typeof CQ === "undefined"){
                bindPlayObserber($ele);
            }else{ //IE
                var svgLocation =$ele.find("svg")[0].getBoundingClientRect();
                var svgViewBox = $ele.find("svg")[0].getAttribute("viewBox").split(" ");
                $ele.find("svg")[0].setAttribute("width", parseInt(svgLocation.width));
                $ele.find("svg")[0].setAttribute("height", parseInt(svgLocation.width) * svgViewBox[3] / svgViewBox[2]);
                var svgID = $ele.find("svg").attr("id");
                var timeline = svgID + "Tl";
                if (new_eval(timeline)) {
                    new_eval(timeline).play();
                }
            }
        });
    }

    function bindPlayObserber($ele){
        var animationPlayObserver;
        var options = {
            threshold : [0.5]
        }
        animationPlayObserver = new IntersectionObserver(function (entries,observe) {
            entries.forEach(function(entry){
                var $animEle = $(entry.target);
                if (entry.isIntersecting && $animEle.find("svg").length > 0) {
                    var svgID = $animEle.find("svg").attr("id");
                    var timeline = svgID + "Tl";
                    if (new_eval(timeline)) {
                        new_eval(timeline).play();
                        observe.unobserve($animEle[0]);
                    }
                }
            });
        }, options);
        animationPlayObserver.observe($ele[0]);
    }

    function new_eval(fn){
        var Fn= Function;
        return new Fn('return ' + fn)();
    }

    $(document).ready(function () {
        if ($('.animation-container').length <= 0) {
            return false;
        }
        ssmp.loadAnimationLibrary().then(function(){
            var animationLoadObserver;
            if(typeof IntersectionObserver === "function" && typeof CQ === "undefined"){
                //Lazy Load animations
                var options = {
                    rootMargin: "500px 0px"
                }
                animationLoadObserver = new IntersectionObserver(function (entries,observe) {
                    entries.forEach(function(entry){
                        var $animEle = $(entry.target);
                        if(entry.isIntersecting){
                            injectAnimationSVG($animEle);
                            observe.unobserve($animEle[0]);
                        }
                    });
                }, options);
            }

            $('.animation-container').each(function(){
                var $anim = $(this);
                if(animationLoadObserver){
                    animationLoadObserver.observe(this);
                }else{
                    injectAnimationSVG($anim);
                }
            });
        });
    });
}(window, window.jQuery, window.Gsap, window["ssmp-js-core"], document));
(function($) {
    "use strict";

    $(".ssmp-richtext a").each(function(){
        if($(this).attr("href") == ""){
            $(this).removeAttr("href");
			$(this).removeAttr("target");
            var html = $(this).prop("outerHTML");
            html = html.replace(/^<a/,"<span");
            html = html.replace(/\/a>$/,"/span>");
            $(this).replaceWith(html);
        }        
    });

}(window.jQuery));
$(function () {
    if ($(".ssmp-enhanced-hero").length > 0) {
        var hero = $(".ssmp-enhanced-hero");
        hero.each(function () {
            var media = $(this).find(".ssmp-enhanced-hero__multimedia");
            var titleMobile = $(this).find(".ssmp-enhanced-hero__title").clone(true).removeClass("ssmp-enhanced-hero__title-pc").addClass("ssmp-enhanced-hero__title-mobile");
            media.prepend(titleMobile);
        });
    }
});
(function ($, ssmpCore) {
    "use strict";

    function defaultInfo(ele) {
        var windowUrl = decodeURIComponent(window.location.href),
            pageUrl = '',
            shareContainer = $(ele).closest('.ssmp-sharemedia'),
            sharevid = shareContainer.data("id"),
            shareTitle = shareContainer.data("title"),
            shareDescription = shareContainer.data("description"),
            shareImage = shareContainer.data("image-path"),
            defaultEmail = shareContainer.data("add-default-email"),
            newPath = windowUrl.split('#')[0];
        
        if (!!sharevid) {
            pageUrl = newPath + '#' + sharevid;
        }else {
            pageUrl = newPath;
        }

        return {
            pageUrl: pageUrl,
            shareTitle: shareTitle || $(document).attr("title"),
            shareDescription: shareDescription,
            shareImage: shareImage,
            defaultEmail: defaultEmail
        }
    }

    function redirectTo(el, path, text) {
        var getShare = defaultInfo(el),
            imagePath = getShare.shareImage,
            href = '',
            pathUrl = '',
            pathTitle = '',
            pathDescription = '',
            pathImgUrl = '',
            titleParam = '';
        if (imagePath) {
            imagePath.replace('/content/dam/' + ssmpCore.SITE, '');
        }
        if(!text) {
            titleParam = '&title=';
        }else {
            titleParam = 'text='
        }
        pathTitle = titleParam + encodeURIComponent(getShare.shareTitle);
        pathUrl = '&url=' + encodeURIComponent(getShare.pageUrl);
        pathDescription = "&description=" + encodeURIComponent(getShare.shareDescription);
        pathImgUrl = "&imageurl=" + encodeURIComponent(imagePath);
        
        href = path + pathTitle + pathUrl + pathDescription + pathImgUrl;
        window.open(href, "_blank", 
            "toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=800, height=600");
    }

    function printHandler() {
        window.print();
        return false;
    }

    $(function () {
        $(document).on("click", ".ssmp-share__linkedin", function () {
            redirectTo(this, 'http://www.linkedin.com/shareArticle?mini=true');
        });

        $(document).on("click", ".ssmp-share__twitter", function () {
            redirectTo(this, 'http://www.twitter.com/share?', true);
        });

        $(document).on("click", ".ssmp-share__email", function () {
            var getShare = defaultInfo(this),
                emailTitle = getShare.shareTitle,
                emailContent = getShare.pageUrl,
                shareHref = '';
            if(getShare.defaultEmail) {
                emailTitle = ' ';
            }else {
                emailTitle = !emailTitle ? $(document).attr("title") : emailTitle;
                if(!getShare.shareDescription) {
                    getShare.shareDescription = $("meta[name='description']").attr('content');
                }
                emailContent = !getShare.shareDescription ? 
                encodeURIComponent(emailContent) : encodeURIComponent(getShare.shareDescription + ":  " + emailContent);
            }
            shareHref = "mailto:?subject=" + emailTitle + "&body=" + emailContent;
            $(this).attr("href", shareHref);
        });

        $(document).on("click", ".ssmp-share__print .ssmp-share__icon", printHandler);
    })
}(window.jQuery, window["ssmp-js-core"]));

(function (win, $, ssmp) {
    "use strict";
    $(document).ready(function () {
        $(document).on("click", ".tab-component .tab-nav-link", function (e) {
            e.preventDefault();
            if (!$(this).hasClass("active")) {
                var $tabComp = $(this).closest(".tab-component"),
                    $tabItem = $(this).closest(".tab-nav-item"),
                    index = $tabItem.index();

                $tabComp.children(".tab-content").children(".tab-panel").removeClass("active").eq(index).addClass("active");
                $tabComp.find(".tab-nav").eq(0).find(".tab-nav-link").removeClass("active");
                $(this).addClass("active");

                //Update status of the tab nav items and scroll the target element into view
                if ("scrollBehavior" in document.documentElement.style) {
                    $(this)[0].scrollIntoView({ block: "nearest", inline: "nearest" });
                } else {
                    $(this)[0].scrollIntoViewIfNeeded(false);
                }

                // set "event-info" flag for AA not to track general clicks event as it has own click event
                $(this).attr("event-info", true);
                //track tab click event for AA
                ssmp.isDigitalData();
                window.digitalData.event.push({
                    eventInfo: {
                        linkType: "tab selection",
                        eventName: "Tab"
                    },
                    attributes: {
                        linkName: $.trim($(this).text()),
                        linkPosition: ssmp.getLinkPositionForAA($(this)),
                        linkUrl: "no value"
                    }
                });
            }
        })
        
        var navLists = $(".tab-component .tab-nav");
        var scrollEvent = debounce(function (nav) {
            setScrollFlag(nav);
        });
        var resizeEvent = debounce(function () {
            $.each(navLists, function (i, nav) {
                setScrollFlag(nav);
            });
        });
        $.each(navLists, function (i, nav) {
            setScrollFlag(nav);
            $(nav).scroll(function () {
                scrollEvent(nav);
                if (/Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    $(nav).removeClass("hide-scrollbar");
                }
            });
        })

        $(window).resize(resizeEvent)

        triggerTabActive(window.location.hash);
        window.onhashchange = function(){
            var hash = location.hash;
            triggerTabActive(hash);
            if($(hash)[0]){
                $(hash)[0].scrollIntoView();
            }
        };
    })

    //when url has anchor, trigger the tab click
    function triggerTabActive(activeHash) {
        if($(".tab-component").length > 0) {
            $(activeHash).siblings('.tab-nav-link').click();
        }

    }

    function setScrollFlag(nav) {
        var scrollShadow = $(nav).closest(".scroll-shadow"),
            offsetWidth = nav.offsetWidth,
            scrollWidth = nav.scrollWidth,
            scrollLeft = nav.scrollLeft;
        if (!scrollShadow) {
            return false;
        }
        if (scrollWidth > offsetWidth) {
            if (scrollLeft > 0) {
                scrollShadow.addClass("scroll-shadow__left");
            } else {
                scrollShadow.removeClass("scroll-shadow__left");
            }

            if (scrollLeft + offsetWidth < scrollWidth) {
                scrollShadow.addClass("scroll-shadow__right");
            } else {
                scrollShadow.removeClass("scroll-shadow__right");
            }
        } else {
            scrollShadow.removeClass("scroll-shadow__left");
            scrollShadow.removeClass("scroll-shadow__right");
        }
        if (/Android|webOS|iPhone|iPad|Mac|Macintosh|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            $(nav).addClass("hide-scrollbar");
        }
    }

    function debounce(fn) {
        var timer = null;
        return function () {
            var self = this, args = arguments;
            if (timer) {
                clearTimeout(timer);
                timer = null;
            }
            timer = setTimeout(function () {
                fn.apply(self, args);
            }, 300)
        }
    }
}(window, window.jQuery, window["ssmp-js-core"]));
(function($) {
    "use strict";

    function clearTooltipPanel (){
        $("#ssmp-tooltip-modal .content-container").html("");
        $("#ssmp-tooltip-modal").hide().removeAttr("style");
    }
    var tooltipObj = $("#ssmp-tooltip-modal"),
        tooltipContentObj = tooltipObj.find(".content-container");
    $(document).on("mouseenter touchend", ".info", function(){
        var _self = $(this);
        if(_self.find(".tooltip").length > 0){
            var iconX = _self.find(".icon_info").offset().left,
                iconY = _self.find(".icon_info").offset().top,
                pageWidth = $(window).width();
            if(iconX + tooltipObj.outerWidth(true) > pageWidth) {
                iconX = pageWidth - tooltipObj.outerWidth(true) - 16;
            }
            tooltipContentObj.html(_self.find(".tooltip").html());
            tooltipObj.css("left", iconX)
                .css("top", iconY)
                .show();
        }
    });
    $("#ssmp-tooltip-modal").on("mouseleave", function(){
        clearTooltipPanel();
    })
    $(document).on("touchend", function(e){
        if(!$(e.target).is($("#ssmp-tooltip-modal")) 
            && $(e.target).parents("#ssmp-tooltip-modal").length <= 0){
                clearTooltipPanel();
        }
    })
    $(window).on("resize", function () {
        clearTooltipPanel();
    });
    
}(window.jQuery));
(function ($) {
    function observerCallback(entries, observer){
        entries.forEach(function(entry){
            if(entry.isIntersecting){
                var iframeEle = entry.target;
                var iframeSrc = $(iframeEle).attr("data-srcset");
                $(iframeEle).attr("src", iframeSrc);
                observer.unobserve(iframeEle);
            }
        });
    }

    function adjustIframeHeight(iframe){
        try{
            var contentHeight = iframe.contentDocument.body.scrollHeight;
            $(iframe).closest(".iframe-container").css("padding-top", contentHeight + "px");
        }catch(e){
            console.warn("The iframe height can not be adjusted dynamically: " + e);
        }
    }

    function lazyLoadForIframes(){
        var lazyIframes = $(".iframe-container iframe.lazy"); 
        // lazy load IntersectionObserver core codes
        var iframeObserver;
        if(typeof IntersectionObserver === "function" && typeof CQ === "undefined"){
            var options = {
                rootMargin: "500px 0px"
            }
            iframeObserver = new IntersectionObserver(observerCallback, options);
        }

        
        
        if (iframeObserver) {
            lazyIframes.each(function () {
                iframeObserver.observe(this);
            })
        }else {
            // IE
            lazyIframes.each(function () {
                var iframeSrc = $(this).attr("data-srcset");
                $(this).attr("src", iframeSrc);
            })    
        }
    }
    
    $(function(){
        var $iframes = $(".iframe-container").not("[data-override-height='true']").find("iframe");
        $iframes.on("load", function(){
            adjustIframeHeight(this);
        });

        $(window).on("resize", function(){
            $iframes.each(function(){
                if($(this).attr("src")){
                    adjustIframeHeight(this);
                }
            });
        });

        lazyLoadForIframes();
    });
}(window.jQuery));
(function(win, $) {
    "use strict";
    $(document).ready(function () {
        $(document).on("click", ".interactive-content__disclosure-btn", function (e) {
            e.preventDefault();
            $(this).toggleClass("open");
            $(this).closest(".interactive-content").find(".interactive-content__disclosure").slideToggle();
        })
        $(".interactive-content__intro-cta button").click(function(e){
            e.preventDefault();
            $(this).closest(".interactive-content").find(".interactive-content__first-panel").slideUp();
            $(this).closest(".interactive-content").find(".interactive-content__second-panel").slideDown();
        })
    });
}(window, window.jQuery));
(function (win, $) {
    "use strict";
    $(document).ready(function () {
        $(document).on("click", ".interactive-quiz__disclosure-btn", function (e) {
            e.preventDefault();
            $(this).toggleClass("open");
            $(this).closest(".interactive-quiz").find(".interactive-quiz__disclosure").slideToggle();
        })
        $(document).on("click", ".interactive-quiz__options button", function (e) {
            e.preventDefault();
            $(this).addClass("checked");
            $(this).siblings().removeClass("checked");
            $(this).closest(".interactive-quiz__question-panel").find(".interactive-quiz__submit-cta").slideDown();
        })
        $(document).on("click", ".interactive-quiz__submit-cta", function (e) {
            e.preventDefault();
            $(this).closest(".interactive-quiz__quiz-content").css("min-height", $(this).closest(".interactive-quiz__quiz-content").outerHeight(true));
            var selectedItem = $(this).closest(".interactive-quiz__question-panel").find(".interactive-quiz__options button.checked");
            $(this).closest(".interactive-quiz__question-panel").slideUp();
            if (selectedItem.hasClass("correct-answer")) {
                $(this).closest(".interactive-quiz").find(".interactive-quiz__correct-panel").slideDown();
            } else {
                $(this).closest(".interactive-quiz").find(".interactive-quiz__incorrect-panel").slideDown();
            }
        })

    });
}(window, window.jQuery));
window["ssmp-js-core"] = (function(ssmp) {
    "use strict";

    var SITE = ssmp.SITE;

    /**
     * URL of the CLR localization data that includes CLR modal labels and location, language, role, product data
     * @type {String}
     */
    var CLR_LOCALIZATION_DATA_URL = "/bin/v1/" + SITE + "/clrAssociations.json";

    /**
     * URL of the disclaimers available to each CLR configuration
     * @type {String}
     */
    var DISCLAIMER_DATA_URL = "/bin/v1/" + SITE + "/disclaimer.json";

    /**
     * URL of the API that allows us to set cookies
     * @type {String}
     */
    var COOKIE_API_URL = "/bin/v1/stt/clrCookie";

    /**
     * URL of the API taht allows us to see if we were redirected
     * @type {String}
     */
    var REDIRECT_API_URL = "/bin/v1/" + SITE + "/insiteMsgTemplates.json";

    /**
     * URL that site redirects to if essential AJAX calls fail
     * @type {String}
     */
    var AJAX_FALLBACK_URL = "/wearesorry";

    /**
     * Cookie that will be set when we have been redirected by Akamai
     * @type {String}
     */
    var AKAMAI_REDIRECTION_COOKIE_NAME = "CDN_REDIR";
    var USER_ORIGINAL_PAGE_URL="ns_url";

    /**
     * Cookie that will be set when we have been redirected by a 404
     * @type {String}
     */
    var NOT_FOUND_REDIRECTION_COOKIE_NAME = "404_REDIR";
    var INVALID_PRODUCTS_KEY_IN_COOKIE = "INVALID_PRODUCTS";

    var DISCLAIMER_COOKIE_NAME = "disclaimer";
    var GEOLOC_COOKIE_NAME = "geoloc";
    var ROLEPRODUCT_COOKIE_NAME = "roleproduct";
    var BYPASS_CLRP_COOKIE_NAME = "bypass";
    var IC_SITE_PRODUCTS = "IC_SITE_PRODUCTS";

    /**
     * Status of the CLRP Manually Update events, used for insite panel
     * @type {String}
     */
    var CLRP_UPDATED_FOR_REPEAT_VISITOR = "clrp-updated-for-repeat-visitor";
    var CLRP_UPDATED_FOR_NEW_VISITOR = "clrp-updated-for-new-visitor";

    // Export our configuration
    ssmp.COOKIE_API_URL = COOKIE_API_URL;
    ssmp.CLR_LOCALIZATION_DATA_URL = CLR_LOCALIZATION_DATA_URL;
    ssmp.REDIRECT_API_URL = REDIRECT_API_URL;
    ssmp.DISCLAIMER_DATA_URL = DISCLAIMER_DATA_URL;
    ssmp.AKAMAI_REDIRECTION_COOKIE_NAME = AKAMAI_REDIRECTION_COOKIE_NAME;
    ssmp.USER_ORIGINAL_PAGE_URL=USER_ORIGINAL_PAGE_URL;
    ssmp.NOT_FOUND_REDIRECTION_COOKIE_NAME = NOT_FOUND_REDIRECTION_COOKIE_NAME;
    ssmp.DISCLAIMER_COOKIE_NAME = DISCLAIMER_COOKIE_NAME;
    ssmp.GEOLOC_COOKIE_NAME = GEOLOC_COOKIE_NAME;
    ssmp.ROLEPRODUCT_COOKIE_NAME = ROLEPRODUCT_COOKIE_NAME;
    ssmp.BYPASS_CLRP_COOKIE_NAME = BYPASS_CLRP_COOKIE_NAME;
    ssmp.AJAX_FALLBACK_URL = AJAX_FALLBACK_URL;
    ssmp.INVALID_PRODUCTS_KEY_IN_COOKIE = INVALID_PRODUCTS_KEY_IN_COOKIE;
    ssmp.IC_SITE_PRODUCTS = IC_SITE_PRODUCTS;
    ssmp.CLRP_UPDATED_FOR_REPEAT_VISITOR = CLRP_UPDATED_FOR_REPEAT_VISITOR;
    ssmp.CLRP_UPDATED_FOR_NEW_VISITOR = CLRP_UPDATED_FOR_NEW_VISITOR;

    return ssmp;
}(window["ssmp-js-core"] || {}));
window["ssmp-js-core"] = (function(
    $, 
    ssmpCore,
    ssmpParseWebAddress
){
    "use strict";

    /**
     * Path separation delimeter
     * @type {String}
     */
    var DELIMETER = "/";
    
    /**
     * Get the CLRP init property of the current page
     * @returns {Boolean} true :represents the CLRP modal is Enabled on the page.
     *                     false :represents the CLRP modal is Disabled on the page.
     */
    function getInitOnLoad(){
        try {
            return window.ssmpConfig.initOnLoad;
        } catch (err) {
            return undefined;
        }
    }
    /**
     * Get showBackground property of the current page
     * @returns {Boolean} true :represents to show background data when CLRP Pop up is open for First Time users.
     *                     false :represents do not show background data when CLRP pop up is open
     ***/
    function getShowBackground(){
        try {
            return window.ssmpConfig.showBackground;
        } catch (err) {
            return false;
        }
    }
    /**
     * Get the location property of the current page
     * @returns {String|undefined} The String value the represents the CLR+P location of the current page
     */
    function getPageLocation(){
        try {
            return window.ssmpConfig.clrp.location || undefined;
        } catch (err) {
            return undefined;
        }
    }
    
    /**
     * Get the language property of the current page
     * @returns {String|undefined} The String value the represents the CLR+P language of the current page
     */
    function getPageLanguage(){
        try {
            return window.ssmpConfig.clrp.language || undefined;
        } catch (err) {
            return undefined;
        }
    }
    
    /**
     * Get the role property of the current page
     * @returns {String|undefined} The String value the represents the CLR+P role of the current page
     */
    function getPageRole(){
        try {
            return window.ssmpConfig.clrp.role || undefined;
        } catch (err) {
            return undefined;
        }
    }
    
    /**
     * Get the product property of the current page
     * @returns {String|undefined} The String value the represents the CLR+P product of the current page
     */
    function getPageProduct(){
        try {
            return window.ssmpConfig.clrp.product || undefined;
        } catch (err) {
            return undefined;
        }
    }
    
    /**
     * Get multiple cookies
     * @param {String[]} cookieArr Array of cookies names to retrieve the values of
     * @throws Will throw if argument is not an Array
     * @returns {Promise<Object>} Object containing the values of the cookies asked for if they were found
     */
    function getCookies(cookieArr) {
        if (!Array.isArray(cookieArr)) throw new Error("Must provide an Array of Strings");

        return $.ajax({
            url: ssmpCore.COOKIE_API_URL,
            cache: false,
            dataType: "json",
            data: {
                requestedCookies: cookieArr.join("|"),
                currentCountry: getPageLocation()
            }
        });
    }
    
    /**
     * Have server set the cookie value for the provided cookie name using the provided location context's rules
     * @param {String} locationContext Tell the server what the "currentCountry" is so that it knows what cookie rules to apply as it sets the cookie
     * @param {String} cookieName The name of the cookie to set the value for
     * @param {String} cookieValue The value of the cookie to be set
     * @returns {Promise<Object>} Whether the set operation was successful
     */
    function setCookie(locationContext, cookieName, cookieValue) {
        var now = new Date();
        var then = new Date();
        then.setMonth(then.getMonth() + 13); // 13 months from now
        var diff = (then.getTime() - now.getTime()) / 1000;
        
        return $.ajax({
            method: "POST",
            url: ssmpCore.COOKIE_API_URL + "?" + $.param({
                "cookieName": cookieName,
                "cookieValue": cookieValue,
                "Secure": true,
                "Expiration": diff,
                "currentCountry": locationContext
            })
        });
    }

    /**
     * Have the server unset a cookie value
     * @param {String} cookieName The cookie to delete
     * @returns {Promise<Object>} Resolves after cookie operation is complete
     */
    function deleteCookie(cookieName) {
        return $.ajax({
            method: "POST",
            dataType: "text",
            url: ssmpCore.COOKIE_API_URL + "?" + $.param({
                "cookieName": cookieName,
                "cookieValue": "",
                "Secure": "",
                "Expiration": "",
                "currentCountry": getPageLocation()
            })
        });
    }
    
    /**
     * Synchronously have the server unset a cookie.  This function should not be used unless you really have to.
     * @param {String} cookieName The cookie to delete
     * @returns {Promise<Object>} Resolves after cookie operation is complete
     */
    function deleteCookieSynchronous(cookieName) {
        /*
         * Please don't use this function unless you really mean to.  Prefer
         * the asynchronous version whenever you can.  This function is only
         * defined to facilitate the anonymous link requirement which has users
         * click a link whose default action is prevented, an XHR is made to
         * clear cookies, and then window.open() is potentially fired to take
         * the user to the href of the anchor.
         *
         * The iOS popup blocker prevents windows from being opened unless they
         * are opened from direct user interaction.  Sice we are opening
         * from the callback of an XHR, this is prevented.  The only way to
         * allow for this to work is to make the AJAX calls synchronous which
         * is blocking.  Blocking calls are bad.  They lock rendering, interaction,
         * and make your site look unresponsive.  Again, don't use this function
         * unless you have a really good reason to.
         */
        console.warn("This function should not be used without a good reason");
        return $.ajax({
            async: false,
            method: "POST",
            url: ssmpCore.COOKIE_API_URL + "?" + $.param({
                "cookieName": cookieName,
                "cookieValue": "",
                "Secure": "",
                "Expiration": "",
                "currentCountry": getPageLocation()
            })
        });
    }

    /**
     * Load CLRP and Redirection cookies
     */
    var CLRPAndRedirectionCookies;

    /**
     * Retrieve the values of the CLRP and Redirection cookies
     * @returns {Promise<Object>} Resolves to an Object containing the CLRP and Redirection cookie values
     */
    function getCLRPAndRedirectionCookies(){
        if(!CLRPAndRedirectionCookies){
            CLRPAndRedirectionCookies = (function() {
                var cookiesDeferred = $.Deferred();
                ssmpCore.attachFallbackToFailure(getCookies([
                        ssmpCore.GEOLOC_COOKIE_NAME,
                        ssmpCore.ROLEPRODUCT_COOKIE_NAME,
                        ssmpCore.BYPASS_CLRP_COOKIE_NAME,
                        ssmpCore.NOT_FOUND_REDIRECTION_COOKIE_NAME,
                        ssmpCore.AKAMAI_REDIRECTION_COOKIE_NAME,
                        ssmpCore.USER_ORIGINAL_PAGE_URL
                    ]))
                    .then(function(response) {
                        cookiesDeferred.resolve(response);
                    })
                    .fail(function(request, status, error) {
                        cookiesDeferred.reject(error);
                    });
                return cookiesDeferred.promise();
            })();
        }
        return CLRPAndRedirectionCookies;
    }

    /**
     * Update the object with new CLRP and Redirection cookies
     * @param {Promise<Object>} updatedCookies The updated cookies
     */
    function updateCLRPAndRedirectionCookies(updatedCookies){
        CLRPAndRedirectionCookies = updatedCookies;
    }
    
    /**
     * Retrieve the values of the redirection cookies
     * @returns {Promise<Object>} Resolves to an Object containing the values of the redirection cookies
     */
    function getRedirectionCookies() {
        return getCLRPAndRedirectionCookies().then(function(xhr) {
            var ret = {};

            // Copy CDN cookie if we received it
            if (xhr[ssmpCore.AKAMAI_REDIRECTION_COOKIE_NAME]) {
                ret[ssmpCore.AKAMAI_REDIRECTION_COOKIE_NAME] = xhr[ssmpCore.AKAMAI_REDIRECTION_COOKIE_NAME];
            }

            // Copy 404 cookie if we received it
            if (xhr[ssmpCore.NOT_FOUND_REDIRECTION_COOKIE_NAME]) {
                ret[ssmpCore.NOT_FOUND_REDIRECTION_COOKIE_NAME] = xhr[ssmpCore.NOT_FOUND_REDIRECTION_COOKIE_NAME];
            }
            
            return ret;
        })
    }
    
    /**
     * Retrieve the values of the CLRP cookies
     * @returns {Promise<Object>} Resolves to an Object containing the CLRP cookie values
     */
    function getCLRCookies() {
        return getCLRPAndRedirectionCookies().then(function(xhr) {
            var ret = {
                location: "",
                language: "",
                role: "",
                product: "",
                disclaimer: ""
            };

            // Try to determine geoloc cookie
            try {
                var geoloc = xhr[ssmpCore.GEOLOC_COOKIE_NAME].split(":");
                ret.location = geoloc[0];
                ret.language = geoloc[1];
            } catch (err) {
                console.warn("Unable to get current geoloc");
            }

            // Try to determine roleproduct cookie
            try {
                var roleproduct = xhr[ssmpCore.ROLEPRODUCT_COOKIE_NAME].split(":");
                ret.role = roleproduct[0];
                ret.product = roleproduct[1];
            } catch (err) {
                console.warn("Unable to get current roleproduct");
            }

            // Get the disclaimer cookie
            ret[ssmpCore.BYPASS_CLRP_COOKIE_NAME] = xhr[ssmpCore.BYPASS_CLRP_COOKIE_NAME];

            return ret;
        });
    }

    /**
     * Function to delete the CLRP cookies
     * @returns {Promise} Resolves after the deletion is complete
     */
    function deleteCLRCookies() {
        return $.when(
            deleteCookie(ssmpCore.GEOLOC_COOKIE_NAME),
            deleteCookie(ssmpCore.ROLEPRODUCT_COOKIE_NAME),
            deleteCookie(ssmpCore.BYPASS_CLRP_COOKIE_NAME)
        );
    }
    
    /**
     * Delete the redirection cookies
     * @returns {Promise} Resolves after deletion is complete
     */
    function deleteRedirectionCookies() {
        return $.when(
            deleteCookie(ssmpCore.AKAMAI_REDIRECTION_COOKIE_NAME),
            deleteCookie(ssmpCore.NOT_FOUND_REDIRECTION_COOKIE_NAME)
        );
    }
    
    /**
     * Retrieve the i18n data
     * @returns {Promise<Object>} Resolves to the i18n data
     */
    function getLocalizationData() {
        return $.ajax({
            method: "GET",
            url: ssmpCore.CLR_LOCALIZATION_DATA_URL,
            dataType: "json"
        });
    }
    
    /**
     * Retrieve the disclaimer data
     * @returns {Promise<Object>} Resolves to the disclaimer data
     */
    function getDisclaimerData() {
        return $.ajax({
            method: "GET",
            url: ssmpCore.DISCLAIMER_DATA_URL,
            dataType: "json"
        });
    }

    /**
     * Get the contents to show in the redirection banner
     * @returns {Promise<Object>} The localized redirection banner content
     */
    function getRedirectionBannerContent() {
        return $.ajax({
            method: "GET",
            url: ssmpCore.REDIRECT_API_URL,
            dataType: "json"
        });
    }

    /**
     * Load localization data
     */
    var clrpData;

    /**
     * Retrieve the localization data
     * @returns {Promise<Object>} Resolves to an Object containing the localization data
     */
    function loadCLRPData(){
        if(!clrpData){
            clrpData = (function() {
                var clrpDataDeferred = $.Deferred();
                ssmpCore.attachFallbackToFailure(getLocalizationData())
                    .then(function(response) {
                        clrpDataDeferred.resolve(response);
                    })
                    .fail(function(request, status, error) {
                        clrpDataDeferred.reject(error);
                        console.warn("Localization Data:: " + error);
                    });
                return clrpDataDeferred.promise();
            })();
        }
        return clrpData;
    }

    /**
     * Load disclaimer data
     */
    var disclaimerData;

    /**
     * Retrieve the disclaimer data
     * @returns {Promise<Object>} Resolves to an Object containing the disclaimer data
     */
    function loadDisclaimerData(){
        if(!disclaimerData){
            disclaimerData = (function() {
                var disclaimerDataDeferred = $.Deferred();
                ssmpCore.attachFallbackToFailure(getDisclaimerData())
                    .then(function(response) {
                        disclaimerDataDeferred.resolve(response);
                    })
                    .fail(function(request, status, error) {
                        disclaimerDataDeferred.reject(error);
                        console.warn("Disclaimer Data:: " + error);
                    });
                return disclaimerDataDeferred.promise();
            })();
        }
        return disclaimerData;
    }

    /**
     * Determine the correct SpecialLink to use by drilling upwards on the path provided in desiredRoute until we find a match
     * @param {Object} templateInfo Object that has SpecialLink
     * @param {CLRP} clrpCookies The cookies to use to find the special link to use
     * @returns {SpecialLink|Object} The appropriate attributes to create a link from
     */
    function getUsableRoute(templateInfo, clrpCookies) {/* Hu, Gongda 2022-06-01 */
        //var currPossibleLocation = DELIMETER + "content" + DELIMETER + ssmpCore.SITE + DELIMETER;
        var soonestUsableRoute = {};

        var usableLocation = [
            clrpCookies.location,
            clrpCookies.language, 
            clrpCookies.role,
            clrpCookies.product
        ].filter(function(comp) {
            return !!comp;
        });

        try {
            while (usableLocation.length) {
                //currPossibleLocation = DELIMETER + "content" + DELIMETER + ssmpCore.SITE + DELIMETER + usableLocation.join(DELIMETER);
                var currPossibleLocation = DELIMETER + usableLocation.join(DELIMETER);
                if (typeof templateInfo[currPossibleLocation] !== "undefined") {
                    soonestUsableRoute = templateInfo[currPossibleLocation];
                    break;
                }
                usableLocation.pop();
            }
        } catch (err) {
            console.error("Something went wrong determining redirection template");
            return {};
        }

        return soonestUsableRoute;
    }

    /**
     * Function to hide content that should not be visible without CLR preferences
     */
    function hideCLRGatedContent() {
        $("#ssmp-no-cookie-header").css("display", "");

        $(".ssmp-page")
            .find(".header")
            .parent()
            .children()
            .not(".header")
            .addClass("visibility-hidden");

        $(".ssmp-header__clr, .ssmp-header__actions, .cmp-navigation").addClass("visibility-hidden");
    }
    
    /**
     * Function to check of product is available in other languages for same CR.
     * @returns [] The list of language labels where product exist.
     */
    function productAvailableInOtherLanguage(i18n, currentCookiePreferences, product, ssmpClr){
        var productInLanguages=[];
        if(product === currentCookiePreferences.product){
            return productInLanguages;
        }
        var location = currentCookiePreferences.location;
        var role = currentCookiePreferences.role;
        var language = currentCookiePreferences.language;
        var availableLanguages = ssmpClr.getLanguagesByLocationAndRole(i18n, language, location, role );
        for(var i=0; i<availableLanguages.length; i++){
           var productList = ssmpClr.getProducts(i18n, language, location, availableLanguages[i].value, role);
           for(var j=0; j<productList.length; j++){
               if(product === productList[j].value){
                   productInLanguages.push(availableLanguages[i].label);
               }
           }
        }
        return productInLanguages;
    }

    /**
     * Function to set the cookieUpdateStatus in sessionStorage
     * @param {String} status 
     */
    function setCookieUpdateStatus(status){
        sessionStorage.setItem("cookieUpdateStatus", status);
    }

    /**
     * Function to get the cookieUpdateStatus in sessionStorage
     * @returns {String} status
     */
    function getCookieUpdateStatus(){
        return sessionStorage.getItem("cookieUpdateStatus");
    }

    /**
     * Function to delete the cookieUpdateStatus in sessionStorage
     */
    function deleteCookieUpdateStatus(){
        sessionStorage.removeItem("cookieUpdateStatus");
    }


    /**
     * Retrieve the Vue library
     * @returns {Promise<Object>} Resolves to an Object containing the localization data
     */
    var loadVueLibrary = (function(){
        var vueLibrary;
        if(typeof window.Vue === "function"){
            vueLibrary = $.when();
        }
        return function(){
            if(!vueLibrary){
                var deferredObj = $.Deferred();
                ssmpCore.attachFallbackToFailure($.ajax({
                    url: "/etc.clientlibs/ssmp/clientlibs/clientlib-vendor/vue.min.js",
                    dataType: "script",
                    method: "GET",
                    cache: true
                })).then(function(response) {
                    deferredObj.resolve(response);
                })
                .fail(function(request, status, error) {
                    deferredObj.reject(error);
                    console.warn("Vue Library:: " + error);
                });
                vueLibrary = deferredObj.promise();
            }
            return vueLibrary;
        };
    })();


    /**
     * Function to add CLRP to the document links start with /library-content/ for AA report
     * @param {jQuery<object>}  $sec The area which need to check the document links.
     */
    function addCLRPforDocumentLink($sec){
        if(ssmpCore.isAuthorMode()){
            return false;
        }
        var pageLocation = ssmpCore.getPageLocation(),
            pageLanguage = ssmpCore.getPageLanguage(),
            pageRole = ssmpCore.getPageRole(),
            pageProduct = ssmpCore.getPageProduct();
        if(pageLocation && pageLanguage && pageRole && pageProduct){
            var pattern2=/\.(?:doc|docx|eps|jpg|png|svg|xls|ppt|pptx|pdf|xlsx|tab|csv|zip|txt|vsd|vxd|xml|js|css|rar|exe|wma|mov|avi|wmv|mp3|wav|m4v)/i;
            $sec.find("a").each(function(){
                $(this).attr("href", function(i, val){
                    var pathname = $(this)[0].pathname;
                    if(pathname && pathname.indexOf("/library-content/") === 0 && pattern2.test(val)){
                        return val.replace("/library-content/","/"+pageLocation+"/"+pageLanguage+"/"+pageRole+"/"+pageProduct+"/library-content/");
                    }
                });
            })
        }
    }

    /**
     * Function to get the URL parameter value by name
     * @param {string} name The paramater name
     * @param {string} url The URL to be checked
     * @returns The value in the URL for the required name
     */
    function getURLParamByName(name, url){
        var search = url || window.location.search,
            regex = new RegExp("[?&]" + name + "=([^&;#]*)"),
            result = null;

        result = regex.exec(search);
        return result ? decodeURIComponent(result[1]) : "";
    }

    /**
     * Function to add parameters to the URL
     * @param {string} name The parameter name
     * @param {string} value The parameter value
     * @param {string} url The URL string to be set
     * @returns The updated url string after adding the paramters
     */
    function setURLParamByName(name, value, url){
        var regex = new RegExp("([?&])" + name + "=([^&;#]*)");

        value = encodeURIComponent(value);
        url = url || window.location.href;
        if(value){
            if(regex.test(url)){
                url = url.replace(regex, "$1" + name +"=" + value);
            }else {
                url = url.replace(/([^?#]*)[?]?([^#]*)/, function(match, p1, p2){
                    p2 = p2 ? "&" + p2 : "";
                    return p1 + "?" + name +"=" + value + p2;
                });
            }
            
        }else {
            url = url.replace(regex, "$1").replace(/([?&])&/, "$1");
        }
        
        return url;
    }

    /**
     * Augmented WebAddress object that is aware of SSMP URL convention such as CLR+P and /content/ssmp
     * @typedef {Object} SSMPWebAddress
     * @property {CLRP} clrp The CLR+P components found in the address
     * @property {String[]} pathRemainder The path remaining after the CLR+P components
     */
    /**
     * Parse information from a URL in an SSMP context aware manner (CLR+P, /content/ssmp, .html extension)
     * @param {String} address The URL to deconstruct
     * @returns {SSMPWebAddress} The deconstructed parts of a URL
     */
     function parseSSMPWebAddress(address) {
        var webAddress = ssmpParseWebAddress.parseWebAddress(address);
        
        // Convert path to an array and remove empty strings
        var pathParts = webAddress.pathname.split("/").filter(function(part) {
            return !!part;
        });
        
        // Remove content/ssmp if present
        if (pathParts[0] === "content" && pathParts[1] === ssmpCore.SITE) {
            pathParts.splice(0, 2);
        }
        
        // Remove html extension
        var strippedPathParts = pathParts.map(function(part) {
            return part.replace(/\.html$/, "");
        });
        
        // Get the CLR+P parts from path
        var addressCLRP = {
            location: strippedPathParts[0],
            language: strippedPathParts[1],
            role: strippedPathParts[2],
            product: strippedPathParts[3]
        }
        
        // Note the path parts that we did not consume as part of CLR+P
        var remainingPathParts = strippedPathParts.slice(4);
        
        return $.extend({}, webAddress, {
            clrp: addressCLRP,
            pathRemainder: remainingPathParts
        });
    }

    /**
     * Return if the one trust script is failed to load
     */
    function isOneTrustFailed(){
        return typeof OptanonActiveGroups === "undefined";
    }

    ssmpCore.setCookie = setCookie;
    ssmpCore.getCookies = getCookies;
    ssmpCore.getCLRCookies = getCLRCookies;
    ssmpCore.getRedirectionCookies = getRedirectionCookies;
    ssmpCore.getCLRPAndRedirectionCookies = getCLRPAndRedirectionCookies;
    ssmpCore.updateCLRPAndRedirectionCookies = updateCLRPAndRedirectionCookies;
    ssmpCore.deleteCookie = deleteCookie;
    ssmpCore.deleteCookieSynchronous = deleteCookieSynchronous;
    ssmpCore.deleteCLRCookies = deleteCLRCookies;
    ssmpCore.deleteRedirectionCookies = deleteRedirectionCookies; 
    ssmpCore.getLocalizationData = getLocalizationData;
    ssmpCore.getDisclaimerData = getDisclaimerData;
    ssmpCore.getRedirectionBannerContent = getRedirectionBannerContent;
    ssmpCore.getUsableRoute = getUsableRoute;
    ssmpCore.hideCLRGatedContent = hideCLRGatedContent;
    ssmpCore.loadCLRPData = loadCLRPData;
    ssmpCore.loadDisclaimerData = loadDisclaimerData;
    
    ssmpCore.getPageLocation = getPageLocation;
    ssmpCore.getPageLanguage = getPageLanguage;
    ssmpCore.getPageRole = getPageRole;
    ssmpCore.getPageProduct = getPageProduct;
    ssmpCore.getInitOnLoad = getInitOnLoad;
    ssmpCore.getShowBackground = getShowBackground;
    ssmpCore.productAvailableInOtherLanguage = productAvailableInOtherLanguage;
    ssmpCore.addCLRPforDocumentLink = addCLRPforDocumentLink;

    ssmpCore.setCookieUpdateStatus = setCookieUpdateStatus;
    ssmpCore.getCookieUpdateStatus = getCookieUpdateStatus;
    ssmpCore.deleteCookieUpdateStatus = deleteCookieUpdateStatus;

    ssmpCore.loadVueLibrary = loadVueLibrary;

    ssmpCore.getURLParamByName = getURLParamByName;
    ssmpCore.setURLParamByName = setURLParamByName;
    ssmpCore.parseSSMPWebAddress = parseSSMPWebAddress;
    ssmpCore.isOneTrustFailed = isOneTrustFailed;

    return ssmpCore;
}(
    window.jQuery, 
    window["ssmp-js-core"],
    window["ssmp-js-parse-web-address"]
));

window["ssmp-js-clr"] = (function($) {
    "use strict";

    /**
     * Object containing all of the localization data includeing countries, languages, roles, disclaimers, and field labels
     * @typedef {Object} Localization
     */

    /**
     * Tuple that has a label and value String property
     * @typedef {Object} Tuple
     * @property {String} label The String value that labels this tuple
     * @property {String} value The code or value that represents the tuple
     */

    /**
     * Location label/value tuple
     * @typedef {Tuple} LocationTuple
     */

    /**
     * Language label/value tuple
     * @typedef {Tuple} LanguageTuple
     */

    /**
     * Role label/value tuple
     * @typedef {Object} RoleTuple
     * @property {String} label The String value that represents the role
     * @property {String} value The code or value that represents the role
     * @property {String} description The description of the role
     * @property {String[]} availableLanguages The languages this role is available to
     */

    /**
     * Product label/value tuple
     * @typedef {Object} ProductTuple
     * @property {String} label The String value that represents the product
     * @property {String} value The code or value that represents the product
     * @property {String} path The URL path to the product
     */

    // Lables that should be looked for in the localization Object
    var labelWhitelist = [
        "clrTitle",
        "clrLocationText",
        "clrRoleLabel",
        "clrButtonLabel",
        "clrAnonymousText",
        "clrTermsText",
        "clrPrivacyText",
        "investorsText",
        "clrAgreeLabel",
        "clrChangeLanguageText",
        "clrChangeSiteText",
        "clrChangeLocationOrRole",
        "clrSelectCountryAndRoleLabel",
        "clrRoleMobileLabel",
        "clrAcceptLabel",
        "clrDeclineLabel",
        "clrProductLabel", 
        "clrTitleForCR", 
        "clrTitleForC", 
        "clrChangeSiteLabel",
        "clrCookieSettingsLabel",
        "ssmpCookieError"
    ];

    /**
     * Get the UI label dictionary in a localized format
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the locations in
     * @returns {Object} The localized labels in a key/value Object
     */
    function getLabels(i18n, expectedLanguage) {
        var ret = {},
            labelText = "";
        labelWhitelist.forEach(function(label) {
            labelText = i18n[expectedLanguage + "-" + label] || i18n["en-" + label];
            if (!labelText) return;
            ret[label] = labelText;
        });
        return ret;
    }

    /**
     * Get possible locations in a localized format for a country tier type
     * @param {object} countries The countries object to get data from
     * @param {string} expectedLanguage The language to localize the locations in
     * @param {array} tier The array of countries in this tier
     * @param {number} index The index of the tier
     * @returns {LocationTuple[]} Collection of locations
     */
    function getLocationsByTier(countries, expectedLanguage, tier, index){
        var ret = [],
            locationLabel = "";
        $.each(tier, function(j, countryKey){
            locationLabel = countries[countryKey][expectedLanguage + "-name"] || countries[countryKey]["en-name"];
            ret.push({
                label: locationLabel,
                value: countryKey,
                group: "tier" + index
            });
        });

        return ret;
    }

    /**
     * Get possible locations in a localized format
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the locations in
     * @returns {LocationTuple[]} Collection of locations
     */
    function getLocations(i18n, expectedLanguage) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!i18n.countries || !i18n.countryTiers) throw new Error("Localization has no countries property");

        var ret = [],
            countryTiers = i18n.countryTiers,
            TIER_LENGTH = 3; //Currently only support 3 tiers
        
        for(var i = 1, tier; i <= TIER_LENGTH; i++){
            tier = countryTiers["tier" + i];
            if(tier && tier.length > 0){
                ret = ret.concat(getLocationsByTier(i18n.countries, expectedLanguage, tier, i));
            }
        }
        
        return ret;
    }

    function getLanguagesByLocation(i18n, expectedLanguage, location) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");

        var countryObject = i18n["countries"][location];
        var ret = [];

        if (!countryObject) throw new Error("No such country object");

        for (var languageKey in countryObject.languages) {
            if (!countryObject.languages.hasOwnProperty(languageKey)) continue;
            ret.push({
                label: countryObject.languages[languageKey][expectedLanguage + "-name"],
                value: languageKey,
                displayCode: countryObject.languages[languageKey]["displayCode"]
            });
        }

        return ret;
    }

    function getLanguagesByLocationAndRole(i18n, expectedLanguage, location, role) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");
        if (!role) throw new Error("Must provide a role");

        var countryLanguages = getLanguagesByLocation(i18n, expectedLanguage, location);

        var ret = [];
        var countryObject = i18n["countries"][location];
        if (!countryObject) throw new Error("No such country object");
        var roleObject = countryObject["roles"][role];
        if (!roleObject) throw new Error("No such role object");

        // Filter out languages that are not available for a given role
        for (var i = 0; i < roleObject.availableLanguages.length; i++) {
            for (var j = 0; j < countryLanguages.length; j++) {
                if (countryLanguages[j].value === roleObject.availableLanguages[i]) {
                    ret.push(countryLanguages[j]);
                }
            }
        }

        return ret;
    }
    
    function getLanguagesByRole(i18n, location, role) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!location) throw new Error("Must provide a location");
        if (!role) throw new Error("Must provide a role");

        return i18n["countries"][location]["roles"][role]["availableLanguages"];
    }
    /**
     * Get possible languages in a localized format
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the locations in
     * @param {String} location The location code to discern possible languages
     * @param {String} [role] The role code to discern possible languages
     * @returns {LanguageTuple[]} Collection of languages
     */
    function getLanguages(i18n, expectedLanguage, location, role) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");

        // Delegate to correct location function
        if (role) {
            return getLanguagesByLocationAndRole(i18n, expectedLanguage, location, role);
        } else {
            return getLanguagesByLocation(i18n, expectedLanguage, location);
        }
    }

    function getRolesByLocation(i18n, expectedLanguage, location) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");

        var ret = [];

        var countryObject = i18n["countries"][location];
        if (!countryObject) throw new Error("No such country object");

        for (var roleKey in countryObject.roles) {
            if (!countryObject.roles.hasOwnProperty(roleKey)) continue;
            ret.push({
                label: countryObject.roles[roleKey][expectedLanguage + "-name"],
                value: roleKey,
                description: countryObject.roles[roleKey][expectedLanguage + "-description"],
                availableLanguages: countryObject.roles[roleKey].availableLanguages
            });
        }

        return ret;
    }

    function getRolesByLocationAndLanguage(i18n, expectedLanguage, location, language) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");
        if (!language) throw new Error("Must provide a language");

        var ret = [];
        var countryObject = i18n["countries"][location];
        if (!countryObject) throw new Error("No such country object");

        var roleObjects = getRolesByLocation(i18n, expectedLanguage, location);

        for (var i = 0; i < roleObjects.length; i++) {
            for (var j = 0; j < roleObjects[i].availableLanguages.length; j++) {
                if (roleObjects[i].availableLanguages[j] === language) {
                    ret.push(roleObjects[i]);
                }
            }
        }

        return ret;
    }

    /**
     * Get possible roles in a localized format
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the roles in
     * @param {String} location The location code to discern possible roles
     * @param {String} [language] The language code that can be used to discern possible roles
     * @returns {RoleTuple[]} Collection of possible roles
     */
    function getRoles(i18n, expectedLanguage, location, language) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");

        if (language) {
            return getRolesByLocationAndLanguage(i18n, expectedLanguage, location, language);
        } else {
            return getRolesByLocation(i18n, expectedLanguage, location);
        }
    }

    function getDefaultLanguageByLocation(i18n, expectedLanguage, location) {
        return getLanguagesByLocation(i18n, expectedLanguage, location)[0];
    }

    function getDefaultLanguageByLocationAndRole(i18n, expectedLanguage, location, role) {
        return getLanguagesByLocationAndRole(i18n, expectedLanguage, location, role)[0];
    }

    /**
     * Get the default language based on predicates
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the locations in
     * @param {String} location The country to consider active
     * @param {String} [role] The role to consider active
     * @returns {LanguageTuple} Default language under given conditions
     */
    function getDefaultLanguage(i18n, expectedLanguage, location, role) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a country to find the language of");

        if (role) {
            return getDefaultLanguageByLocationAndRole(i18n, expectedLanguage, location, role);
        } else {
            return getDefaultLanguageByLocation(i18n, expectedLanguage, location);
        }
    }

    /**
     * Determine the correct value to use by drilling upwards on the path provided in desiredRoute until we find a match
     * @param {object} data Object that has the data
     * @param {object} clrp {CLRP} The cookies to use to find the property value
     * @param {String} propertyName The property name to find the value
     * @param {Boolean} upwardSearch If need to search upwards of the clrpCookies 
     * @returns {String} The found value
     */
    function getUsableValue(data, clrp, propertyName, upwardSearch) {
        var currPossibleLocation = "/",
            resultValue = "",
            soonestUsableRoute = {};
        

        var usableLocation = [
            clrp.location,
            clrp.language,
            clrp.role,
            clrp.product
        ].filter(function(comp) {
            return !!comp;
        });

        try {
            while (usableLocation.length) {
                currPossibleLocation = "/" + usableLocation.join("/");
                soonestUsableRoute = data[currPossibleLocation];

                if (typeof soonestUsableRoute !== "undefined") {
                    resultValue = soonestUsableRoute[propertyName];
                }

                // Stop the loop if no upwards search needed, or already find the result value
                if(!upwardSearch || resultValue) {
                    break;
                }

                usableLocation.pop();
            }
        } catch (err) {
            console.error("Something went wrong determining the CLRP Popup Info");
            return {};
        }

        return resultValue;
    }

    /**
     * Get the disclaimer text
     * @param {Object} disclaimers The Object container the disclaimers with localization data
     * @param {String} location The location code to use to discern disclaimer
     * @param {String} language The language code to use to discern disclaimer
     * @param {String} role The role code to use to discern disclaimer
     * @returns {String} Text of the disclaimer
     */
    function getDisclaimers(disclaimers, location, language, role) {
        if (!disclaimers) throw new Error("Must provide a Disclaimers localization object");
        if (!location) throw new Error("Must provide a location");
        if (!language) throw new Error("Must provide a language");
        if (!role) throw new Error("Must provide a role");

        return getUsableValue(disclaimers, {
            location: location,
            language: language,
            role: role
        }, "clrDisclaimerText", false);
    }

    /**
     * Get the disclaimer text
     * @param {Object} disclaimers The Object container the disclaimers with localization data
     * @param {String} location The location code to use to discern disclaimer
     * @param {String} language The language code to use to discern disclaimer
     * @returns {String} Text of the disclaimer
     */
    function getInvestorsDisclaimers(disclaimers, language, location) {
        if (!disclaimers) throw new Error("Must provide a Disclaimers localization object");
        if (!location) throw new Error("Must provide a location");
        if (!language) throw new Error("Must provide a language");

        return getUsableValue(disclaimers, {
            location: location,
            language: language
        }, "investorsText", false);
    }

    /**
     * Get the Terms & Conditions URL in this order:
     * 		Look for Terms & Conditions for Country-Language-Role. 
     * 		If Terms & Conditions doesn’t exist for Country-Language-Role, then look for Terms & Conditions in Country-Language. 
     * 		If Terms & Conditions doesn’t exist for Country-Language, look for only Country
     * @param {Localization} i18n The localization Object to get data
     * @param {String} location The location code to use to discern Terms & Conditions
     * @param {String} language The language code to use to discern Terms & Conditions
     * @param {String} role The role code to use to discern Terms & Conditions
     * @returns {String} Terms & Conditions URL
     */
    function getTermsAndConditionsURL(disclaimers, location, language, role) {
        if (!disclaimers) throw new Error("Must provide a Disclaimers localization object");
        if (!location) throw new Error("Must provide a location");

        return getUsableValue(disclaimers, {
            location: location,
            language: language,
            role: role
        }, "clrTermsURL", true);
    }
    /**
     * Get the Privacy And Cookie Policy URL
     * 		Look for Privacy And Cookie Policy for Country-Language-Role. 
     * 		If Privacy And Cookie Policy doesn’t exist for Country-Language-Role, then look for Privacy And Cookie Policy in Country-Language. 
     * 		If Privacy And Cookie Policy doesn’t exist for Country-Language, look for only Country
     * @param {Localization} i18n The localization Object to get data
     * @param {String} location The location code to use to discern Privacy And Cookie Policy
     * @param {String} language The language code to use to discern Privacy And Cookie Policy
     * @param {String} role The role code to use to discern Privacy And Cookie Policy
     * @returns {String} Privacy And Cookie Policy URL
     */
    function getPrivacyPolicyURL(disclaimers, location, language, role) {
        if (!disclaimers) throw new Error("Must provide a Disclaimers localization object");
        if (!location) throw new Error("Must provide a location");

        return getUsableValue(disclaimers, {
            location: location,
            language: language,
            role: role
        }, "clrPrivacyURL", true);
    }
    /**
     * Get the Prospectuses & ETF Information URL
     * 		Look for Prospectuses & ETF Information for Country-Language. 
     * @param {Localization} disclaimers The Object container the disclaimers with localization data
     * @param {String} location The location code to use to discern Prospectuses & ETF Information URL
     * @param {String} language The language code to use to discern Prospectuses & ETF Information URL
     * @returns {String} Prospectuses & ETF Information URL
     */
    function getInvestorsURL(disclaimers, location, language) {
        if (!disclaimers) throw new Error("Must provide a Disclaimers localization object");
        if (!location) throw new Error("Must provide a location");
        if (!language) throw new Error("Must provide a location");

        return getUsableValue(disclaimers, {
            location: location,
            language: language
        }, "investorsURL", false);
    }
    /**
     * Get available products for a CLR configuration
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} expectedLanguage The language to localize the locations in
     * @param {String} location The location code to use to discern disclaimer
     * @param {String} role The role code to use to discern disclaimer
     * @returns {ProductTuple[]} Collection of possible products
     */
    function getProducts(i18n, expectedLanguage, location, role) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!expectedLanguage) throw new Error("Must provide a language to localize to");
        if (!location) throw new Error("Must provide a location");
        if (!role) throw new Error("Must provide a role");

        var productsObject = {},
            products = [],
            langLabel = "",
            roleObject = {};

        try {
            $.each(i18n["countries"][location]["languages"], function(langKey, langObj){
                langLabel = langObj[expectedLanguage + "-name"];
                roleObject = langObj["roles"][role] || {};
                $.each(roleObject["products"], function(productKey, productObj){
                    if(!productsObject[productKey]) {
                        productsObject[productKey] = [];
                    }
                    productsObject[productKey].push({
                        lang: langKey,
                        langLabel: langLabel,
                        label: productObj.name,
                        value: productKey,
                        path: productObj.path,
                        redirectTarget: productObj.redirectTarget
                    });
                });
            });

            $.each(productsObject, function(productKey, productArr){
                products = products.concat(productArr);
            });
        } catch (e) {
            console.warn(e.message);
            return products;
        }

        return products;
    }

    function getAnonymousLink(i18n, location) {
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!location) throw new Error("Must provide a location");

        var countryObject = i18n["countries"][location];
        if (!countryObject) throw new Error("No such country object");

        var anonLinkObject = {};
        anonLinkObject.anonymousLinkPath = i18n["countries"][location]["anonymousLinkPath"];
        anonLinkObject.anonymousLinkType = i18n["countries"][location]["anonymousLinkType"];

        return anonLinkObject;
    }

    /**
     * Check whether country + language exists.
     * @param {Localization} i18n The localization Object to get data from
     * @param {String} language The language to localize the locations in
     * @param {String} location The location code to use to discern disclaimer
     * @returns {ret} exist or not.
     */
    function verifyDefaultCountryLanguage(i18n, language, location){
        if (!i18n) throw new Error("Must provide a Localization object");
        if (!language || !location) {
            return false;
        }

        var countryObject = i18n["countries"][location];
        var ret = false;

        if (countryObject && countryObject.languages.hasOwnProperty(language)) {
            ret = true;
        }
        return ret;
    }

    return {
        getLabels: getLabels,
        getDefaultLanguage: getDefaultLanguage,
        getLocations: getLocations,
        getLanguages: getLanguages,
        getRoles: getRoles,
        getDisclaimers: getDisclaimers,
        getInvestorsDisclaimers: getInvestorsDisclaimers,
        getProducts: getProducts,
        getAnonymousLink:getAnonymousLink,
        getTermsAndConditionsURL:getTermsAndConditionsURL,
        getPrivacyPolicyURL:getPrivacyPolicyURL,
        getInvestorsURL: getInvestorsURL,
        getLanguagesByRole: getLanguagesByRole,
        getLanguagesByLocationAndRole: getLanguagesByLocationAndRole,
        verifyDefaultCountryLanguage: verifyDefaultCountryLanguage,
        getRolesByLocation: getRolesByLocation,
        getUsableValue: getUsableValue
    };
}(window.jQuery));

window["ssmp-js-header"] = (function($, ssmp) {
    "use strict";

    var modalPages = {
        nav: ".ssmp-modal__navigation-page"
    };

    /**
    * Link used to populate header to allow for navigation
    * @typedef {Object} SpecialLink
    * @property {String} contactUsLinkPath The href the anchor should use
    * @property {String} contactUsTab The target the anchor should use
    * @property {String} contactUsLabel The inner text the anchor should use
    */
    function renderSpecialLinks(linkObjectToUse) {
        // Populate the header contact us links
        var contactUsLabel = linkObjectToUse.contactUsLabel,
            contactUsLinkPath = linkObjectToUse.contactUsLinkPath;
        
        
        var hasActionLinks = false;
        // Populate the header Client Login link
        var clientLoginLabel = linkObjectToUse.clientLoginLabel,
            clientLoginLinkPath = linkObjectToUse.clientLoginLinkPath;
        if (clientLoginLabel && clientLoginLinkPath) {
            hasActionLinks = true;

            $(".ssmp-header .ssmp-header__actions ul,.ssmp-mobile-header .ssmp-mobile-header__actions ul")
                .append($("<li></li>", {
                    "class": "cmp-list__item clientLogin",
                    html: $("<a></a>", {
                        "class": "cmp-list__item-link",
                        href: clientLoginLinkPath,
                        target: "_blank",
                        text: clientLoginLabel,
                        on: {
                            click: function (e) {
                                e.preventDefault();
                                var self = $(this);
                                updateClientLoginLink(function () {
                                    window.open(self.attr("href"), '_blank');
                                });
                            }
                        }
                    })
                }));
            updateClientLoginLink();
        }

        // Populate the header general action links, e.g. My Funds link, Access Acount Login.
        /*var generalActionLinks = ["ssgaFund", "accountAccess"];
        $.each(generalActionLinks, function (i, item) {
            var linkLabel = linkObjectToUse[item + "Label"],
                linkPath = linkObjectToUse[item + "LinkPath"],
                linkTab = linkObjectToUse[item + "Tab"];
            if (linkLabel && linkPath) {
                hasActionLinks = true;
                $(".ssmp-header .ssmp-header__actions ul,.ssmp-mobile-header .ssmp-mobile-header__actions ul")
                    .append($("<li></li>", {
                        "class": "cmp-list__item",
                        html: $("<a></a>", {
                            "class": "cmp-list__item-link",
                            href: linkPath,
                            target: linkTab,
                            text: linkLabel
                        })
                    }));
            }
        });*/

        if (hasActionLinks) {
            $(".ssmp-mobile-header .ssmp-mobile-header__actions ul").addClass("has-action-links");
        }
        if(contactUsLabel && contactUsLinkPath && hasActionLinks){
            $(".ssmp-mobile-header .cmp-list__item.contact-us").appendTo(".ssmp-mobile-header .ssmp-mobile-header__actions ul")
        }

        // Populate the state street link in the footer.
        // The copyright text syntax would include %%StateStreet%%, here %% indicate the the StateStreet is a link
        // and should have the link design.
        var copyrightText = $(".ssmp-footer__copyright").text();
        var copyrightTextList = copyrightText.split("%%");
        var copyrightLinkhtml = "";
        if (copyrightTextList[1] != undefined) {
            copyrightLinkhtml = " <a class='ssmp-footer__disclosures__link__state-street' target='_blank' href='"
                + linkObjectToUse.stateStreetLink + "'>"
                + (linkObjectToUse.stateStreetLabel || copyrightTextList[1])
                + "</a>" + copyrightTextList[2];
        }
        $(".ssmp-footer__copyright").html(copyrightTextList[0] + " " + copyrightLinkhtml);

        renderFooterDisclosure(linkObjectToUse);
        
        renderFooterTopLinks(linkObjectToUse);

        $(".ssmp-footer a").each(function () {
            var href = $(this).attr("href");
            if (ssmp.hasExternalURLHost(href)) {
                $(this).attr("rel", "noopener");
            }
        });

        ssmp.addClickAttrForAA($(".ssmp-header__global-nav, .ssmp-footer, .ssmp-mobile-header__bottom"));        
    }

    // Populate the disclosures links in the footer
    /* Hu, Gongda 2022-03-16 */
    function renderFooterDisclosure(linkObjectToUse) {
        var disclosuresLinks = 
        [{
            label: linkObjectToUse.privacyLabel,
            link: linkObjectToUse.privacyLink
        }, {
            label: linkObjectToUse.cookieLabel,
            type: "cookieSettings"
        }, {
            label: linkObjectToUse.termsLabel,
            link: linkObjectToUse.termsLink
        }, {
            label: linkObjectToUse.legalLabel,
            link: linkObjectToUse.legalLink
        }];
        for (var i = 1; i <= 5; i++) {
            disclosuresLinks.push({
                label: linkObjectToUse["footerLink" + i + "Label"],
                link: linkObjectToUse["footerLink" + i + "Reference"]
            });
        }
        disclosuresLinks.push({
            label: linkObjectToUse.sitemapLabel,
            link: linkObjectToUse.sitemapLink
        });
        var disclosuresLinksHtml = "";
        $.each(disclosuresLinks, function (a, linkObj) {
            if(linkObj.type === "cookieSettings" && linkObj.label){
                disclosuresLinksHtml += "<a class='ssmp-footer__disclosures__link btn-cookie-settins' target='_blank' href='#'>" + linkObj.label + "</a>";
            }else if(linkObj.label && linkObj.link) {
                disclosuresLinksHtml += "<a class='ssmp-footer__disclosures__link' target='_blank' href='" + linkObj.link + ".html'>" + linkObj.label + "</a>";
            }
        });
        if (disclosuresLinksHtml) {
            $(".ssmp-footer__disclosures").html(disclosuresLinksHtml).show();
        }
        
        $(".ssmp-footer__disclosures .btn-cookie-settins").click(function(e){
            e.preventDefault();
            if(ssmp.isOneTrustFailed()){
                ssmp.modal.showModal("#ssmp-cookie-error-modal");
            }else if(typeof OneTrust !== "undefined" && OneTrust){
                OneTrust.ToggleInfoDisplay();
            }
        });
        var stateStreetCopyrightHtml = "";
        if (linkObjectToUse.stateStreetCopyright) {
            var sscContent = linkObjectToUse.stateStreetCopyright;
            var startIndex = sscContent.indexOf(" ", 2) + 1;
            var endIndex = sscContent.indexOf(".");
            if(endIndex == -1) {
                endIndex = sscContent.indexOf("。");
            }
            stateStreetCopyrightHtml = sscContent.slice(0, startIndex) + "<a class='ssmp-footer__disclosures__link__state-street' target='_blank' href='http://www.statestreet.com'>"+sscContent.slice(startIndex, endIndex) +"</a>" + sscContent.slice(endIndex, sscContent.length);
            //stateStreetCopyrightHtml = linkObjectToUse.stateStreetCopyright.replace("State Street Corporation","<a class='ssmp-footer__disclosures__link__state-street' target='_blank' href='http://www.statestreet.com'>State Street Corporation</a>");
            
            $(".ssmp-footer__copyright").html(stateStreetCopyrightHtml).show();
        } else{
            stateStreetCopyrightHtml = "© 2022 <a class='ssmp-footer__disclosures__link__state-street' target='_blank' href='http://www.statestreet.com'>State Street Corporation</a>. All rights reserved.</div>";
            $(".ssmp-footer__copyright").html(stateStreetCopyrightHtml).show();
        }
        if (linkObjectToUse.disclaimerText) {
            $(".cmp-text--banner").html(linkObjectToUse.disclaimerText).show();
            $(".ssmp-form-checkbox__description").html(linkObjectToUse.leaddisclaimerText).show();
        }     
    }

    //Populate the contact us section in the footer, including the social media links
    /* Hu, Gongda 2022-03-16 */
    function renderFooterTopLinks(linkObjectToUse) {
        var footerTopLinks = [{
            label: linkObjectToUse.contactUsLabel,
            link: linkObjectToUse.contactUsLinkPath
        }];
        for (var j = 1; j <= 4; j++) {
            footerTopLinks.push({
                label: linkObjectToUse["footerTopLink" + j + "Label"],
                link: linkObjectToUse["footerTopLink" + j + "Reference"]
            })
        }
        var footerTopLinksHtml = "";
        $.each(footerTopLinks, function (i, linkObj) {
            if (linkObj.label && linkObj.link) {
                footerTopLinksHtml += "<a class='ssmp-footer__contact-us__link' target='_blank' href='" + linkObj.link + ".html'>" + linkObj.label + "</a>";
            }
        });
        if (footerTopLinksHtml) {
            $(".ssmp-footer__contact-us__links").html(footerTopLinksHtml).show();
        }

        var $socialMediaSection = $(".ssmp-footer__contact-us__social-media");
        $socialMediaSection
            .find(".ssmp-footer__contact-us__link__linkedin a")
            .attr({
                href: linkObjectToUse.showLinkedInLink == "true" ? linkObjectToUse.footerLinkedInLink : ''
            })
            .end()
            .find(".ssmp-footer__contact-us__link__twitter a")
            .attr({
                href: linkObjectToUse.showTwitterLink == "true" ? linkObjectToUse.footerTwitterLink : ''
            })
            .end()
            .find(".ssmp-footer__contact-us__link__youtube a")
            .attr({
                href: linkObjectToUse.showYouTubeLink == "true" ? linkObjectToUse.footerYouTubeLink : ''
            })
            .end()
            .find(".ssmp-footer__contact-us__link__blog a")
            .attr({
                href: linkObjectToUse.showBlogLink == "true" ? linkObjectToUse.footerBlogLink : ''
            })
            .end();

        $socialMediaSection.find("a").filter("[href='']").closest("span").remove();
        if ($socialMediaSection.find("a").length > 0) {
            $socialMediaSection.show();
        }

        var $contactUsSection = $(".ssmp-footer__contact-us");
        if ($contactUsSection.children(":visible").length <= 0) {
            $contactUsSection.hide();
        }
    }

    /**
     * Load the special links data and populate the header and mobile header with the correct anchor
     * @param {Object/string} pageInfo CLRP or Current page URL
     */
     function populateSpecialLinks(pageInfo) {
        var linkObjectToUse = pageInfo;
        if (!linkObjectToUse) {
            console.warn("Unable to get special links");
            return;
        }
        renderSpecialLinks(linkObjectToUse);
    }

    function updateClientLoginLink(callback){
        //Display Dashboard link if user has logged in.

        ssmp.getCookies(["isAltUser", "altLoginUserName"]).then(function(xhr) {
            var isAltUser = xhr["isAltUser"];
            var altLoginUserName = xhr["altLoginUserName"];
            if ((isAltUser == "false") || (isAltUser == "true" && altLoginUserName)){
                $(".ssmp-header .ssmp-header__actions ul,.ssmp-mobile-header .ssmp-mobile-header__actions ul")
                .find(".cmp-list__item.clientLogin .cmp-list__item-link").attr("href", "/secure/dashboard.html");
            }
            if(callback){
                callback();
            }
        })
        
    }

    /**
     * Function to set menu event info for AA
     * @param {object} $obj jquery object of the link element
     * @param {string} menuPosition menu position of the link element
     */
    function setMenuEventForAA($obj, menuPosition) {
        $obj.attr("event-info", true);
        var attr = {
            eventInfo: {
                linkType: "Nav Menu",
                eventName: "Nav Menu"
            },
            attributes: {
                linkName: $.trim($obj.text()),
                linkPosition: $.trim(menuPosition),
                linkUrl: ssmp.getLinkUrlForAA($obj)
            }
        }
        window.digitalData.event.push(attr);
    }

    function initMenu(dataParams, callback) {
        if(!dataParams) {
            dataParams = {};
        }
        $.ajax({
            type: "GET",
            //url: "/bin/v1/" + ssmp.SITE + "/navbar", 
            url: "/bin/stt/navbar", 
            data: dataParams,
            dataType: "json"
        }).done(function(res){
            renderNav(res);
            if(typeof callback === "function") {
                callback();
            }
        });
    }

    function renderNav(data) {
        var subNavHTML = '',
        l1Item = $('.navigation-container .cmp-navigation__group').find('.cmp-navigation__item');

        $.each(data, function(i, val) {
            var panelHtml = '',
                hasChild = Boolean(val.primaryLinkUrl || (val.children.length > 0 && val.children) || (val.featureChildren && val.featureChildren.length > 0));
            if(hasChild) {
                panelHtml = renderPanel(val);
            }else {
                panelHtml = '<div class="nav-sub-panel  aem-Grid aem-Grid--12"></div>';
            }

            l1Item.each(function() {
                if(val.key == $(this).attr('data-key')) {
                    subNavHTML += panelHtml;
                }
            });
        });
        $('.ssmp-header__site-nav .nav-sub-panel-container').html(subNavHTML);

        //render mobile html
        var menuItem = $(".ssmp-mobile-header__pages .cmp-navigation__group").find("li");
        $.each(menuItem, function(index, val) {
            var subPanelHtml = $(subNavHTML)[index];
            $(val).append(subPanelHtml);
        });
        bindMenuClickForAA();
    }

    function bindMenuClickForAA() {
        $(".cmp-navigation").on("click", "a.cmp-navigation__item-link", function(){
            setMenuEventForAA($(this), $(this).text());
        }).on("click", "a.cmp-navigation__item-text", function(){
            return false;
        }).on("click", ".nav-sub-panel a", function(){
            var menuPosition = $(this).closest(".nav-sub-panel").find(".nav-sub-title").text();
            setMenuEventForAA($(this), menuPosition);
        });

        $("a.cmp-navigation__item-link, .nav-sub-panel a").attr({"aa-global-navclicks": "", "data-aa-checked": "true"});
    }

    function renderPanel(val) {
        var navItemHtml = '';
        navItemHtml += '<div class="nav-sub-panel aem-Grid aem-Grid--12">';
        if(val.primaryLinkLabel){
            navItemHtml += subTitle(val.primaryLinkLabel, val.primaryLinkUrl, val.openPrimaryLinkInNewTab ? "_blank":"_self"); 
        }

        // each column data integration
        var columnItem = [],
            hasColumn1 = false,
            hasColumn2 = false, 
            hasColumn22 = false, 
            hasColumn3 = false,
            column1Data={
                label: val.columnLabel1,
                children: val.children,
                id: 1,
                showViewAll: val.showViewAll,
                viewAllText: val.viewAllText,
                viewAllUrl: val.viewAllUrl,
                hasId0: true
            },
            column2Data={
                label: val.columnLabel2,
                children: val.children,
                id: 2,
                showViewAll: val.showViewAll2,
                viewAllText: val.viewAllText2,
                viewAllUrl: val.viewAllUrl2,
                hasId0: false
            },
            column3Data={
                label: val.columnLabel22,
                children: val.children,
                id: 22,
                showViewAll: val.showViewAll22,
                viewAllText: val.viewAllText22,
                viewAllUrl: val.viewAllUrl22,
                hasId0: false
            },
            column4Data={
                label: val.columnLabel3,
                children: val.children,
                id: 3,
                showViewAll: val.showViewAll3,
                viewAllText: val.viewAllText3,
                viewAllUrl: val.viewAllUrl3,
                hasId0: false
            };
        for(var j = 0, len = val.children.length; j < len; j++) {
            hasColumn1 = hasColumn(val.children[j].columnId, 0, hasColumn1);
            hasColumn1 = hasColumn(val.children[j].columnId, 1, hasColumn1);
            hasColumn2 = hasColumn(val.children[j].columnId, 2, hasColumn2);
            hasColumn22 = hasColumn(val.children[j].columnId, 22, hasColumn22);
            hasColumn3 = hasColumn(val.children[j].columnId, 3, hasColumn3);
        }
        if(hasColumn1) {columnItem.push(newColumn(column1Data));}
        if(hasColumn2) {columnItem.push(newColumn(column2Data));}
        if(hasColumn22) {columnItem.push(newColumn(column3Data));}
        if(hasColumn3 && !(val.primaryLinkUrl && val.primaryLinkLabel && val.subMenuNum == 4)){
            columnItem.push(newColumn(column4Data))
        }
        if(val.isFeatureColumnActive && val.featureChildren && val.featureChildren.length > 0) {
            columnItem.push({
                view: 'feature',
                featured:val.featureChildren
            });
        }
    
        $.each(columnItem, function(a, item) {
            // var feature = (item.view && item.view == 'feature') && 'featured' || '';
            if(item.view == 'feature'){
                navItemHtml += '<div class="aem-GridColumn aem-GridColumn--default--3 aem-GridColumn--tablet--12 aem-GridColumn--phone--12 featured featured-' +item.featured.length+ '">';
            }else{
                navItemHtml += '<div class="aem-GridColumn aem-GridColumn--default--3 aem-GridColumn--tablet--6 aem-GridColumn--phone--12">';
            }
            
            if(!Array.isArray(item)) {
                navItemHtml += '<div class="nav-sub-group">'
                    + subGroupHead(item.label);
                navItemHtml += subGroupNotArr(item);
                navItemHtml += viewAll(item.showViewAll, item.viewAllText, item.viewAllUrl)
                    + '</div>';
            }else {
                navItemHtml += subGroupArr(item);
            }
            navItemHtml += '</div>';
        });
        navItemHtml += '</div>';
        
        return navItemHtml;
    }
    /**
     * Whether the column exist
     * @param {string} columnId The children's columnId
     * @param {string} id The id
     * @param {string} value The hasColumn value
     * @returns {string} The result of column if exist
     */ 
    function hasColumn(columnId, id, value) {
        if(columnId == id) {
            value = true;
        }
        return value;
    }
    function newColumn(columnData) {
        var child = '';
        if(!columnData.hasId0) {
            child = columnData.children.filter(function(item) {
                return item.columnId == columnData.id;
            });
        }else {
            child = columnData.children.filter(function(item) {
                return item.columnId == columnData.id || item.columnId == 0;
            });
        }
        return {
            label: columnData.label,
            children: child,
            showViewAll: columnData.showViewAll,
            viewAllText: columnData.viewAllText,
            viewAllUrl: columnData.viewAllUrl
        }
    }

    /**
     * Set the Sub Title Html
     * @param {string} title The panel title
     * @param {string} link The title link
     * @param {string} target The link target
     * @returns {string} The sub title html
     */
    function subTitle(title, link, target) {
        //L1 external
        if(title) {
            if(target == '_self'){
                return '<div class="nav-sub-title aem-GridColumn aem-GridColumn--default--3 aem-GridColumn--tablet--12 aem-GridColumn--phone--12">'
                        + '<a href="'+link+'" target="'+ target +'">'+ title +'</a></div>';
            }
            if(target == '_blank'){
                return '<div class="nav-sub-title aem-GridColumn aem-GridColumn--default--3 aem-GridColumn--tablet--12 aem-GridColumn--phone--12">'
                       + '<a href="'+link+'" target="'+ target +'">'+ title + '<svg class="ssmpsvg L1titleExternal"><use xlink:href="#Launch_16x16"></use></svg>' + '</a></div>';
            }
            
        }
    }
    /**
     * Set the Sub Group Heading Html
     * @param {string} label The column label
     * @returns {string} The sub group heading Html
     */
    function subGroupHead(label) {
        var subHeading = '';
        if(label) {
            subHeading = '<p class="nav-sub-heading list-heading">' + label + '</p>';
        }
        return subHeading; 
    }
    /**
     * Set the Sub Group UL Html
     * @param {string} item The children value
     * @returns {string} The sub group ul html
     */
    function subGroupUl(item) {
        var html = '';
        html += '<ul>';
        $.each(item, function(i, el) {
            var target = '';
            if(el.isInternal == 'true') {
                target = 'target="_blank"';
            }
            html += '<li>';

            //L1 external
            if(el.isInternal == 'true'){
                html += '<a '+ target +' href="'+ el.URL +'">'+ el.title + '<svg class="ssmpsvg L1linkExternal"><use xlink:href="#Launch_16x16"></use></svg>' + '</a>';
            }else {
                html += '<a '+ target +' href="'+ el.URL +'">'+ el.title +'</a>';
            }

			

            if(el.description && el.ifDescription=='true'){html += '<div>' + el.description + '</div>';}
            if(el.date){html += '<div>' + el.date + '</div>';}

			html += '</li>';
			

        });
        html += '</ul>';
        return html;
    }
    function subGroupNotArr(item) {
        var html = '';
        switch(item.view) {
            case undefined:
            case 'static':
                html += subGroupUl(item.children);
            break;
            case 'feature': 
                $.each(item.featured, function(i, el) {

                    html += '<a class="nav-featured-item" href="'+ el.column3FeatureLink +'">';
                    if(el.column3FeatureImage){
                        html +='<img src="'+ el.column3FeatureImage +'" alt="image load fail" width="900" height="490">';
                    }
                    html += '<div class="nav-featured-right"><p class="eyebrow">'+el.featureTagLabel+'</p>'
                    + '<p class="nav-featured-title">'+ el.column3FeaturePageLabel +'</p></div>'
                    + '</a>';

                    html += '<div>' + el.column3FeatureDescription + '</div>';
                    
                    if(el.column3FeatureShowViewAll){
                        html +=  '<div class="view-all">'+ '<a href="'+ el.column3FeatureViewAllUrl +'">'+ el.column3FeatureViewAllText +'</a>' + '</div>';
                    }
                    
                });
            break;
            default:
            break;
        }
        return html;
    }

    function subGroupArr(item) {
        var html = '';
        for(var i = 0, length = item.length; i < length; i++) {
            if(item[i].children.length > 0) {
                html += '<div class="nav-sub-group">'+ subGroupHead(item[i].label)
                    + subGroupUl(item[i].children) 
                    + viewAll(item[i].showViewAll, item[i].viewAllText, item[i].viewAllUrl)
                    + '</div>';
            }
        }
        return html;
    }
    /**
     * Set the View All Html
     * @param {string} show The value of show view all 
     * @param {string} text The view all text
     * @param {string} url The view all url
     * @returns {string} The view all html
     */
    function viewAll(show, text, url) {
        var viewAllHTML = '';
        if(show) {
            viewAllHTML += '<div class="view-all">'
            + '<a href="'+ url +'">'+ text +'</a>'            
            + '</div>';
        }
        return viewAllHTML;
    }
    /**
     * Set Menu Hover/Click Event
     * @param {string} el menu element
     * @param {string} index menu item index
     */
    function menuHover(el, index) {
        if($(el).find(".cmp-navigation__item-text").length <= 0) {
            $('.cmp-navigation__item').removeClass('active');
            $('.ssmp-header__nav-container').removeClass('active');
            $('.ssmp-header__site-nav .nav-sub-panel-container').slideUp();
            $(".ssmp-header__site-nav .nav-sub-panel-container .nav-sub-panel").hide();
            return;
        }
        $(".ssmp-header__site-nav .ssmp-header__logo").css("position", "relative");
        $(".ssmp-header__site-nav .ssmp-header__logo").css("z-index", "11");
        var subPanel = $(".ssmp-header__site-nav .nav-sub-panel-container").find(".nav-sub-panel")[index];
        $(subPanel).show();
        $(subPanel).siblings().hide();
        $('.ssmp-header__site-nav .nav-sub-panel-container').slideDown();
        $(el).addClass('active');
        $(el).siblings().removeClass('active');
        //$(el).closest(".ssmp-header__nav-container").addClass("active");
        $("#header-navbar").trigger('mouseenter');
        return false;
    }

    function initHeader() {
        var uaInfo = navigator.userAgent,
            isAndroid = /(?:Android)/.test(uaInfo),
            isFireFox = /(?:FireFox)/.test(uaInfo),
            tabletTest1 = isAndroid && !/(?:Mobile)/.test(uaInfo),
            tabletTest2 = isFireFox && /(?:Tablet)/.test(uaInfo),
            isTablet = /(?:iPad|PlayBook)/.test(uaInfo) || tabletTest1 || tabletTest2;
        //Determine if digital exists && function for tracking nav menu click event
        ssmp.isDigitalData("page","pageInfo");
        
        //No navigation
        if($('#header-navbar').length <= 0) {
            $('.ssmp-header__site-nav').addClass('no-nav');
        }
        
        // for ipad horizontal
        if (isTablet) {
            $(".ssmp-header__pages .nav-sub-panel").click(function () {
                $(this).parent().slideUp();
                $('.ssmp-desktop-header .cmp-navigation__group .cmp-navigation__item').removeClass('active');
            });
            $(".homesectioncontainer").on("click",function () {
                $(".nav-sub-panel-container").slideUp();
                $('.ssmp-desktop-header .cmp-navigation__group .cmp-navigation__item').removeClass('active');
            });
        }

        var menus = $('.ssmp-desktop-header .cmp-navigation__group .cmp-navigation__item');

		menus.each(function (index) {
            $(this).mouseenter(function() {
                menuHover(this, index);
            });
            // Accessibility START
			$(this).click(function() {
                var self = this;
                menuHover(this, index);
                var subPanel = $(".ssmp-header__site-nav .nav-sub-panel-container").find(".nav-sub-panel")[index],
                    linkNum = $(subPanel).find('a').length,
                    firstLink = $(subPanel).find('a').eq(0)[0],
                    lastLink = $(subPanel).find('a').eq(linkNum - 1)[0];
                
                $(firstLink).focus();
                $(lastLink).blur(function() {
                    var nextEle = $(self).next()[0];
                    if($(nextEle).find('a').length > 0) {
                        nextEle = $(nextEle).find('a')[0];
                    }
                    $(nextEle).focus();
                    $("#header-navbar").trigger('mouseleave');
                });
            });
            // Accessibility END 
		});

		$('#header-navbar').mouseleave(function () {
            $('.ssmp-header__nav-container').removeClass('active');
            $('.cmp-navigation__item').removeClass('active');
            $('.ssmp-header__site-nav .nav-sub-panel-container').slideUp()
            .promise()
            .then(function() {
                $(".ssmp-header__site-nav .ssmp-header__logo").css("position", "unset");
                $(".ssmp-header__site-nav .ssmp-header__logo").css("z-index", "unset");
            });
		});
		
		//Mobile Menu
        $(".ssmp-mobile-header__pages .cmp-navigation__group .cmp-navigation__item").click(function () {
            if ($(this).find(".cmp-navigation__item-text").length > 0) {
                $(this).find(".nav-sub-panel").slideToggle();
                $(this).toggleClass("open");
                $(this).siblings().find(".nav-sub-panel").slideUp();
                $(this).siblings().removeClass("open");
            }
        });
		$(".ssmp-mobile-header__pages .nav-sub-panel-container").remove();

        headerMobileNoNav();
        setFundDetailHeader();

        //track clicks on logo for AA
        $(".ssmp-header__logo").click(function () {
            var $logoLink = $(this).find("a");
            if($logoLink.length > 0){
                $logoLink.attr("event-info",true);
                window.digitalData.event.push({
                    eventInfo: {
                        linkType: "SSGA Logo",
                        eventName: "SSGA Logo"
                    },
                    attributes : {
                        linkName: "SSGA Logo",
                        linkPosition: "Header",
                        linkUrl: ssmp.getLinkUrlForAA($logoLink)
                    }
                });
            }
        })
	}

    function onHamburgerOpenButtonClick(e) {
        e.stopPropagation();
        ssmp.modal.showModal(".ssmp-mobile-header");
    }

    function onHamburgerCloseButtonClick(e) {
        e.stopPropagation();
        ssmp.modal.hideModal(".ssmp-mobile-header");
    }

    function headerMobileNoNav() {
        // Hide hamburfer menu button if no nav item
        if($("#header").hasClass("ssmp-desktop-header--minimal") && $("#header-navbar").length <= 0 && $("#header .ssmp-header__site-nav .ssmp-header__actions").children.length <= 0){
            $("#header button.ssmp-header__hamburger-open").hide();
        }else {
            $("#header button.ssmp-header__hamburger-open")
            .on("click", onHamburgerOpenButtonClick);

            $("button.ssmp-header__hamburger-close")
                .on("click", onHamburgerCloseButtonClick);
        }

        // Move mobile header to body and out from header
        $(".ssmp-mobile-header")
            .not("[data-mobile-header-processed='true']")
            .appendTo($("body"))
            .attr("data-mobile-header-processed", true);

        $(modalPages.nav).css("display", "flex");
    }

    function showComps() {
        var windowTop = $(window).scrollTop();
        if (windowTop > 90) {
            $(".header").addClass("sticky-top");
        } else {
            $(".header").removeClass("sticky-top");
        }
        //remove by xin 8/19/2022 due to sscommon sprint54
        /*if(!ssmpModernizr.csspositionsticky) {
            if($(".header").hasClass("sticky-top")){
                $(".ssmp-header__container").addClass("fixed");
                $(".header").css("margin-bottom","0");
            }else{
                $(".ssmp-header__container").removeClass("fixed");
            }
        }*/
        if($(".homepage-template").length > 0){
            var windowHeight = window.innerHeight;
            var scrollBottomPos = $(document).scrollTop() + windowHeight;
            var scrollBottomTrigger = scrollBottomPos - 100;

            var comps = $(".root > .aem-Grid .responsivegrid.aem-GridColumn > div > div").not(".showUp");
            comps.each(function(i){
                var comp = $(comps[i]),
                    compPos = comp.offset().top - 100;
                if(scrollBottomTrigger >= compPos) {
                    //Remove transform/transition when the transition is ended to avoid the impact on the position absolute/fixed elements.
                    comp.one("transitionend", function(){
                        comp.addClass("no-transform no-transition");
                    });
                    comp.addClass('showUp');
                }
            });
        }
    }

    function setFundDetailHeader() {
        if($(".fund-detail-page").length === 0 
            && $('.ssmp-page').find('.fund-finder-comp').length === 0 
            && $('.ssmp-page').find('.doc-viewer').length === 0){
            showComps();

            $(window).scroll(function () {
                showComps();
                if ($(".header").hasClass("sticky-top")) {
                    $(".ssmp-header__pages").addClass("aem-GridColumn--default--6");
                } else {
                    $(".ssmp-header__pages").removeClass("aem-GridColumn--default--6");
                }
            });
        }
    }


    ssmp.initMenu = initMenu;
    ssmp.initHeader = initHeader;
    ssmp.populateSpecialLinks = populateSpecialLinks;

    return ssmp; 
}(window.jQuery, window["ssmp-js-core"]));
(function($, ssmp, clrView, clr, ssmpHeader) {
    var modalPages = {
        nav: ".ssmp-modal__navigation-page",
        clr: ".ssmp-modal__self-identifier-page" 
    };

    function onCLRChangeableClick(e) {
        var $this = $(this);
        var label = $this.find(".ssmp-header__clr-item-label");
        var popover = $this.find(".ssmp-header__clr-change-popover");
        e.stopPropagation();

        // If this popover is visible
        if ($this.hasClass("vis")) {
            var labelEl = label.get(0);
            // If we click on the label
            if (labelEl === e.target || $.contains(labelEl, e.target)) {
                // Close the popover
                $this.removeClass("vis");
                popover.fadeOut(ssmp.FADE_DURATION);
            }
            return;
        }

        // Hide the other changeables
        $this
            .siblings(".ssmp-header__clr-item--changeable")
            .removeClass("vis")
            .find(".ssmp-header__clr-change-popover")
            .fadeOut(ssmp.FADE_DURATION);

        $this.addClass("vis");

        popover.fadeIn(ssmp.FADE_DURATION);

        $("body").one("click", function() {
            $this.removeClass("vis");
            popover.fadeOut(ssmp.FADE_DURATION);
        });

        return false;
    }
    
    // Below function is handler on click of product/language dropdown. The URL
    // is restructured based on presence of L1 or deep child nodes in the URL.
    function languageChangeHandler(languageChangedIs, productChangedIs) {
        var currentRoleIs = ssmp.getPageRole(),
            currentCountryIs = ssmp.getPageLocation(),
            pageUrl = window.location.href,
            pageParsedAddress = ssmp.parseSSMPWebAddress(pageUrl),
            newUrl = "";
        
        ssmp.setCookieUpdateStatus(ssmp.CLRP_UPDATED_FOR_REPEAT_VISITOR);

        newUrl = [
            currentCountryIs,
            languageChangedIs,
            currentRoleIs,
            productChangedIs
        ].concat(pageParsedAddress.pathRemainder)
            .filter(function (part) { return !!part })
            .join("/");

        if (ssmp.isAuthorMode()) {
            newUrl = "content/" + ssmp.SITE + "/" + newUrl + ".html";
        }

        newUrl = "/" + newUrl + pageParsedAddress.search;

        window.location.href = newUrl;
    }

    /**
     * Utility function to map collection of tuples while considering an "active" tuple
     * @param {Tuple[]} tuples Tuples to map to HTML elements
     * @param {String} [activeValue] The value by which to consider a tuple "active"
     * @returns {jQuery[]} Collection of elements that the tuples were mapped to
     */
    function mapTuplesToPopover(tuples, isAccordion, activeValue) {
        return tuples.map(function(tuple) {
            // See if this tuple should be considered "active"
            var itemClass = "",
                linkClass = "";
            if(isAccordion) {
                itemClass = "ssmp-mobile-header__accordion-item";
                linkClass = "ssmp-mobile-header__accordion-item-link";
            }else {
                itemClass = "ssmp-header__clr-change-popover__item";
                linkClass = "ssmp-header__clr-change-popover__item-link";
            }

            if(tuple.value === activeValue) {
                itemClass = itemClass + " active";
            }

            // Map the tuple to an element
            if(tuple.path){
                return $("<li></li>", {
                    "class": itemClass,
                    on: {
                        click: function(e) {
                            e.preventDefault();
                            if(tuple.path.indexOf('http')==0){
                                window.open( tuple.path);
                                return;

                            }
                            var languageChangedIs=$(this).attr("data-language");
                            var productChangedIs=$(this).attr("data-product");
                            languageChangeHandler(languageChangedIs,productChangedIs);
                        }
                    },
                    html: $("<a></a>", {
                        "class": linkClass,
                        href: "#",
                        text: tuple.label
                    }),
                    "data-language":tuple.cookieChanges.language,
                    "data-product":  tuple.cookieChanges.product
                });
        	}
        });
    }

    function populateHeaderCLR(location, language, role, product) {
        ssmp.loadCLRPData()
            .then(function (i18n) {
                var locations = [];
                var languages = [];
                var roles = [];
                var products = [];
                var clrLabels = {};

                locations = clr.getLocations(i18n, language);
                languages = clr.getLanguages(i18n, language, location, role);
                roles = clr.getRoles(i18n, language, location);
                products = clr.getProducts(i18n, language, location, role);
                clrLabels = clr.getLabels(i18n, language);

                var currentLocalizedLocation = "";
                var currentLocalizedLanguage = "";
                var currentLocalizedRole = "";
                var currentLocalizedProduct = "";

                try {
                    currentLocalizedLocation = ssmp.arrFind(locations, function(el) {
                        return el.value === location;
                    }).label;
                } catch (e) {
                    console.warn("Could not get localized current location");
                }
                try {
                    currentLocalizedLanguage = ssmp.arrFind(languages, function(el) {
                        return el.value === language;
                    }).label;
                } catch (e) {
                    console.warn("Could not get localized current language");
                }
                try {
                    if (role) {
                        currentLocalizedRole = ssmp.arrFind(roles, function(el) {
                            return el.value === role;
                        }).label;
                    }
                } catch (e) {
                    console.warn("Could not get localized current role");
                }
                try {
                    if (product) {
                        currentLocalizedProduct = ssmp.arrFind(products, function(el) {
                            return el.value === product && el.lang === language;
                        }).label;
                    }
                } catch (e) {
                    console.warn("Could not get localized current product");
                }

                // Add specific properties to products
                var augmentedLanguages = [],
                    augmentedProducts = [],
                    tempProducts = {};
                $.each(products, function(i, prodItem){
                    if(prodItem.value === product && prodItem.path) {
                        augmentedLanguages.push({
                            label: prodItem.langLabel,
                            value: prodItem.lang,
                            path: prodItem.path,
                            cookieChanges: {
                                location: location,
                                language: prodItem.lang,
                                role: role,
                                product: product
                            }
                        });
                    }
                    if(!tempProducts[prodItem.value]){
                        tempProducts[prodItem.value] = prodItem;
                    }
                    if(prodItem.lang === language){
                        tempProducts[prodItem.value] = prodItem;
                    }
                });

                $.each(tempProducts, function(k, prodItem){
                    augmentedProducts.push(
                        $.extend({}, prodItem, {
                            cookieChanges: {
                                location: location,
                                language: prodItem.lang,
                                role: role,
                                product: prodItem.value
                            }
                        })
                    );
                });

                // Populate the Desktop Header CLR
                $(".ssmp-header__clr")
                    .attr({
                        "data-ssmp-has-multiple-locations": (locations.length > 1),
                        "data-ssmp-has-multiple-languages": (augmentedLanguages.length > 1),
                        "data-ssmp-has-multiple-roles": (roles.length > 1),
                        "data-ssmp-has-multiple-products": (augmentedProducts.length > 1)
                    })
                    .find(".ssmp-header__clr-change-site-label-text")
                        .text(clrLabels["clrChangeSiteText"])
                    .end()
                    .find(".ssmp-header__clr-change-lang-label-text")
                        .text(clrLabels["clrChangeLanguageText"])
                    .end()
                    .find(".ssmp-header__clr-product")
                        .find(".ssmp-header__clr-item-label .ssmp-header__clr-item-label-text")
                            .text(currentLocalizedProduct)
                        .end()
                    .end()
                    .find(".ssmp-header__clr-language")
                        .addClass(augmentedLanguages.length > 1 ? "ssmp-header__clr-item--changeable" : "")
                        .find(".ssmp-header__clr-item-label .ssmp-header__clr-item-label-text")
                            .text(currentLocalizedLanguage)
                        .end()
                        .find(".ssmp-header__clr-change-popover .ssmp-header__clr-change-popover__group")
                            .append(mapTuplesToPopover(augmentedLanguages, false, language))
                        .end()
                    .end()
                    .find(".ssmp-header__clr-country-role .ssmp-header__clr-country-text")
                        .text(currentLocalizedLocation)
                    .end()
                    .find(".ssmp-header__clr-country-role .ssmp-header__clr-role-text")
                        .text(currentLocalizedRole)
                    .end();
            
                //Populate Product List
                if(augmentedProducts.length > 1) {
                    $(".ssmp-header__clr")
                    .find(".ssmp-header__clr-product")
                        .addClass("ssmp-header__clr-item--changeable")
                        .find(".ssmp-header__clr-change-popover .ssmp-header__clr-change-popover__group")
                            .append(mapTuplesToPopover(augmentedProducts, false, product))
                        .end()
                    .end();
                }

                // Populate Mobile Header
                $(".ssmp-mobile-header")
                    .attr({
                        "data-ssmp-has-multiple-locations": (locations.length > 1),
                        "data-ssmp-has-multiple-languages": (augmentedLanguages.length > 1),
                        "data-ssmp-has-multiple-roles": (roles.length > 1),
                        "data-ssmp-has-multiple-products": (augmentedProducts.length > 1)
                    })
                    .find(".ssmp-mobile-header__clr-product")
                        .find(".ssmp-mobile-header__clr-change-site-text")
                            .text(clrLabels["clrChangeSiteText"])
                        .end()
                        .find(".ssmp-accordion__summary .ssmp-accordion__summary-text")
                            .text(currentLocalizedProduct)
                        .end()
                        .find(".ssmp-accordion__body .ssmp-mobile-header__accordion-group")
                            .append(mapTuplesToPopover(augmentedProducts, true, product))
                        .end()
                    .end()
                    .find(".ssmp-mobile-header__clr-language")
                        .find(".ssmp-mobile-header__language-change-text")
                            .text(clrLabels["clrChangeLanguageText"])
                        .end()
                        .find(".ssmp-accordion__summary .ssmp-accordion__summary-text")
                            .text(currentLocalizedLanguage)
                        .end()
                        .find(".ssmp-accordion__body .ssmp-mobile-header__accordion-group")
                            .append(mapTuplesToPopover(augmentedLanguages, true, language))
                        .end()
                    .end()
                    .find(".ssmp-mobile-header__clr-product-label")
                        .text(currentLocalizedProduct)
                    .end()
                    .find(".ssmp-mobile-header__clr-country")
                        .text(currentLocalizedLocation)
                    .end()
                    .find(".ssmp-mobile-header__clr-change-location-role-label-text")
                        .text(clrLabels["clrChangeLocationOrRole"]+":")
                    .end()
                    .find(".ssmp-mobile-header__clr-role")
                        .text(currentLocalizedRole)
                    .end();
            })
            .fail(function(xhr, xhrStatus, err) {
                console.error("There was an error retrieving the localization data: " + err);
            });
    }

    function bindSearchBoxEvents() {
        var MIN_KEYWORD_LENGTH = 2,
            searchXhr= null;
        $(".ssmp-search-box").on("submit", "form", function(e){
            e.preventDefault();
            var $searchBox = $(this).find(".input-keywords"),
                keywords = "";
            keywords = $.trim($searchBox.val());
            keywords = keywords.replace(/[<>']/ig, " ");
            if(keywords.length >= MIN_KEYWORD_LENGTH){
                window.location.href = $(this).attr("action") + "?q=" + encodeURIComponent(keywords);
            }
        }).on("keyup", ".input-keywords", function(){
            var keywords = $.trim($(this).val()),
                $suggest = $(this).closest("form").find(".suggestion");
            keywords = keywords.replace(/[<>']/ig, " ");

            if($(this).closest(".ssmp-mobile-header__search").length > 0){
                if(keywords.length > 0){
                    $(this).siblings(".clear-search-box").show();
                    $(this).siblings(".ssmpsvg.icon_search").hide();
                }else {
                    $(this).siblings(".clear-search-box").hide();
                    $(this).siblings(".ssmpsvg.icon_search").show();
                }
            }
            
            if(keywords.length >= MIN_KEYWORD_LENGTH){
                searchXhr = suggestBox(searchXhr, keywords, $suggest);
            }else if($(this).closest(".ssmp-mobile-header__search").length > 0){
                $suggest.slideUp();
            }else{
                $suggest.hide();
            }
        }).on("click", ".ssmp-more-results .ssmp-ctalink__link", function(e){
            e.preventDefault();
            $(this).closest("form").submit();
        }).on("click", ".clear-search-box", function(e){
            e.preventDefault();
            $(this).siblings(".input-keywords").val("");
            $(this).closest(".search-box").removeClass("search-box-visible");
            if($(this).closest(".mobile-search-box").length > 0 || $(this).closest(".ssmp-mobile-header__search").length > 0){
                $(this).siblings(".input-keywords").focus();
            }
            if($(this).closest(".ssmp-mobile-header__search").length > 0){
                $(this).closest("form").find(".suggestion").slideUp();
                $(this).hide();
                $(this).siblings(".ssmpsvg.icon_search").show();
            }else{
                $(this).closest("form").find(".suggestion").hide();

            }
        }).on("click", ".search-box .btn-search", function(e){
            e.preventDefault();
            $(this).closest(".search-box").addClass("search-box-visible");
            $(this).siblings(".input-keywords").val("").focus();
        })

        $("body").on("click", function(e){
            var $target = e.target;
            if($(".ssmp-search-box").find($target).length <= 0){
                $(".ssmp-search-box .suggestion").hide();
            }
        });
    }

    function suggestBox(searchXhr, keywords, $suggest) {
        if(searchXhr){
            searchXhr.abort();
        }
        return $.ajax({
            url: "/public-api/aem/v2/suggest",
            data: {
                "q": keywords,
                "geoloc": ssmp.getPageLocation() + ":" + ssmp.getPageLanguage(),
                "roleproduct": ssmp.getPageRole() + ":" + ssmp.getPageProduct(),
                "site": ssmp.SITE
            },
            dataType: "json",
            cache: false,
            headers: {
                Authorization: $("#secure-token").val()
            }
        }).done(function(data){
            if(data.status === "success" && data.hits.total > 0){
                var suggestHtml = "";
                $.each(data.suggests, function(i, ele){
                    suggestHtml += "<li><a href='" + ele.link+ "'" + (ele.target ? " target='_blank'" : "") + ">" + ele.title + "</a></li>";
                });
                $suggest.find("ul").html(suggestHtml);
                if(data.hits.total > 5){
                    $suggest.find(".ssmp-more-results").show();
                }else {
                    $suggest.find(".ssmp-more-results").hide();
                }
                if($suggest.closest(".ssmp-mobile-header__search").length > 0){
                    $suggest.slideDown();
                }else{
                    $suggest.show();
                }
                ssmp.addClickAttrForAA($suggest);
            }else if($suggest.closest(".ssmp-mobile-header__search").length > 0){
                $suggest.slideUp();
            }else{
                $suggest.hide();
            }
            
        });
    }

    function onHamburgerOpenButtonClick(e) {
        e.stopPropagation();
        ssmp.modal.showModal(".ssmp-mobile-header");
        if($(".ssmp-mobile-header__clr-product").css("display") == "none") {
            $(".ssmp-mobile-header__clr-product").prev(".ssmp-separator").css("display", "none");
        }
        if($(".ssmp-mobile-header__clr-language").css("display") == "none") {
            $(".ssmp-mobile-header__clr-language").prev(".ssmp-separator").css("display", "none");
        }
    }


    $(function() {
        /*var clrpData = {
            location : ssmp.getPageLocation(),
            language : ssmp.getPageLanguage(),
            role : ssmp.getPageRole(),
            product : ssmp.getPageProduct()
        }, menuClrp = {
            country : ssmp.getPageLocation(),
            language : ssmp.getPageLanguage(),
            role : ssmp.getPageRole(),
            product : ssmp.getPageProduct()
        };*/
        //asset-owner, asset-manager
        var clrpData = {
            location : "us",
            language : "en",
            role : "asset-owner",
            product : ""
        };
        var menuClrp = {
            country : "us",//United States
            language : "es",
            role : "asset-owner",
            product : ""
        };

        
        var sttCookie = getCookie('stt-clr');
        if(sttCookie){
           var clrArray = sttCookie.split(":");
           if(sttCookie.indexOf("undefined") == -1){
                menuClrp={
                    country: clrArray[0],
                    language: clrArray[1],
                    role: clrArray[2],
                    product:""
                };
                clrpData = {
                    location : clrArray[0],
                    language : clrArray[1],
                    role : clrArray[2],
                    product : ""
                };
           }

        }else{
            menuClrp = {
                    country : "United States",
                    language : "es",
                    role : "asset-owner",
                    product : ""
                };
            console.log("clr retrieve failed, please check with developer.");
            clrpData = {
                location : "us",
                language : "en",
                role : "asset-owner",
                product : ""
            };
        }


        if(menuClrp.country || menuClrp.language || menuClrp.role) {
            ssmpHeader.initMenu(menuClrp);
        }
        //ssmpHeader.initMenu();
        ssmpHeader.initHeader();

        // Getting CLRP data for current page
        ssmp.getSpecialLinks()/* Hu, Gongda 2022-06-01 */
        .done(function (specialLinks) {
            var actualSpecialLinks = specialLinks["Special_Links"];
            var specialLinksData = ssmp.getUsableRoute(actualSpecialLinks, clrpData);
            //var specialLinksData = actualSpecialLinks["/content/stt/us"];
            //console.log("getSpecialLinks", specialLinksData);
            if(specialLinksData == undefined || specialLinksData == null) {
                clrpData = {
                    location : "us",
                    language : "en",
                    role : "asset-manager",
                    product : ""
                };
                specialLinksData = ssmp.getUsableRoute(actualSpecialLinks, clrpData);
            } else {
                if(typeof specialLinksData == 'object' && Object.keys(specialLinksData).length == 0){
                    clrpData = {
                        location : "us",
                        language : "en",
                        role : "asset-manager",
                        product : ""
                    };
                    specialLinksData = ssmp.getUsableRoute(actualSpecialLinks, clrpData);
                }                
            }   
            ssmpHeader.populateSpecialLinks(specialLinksData);         
        })
        .fail(function(err) {
            console.error("There was an error retrieving the special links: " + err);
        });

        // Set up event bindings
        /*$("#header .ssmp-header__clr")
            .on("click", ".ssmp-header__clr-item.ssmp-header__clr-item--changeable", onCLRChangeableClick);

        bindSearchBoxEvents();*/

        // Show the CLR modal when we click one of the change buttons
        /*$(".ssmp-header__clr-change-clrp-button").click(function(e) {
            e.preventDefault();
            $(modalPages.nav).css("display", "none");
            $(modalPages.clr).css("display", "flex").data("status", ssmp.CLRP_UPDATED_FOR_REPEAT_VISITOR);
            onHamburgerOpenButtonClick(e);
            clrView.adjustSelectedPosition();
        });

        $("#ssmp-mobile-header__change-clr-cta").click(function(e) {
            e.preventDefault();
            $(modalPages.nav).css("display", "none");
            $(modalPages.clr).css("display", "flex").data("status", ssmp.CLRP_UPDATED_FOR_REPEAT_VISITOR);
            clrView.adjustSelectedPosition();
        });*/

        /*$("#header").on("clrp:page-readable", function() {
            var pageLocation = ssmp.getPageLocation(), 
                pageLanguage = ssmp.getPageLanguage(), 
                pageRole = ssmp.getPageRole(), 
                pageProduct = ssmp.getPageProduct();
            
            if(pageLanguage) {
                populateHeaderCLR(pageLocation, pageLanguage, pageRole, pageProduct);
            }

            return false;
        });*/

        // Start track function for AA
        /*ssmp.getCLRPAndRedirectionCookies()
            .then(function (clrCookies) {
                // track newVistor for AA
                if (clrCookies[ssmp.GEOLOC_COOKIE_NAME]) {
                    window.digitalData.page.user = {
                        "newVisitor": "false"
                    };
                } else {
                    window.digitalData.page.user = {
                        "newVisitor": "true"
                    };
                }
                // track CDN_cookie redirection for AA
                if(clrCookies[ssmp.USER_ORIGINAL_PAGE_URL]) {
                    window.digitalData.page.pageInfo.cookieCDN = clrCookies[ssmp.USER_ORIGINAL_PAGE_URL];
                    window.digitalData.page.pageInfo.orginalPage  =  clrCookies[ssmp.USER_ORIGINAL_PAGE_URL];
                    window.digitalData.page.pageInfo.redirectPage  = window.location.href;
                    ssmp.deleteCookie(ssmp.USER_ORIGINAL_PAGE_URL);
                }

                // track 404_cookie redirection for AA
                if(clrCookies[ssmp.NOT_FOUND_REDIRECTION_COOKIE_NAME]) {
                    window.digitalData.page.pageInfo.cookie404 = clrCookies[ssmp.NOT_FOUND_REDIRECTION_COOKIE_NAME];
                    window.digitalData.page.pageInfo.orginalPage  =  window.digitalData.page.pageInfo.orginalPage || clrCookies[ssmp.NOT_FOUND_REDIRECTION_COOKIE_NAME];
                    window.digitalData.page.pageInfo.redirectPage  = window.location.href;
                }				
        });*/

        if($(window).width()<1024){
            $(document).on("click touchend", function(e){
                var target = $(e.target);
                if(target.closest("header").length == 0) {
                    $(".ssmp-desktop-header").removeClass("mobile-search-box-visible");
                }
            });
        }
        $("#header button.ssmp-header__search-open") 
            .on("click", function(e){
                e.preventDefault();
                $(".ssmp-desktop-header").toggleClass("mobile-search-box-visible");
                $(".ssmp-search-box.mobile-search-box").find(".input-keywords").val("").focus();
            });
        
        //Click event for Search Icon, Hu, Gongda 2022-07-12    
        $("#btnSearchFieldIcon") 
            .on("click", function(e){
                e.preventDefault();
                if($('#divSearchFieldContainerTablet').css('display') == 'none'){
                    $("#divSearchFieldContainerTablet").show();
                } else {
                    $("#divSearchFieldContainerTablet").hide();
                }
            });
        
        /* Hu, Gongda 2022-09-02 */
        $(window).scroll(function() {
            var windowTop = $(window).scrollTop();
            if (windowTop > 90) {
                //console.log("downscroll code sticky-top");
                //$("#divSearchFieldWrapper").hide();
                //$("#divSearchFieldWrapper").css('padding', '2.4rem 0 0 0');
                $("#divSearchFieldWrapper").addClass("scrollDown");
            } else {
                //console.log("upscroll code");
                //$("#divSearchFieldWrapper").show();
                $("#divSearchFieldWrapper").removeClass('scrollDown');
            }
        });
    }) 
    /*
    $(document).ready(function () {
		var domain = $("#dynamic_domain").attr("data-dynamic-domain");
		isDomainRequest = domain.indexOf("statestreet.com") != -1 ? true : false;
        $("a").each(function(){
            var url = $(this).attr("href");
			if(isDomainRequest){
				$(this).attr("href", url.replace("/content/statestreet",""));
            }else{
 				if(url.indexOf('http') == -1 && url.indexOf(".html") == -1){
                	$(this).attr("href", url+".html");

 				}
            }

        });
    });*/
}(window.jQuery, window["ssmp-js-core"], window["ssmp-clr-view"], window["ssmp-js-clr"], window["ssmp-js-header"]));
(function (win, $, ssmp) {
    "use strict";

    $(document).ready(function () {
        $("#contact-alpha-submit").addClass("disabled");//disable the submit button

        $(document).on('click', '#contact-alpha-submit', function () {    //click submit button action
            if ($(this).hasClass("disabled")) {
                return false;
            }

            $('#contact-alpha-form .errMsg').hide();
            var validation = validateContactForm(true);

            if (!validation) {
                $('.fieldError input, .fieldError textarea').eq(0).focus();
                track_lead_gen(false)
                return false;
            } else {
                var formArr = $("#contact-alpha-form").serializeArray(),
                    formData = {};
                formArr.forEach(function (item, index) {
                    var key = item.name,
                        label = $("input[name=" + key + "], textarea[name=" + key + "]").closest(".row").find("label").first().text();
                    item["label"] = label;
                    formData[index] = item;
                });
                var item = {name:"contact-lead-source-identifier",value:$("#contact-lead-source-identifier").val(), lable:"contact-lead-source-identifier"}
                formData[5] = item;
                //alert(formArr);
                $.ajax({
                    // method: "Get",
                    // url: window.location.href,
                    // dataType: "text",
                    method: "Post",
                    url: "/bin/stt/leadgeneration",
                    data: JSON.stringify(formData),
                    contentType: "application/json; charset=utf-8",
                }).done(function (response) {
                    //$("#contact-alpha-form .form-detail").slideUp("fast");
                    //alert(response);
                    document.getElementById("contact-alpha-form").reset();
                    //$("html, body").animate({ scrollTop: 0 });
                    //on author env, we need to add ?wcmmode=disabled, the pop up modal can work
                    //ssmp.modal.showModal("#ssmp-success-panel-modal");
                    $(".leadgen-success-message").show();
                    $("#contact-alpha-form").hide();
                    track_lead_gen(true)
                }).fail(function () {
                    $("#contact-alpha-submit").removeClass('disabled');
                    track_lead_gen(false)
                });
                return false;
            }

        });

        //required field show up
        $("#contact-alpha-form").find("input, textarea").blur(function () {//required field show up
            var result = true;
            var fieldId = $(this).attr("id");
            if (fieldId && fieldId.toLowerCase().indexOf("name") >= 0) {
                var testName = isAlpha($(this).val());
                if (isEmpty($(this).val()) || !testName) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("organization" == fieldId || "feedback-content" == fieldId) {
                if (isEmpty($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("email" == fieldId) {
                if (isEmpty($(this).val()) || !validateEmail($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("phone" == fieldId && (isEmpty($(this).val()) || !isValidPhoneOrFax($(this).val()) || $(this).val().length < 9)) {
                highlightErrorFields($(this));
                result = false;
            }

            if (result) {
                clearHighlight($(this));
            }
        }).change(function () {
            if (validateContactForm(false)) {
                $("#contact-alpha-submit").removeClass("disabled");
            } else {
                $("#contact-alpha-submit").addClass("disabled");
            }
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            e.preventDefault();
            ssmp.modal.hideModal("#ssmp-success-panel-modal");
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            $('#contact-alpha-form .errMsg').hide();
            $("#contact-alpha-form .fieldError").removeClass("fieldError");
            $("#contact-alpha-form .fieldErrorLabel").removeClass("fieldErrorLabel");
            document.getElementById("contact-alpha-form").reset();
            //$("#contact-alpha-form .form-detail").slideUp("fast");
            $("html, body").animate({ scrollTop: 0 });
            $("#contact-alpha-submit").addClass("disabled");
        });

    });

    var getUnicodeWords = function (text) {
        var words = [],
            m,
            r = /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+/g;
        while ((m = r.exec(text))) {
            words.push(m[0])
        }
        return words;
    };

    function isEmpty(inputValue) {
        return !(inputValue != null && inputValue.trim() !== "");
    }

    function isAlpha(inputVal) {
        var inputText = inputVal.trim();
        var unicodeWords = getUnicodeWords(inputText);

        return !(unicodeWords.length == 0 || unicodeWords.join(' ') != inputText);
    }

    function highlightErrorFields(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.addClass('fieldError');
        fieldRow.siblings('label').not(".radio-label").addClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "block");
    }

    function clearHighlight(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.removeClass('fieldError');
        fieldRow.siblings('label').removeClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "none");
    }

    function validateEmail(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }

    function isValidPhoneOrFax(inputtxt) {
        var isValidPhone = false;
        var eachNum = inputtxt.split(';');
        for (var i = 0; i < eachNum.length; i++) {
            var phone = eachNum[i];
            if (!isEmpty(phone)) {
                var res = phone.match(/^\+?([( 0-9 )])+(-[ 0-9 ;]+)*$/);
                if (res == null) {
                    isValidPhone = false;
                } else {
                    isValidPhone = true;
                }
            }
        }
        return isValidPhone;
    }
    function validateContactJapanForm(showErrorMsg) {
        var hFirstNameObj = $("#hiraganaFirstName");
        var testhFirstName = hFirstNameObj.val() ? isAlpha(hFirstNameObj.val()) : true;
        var hLastNameObj = $('#hiraganaLastName');
        var testhLastName = hLastNameObj.val() ? isAlpha(hLastNameObj.val()) : true;
        var kFirstNameObj = $("#katakanaFirstName");
        var testkFirstName = kFirstNameObj.val() ? isAlpha(kFirstNameObj.val()) : true;
        var kLastNameObj = $('#katakanaLastName');
        var testkLastName = kLastNameObj.val() ? isAlpha(kLastNameObj.val()) : true;
        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(hFirstNameObj.val()) || !testhFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(hFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(hFirstNameObj);
        }

        if (isEmpty(hLastNameObj.val()) || !testhLastName) {
            if (showErrorMsg) {
                highlightErrorFields(hLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(hLastNameObj);
        }
        if (isEmpty(kFirstNameObj.val()) || !testkFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(kFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(kFirstNameObj);
        }

        if (isEmpty(kLastNameObj.val()) || !testkLastName) {
            if (showErrorMsg) {
                highlightErrorFields(kLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(kLastNameObj);
        }

        if (!agreementObj.is(":checked")) {
            if (showErrorMsg) {
                highlightErrorFields(agreementObj);
            }
            result = false;
        } else {
            clearHighlight(agreementObj);
        }

        return result;
    }

    function validateContactForm(showErrorMsg) {
        var nameObj = $('#first-name');
        var lastnameObj = $('#last-name');
        var organizationObj = $("#organization");
        var emailObj = $('#email');

        var testName = nameObj.val() ? isAlpha(nameObj.val()) : true;
        var testLastName = lastnameObj.val() ? isAlpha(lastnameObj.val()) : true;
        var testEmail = validateEmail(emailObj.val());


        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(nameObj.val()) || !testName) {
            if (showErrorMsg) {
                highlightErrorFields(nameObj);
            }
            result = false;
        } else {
            clearHighlight(nameObj);
        }

        if (isEmpty(lastnameObj.val()) || !testLastName) {
            if (showErrorMsg) {
                highlightErrorFields(lastnameObj);
            }
            result = false;
        } else {
            clearHighlight(lastnameObj);
        }

        if (!agreementObj.is(":checked")) {
            if (showErrorMsg) {
                highlightErrorFields(agreementObj);
            }
            result = false;
        } else {
            clearHighlight(agreementObj);
        }


        if (isEmpty(organizationObj.val())) {
            if (showErrorMsg) {
                highlightErrorFields(organizationObj);
            }
            result = false;
        } else {
            clearHighlight(organizationObj);
        }

        if (isEmpty(emailObj.val()) || !testEmail) {
            if (showErrorMsg) {
                highlightErrorFields(emailObj);
            }
            result = false;
        } else {
            clearHighlight(emailObj);
        }

        return result;
    }

}(window, window.jQuery, window["ssmp-js-core"]));

(function (win, $, ssmp) {
    "use strict";

    $(document).ready(function () {
        $("#contact-submit").addClass("disabled");//disable the submit button

        $(document).on('click', '#contact-submit', function () {    //click submit button action
            if ($(this).hasClass("disabled")) {
                return false;
            }

            $('#contact-form .errMsg').hide();
            var validation = validateContactForm(true);

            if (!validation) {
                $('.fieldError input, .fieldError textarea').eq(0).focus();
                track_lead_gen(false)
                return false;
            } else {
                var formArr = $("#contact-form").serializeArray(),
                    formData = {};
                formArr.forEach(function (item, index) {
                    var key = item.name,
                        label = $("input[name=" + key + "], textarea[name=" + key + "]").closest(".row").find("label").first().text();
                    item["label"] = label;
                    formData[index] = item;
                });
                var item = {name:"contact-lead-source-identifier",value:$("#contact-lead-source-identifier").val(), lable:"contact-lead-source-identifier"}
                formData[5] = item;
                //alert(formArr);
                $.ajax({
                    // method: "Get",
                    // url: window.location.href,
                    // dataType: "text",
                    method: "Post",
                    url: "/bin/stt/leadgeneration",
                    data: JSON.stringify(formData),
                    contentType: "application/json; charset=utf-8",
                }).done(function (response) {
                    //$("#contact-form .form-detail").slideUp("fast");
                    //alert(response);
                    document.getElementById("contact-form").reset();
                    //$("html, body").animate({ scrollTop: 0 });
                    //on author env, we need to add ?wcmmode=disabled, the pop up modal can work
                    //ssmp.modal.showModal("#ssmp-success-panel-modal");
                    $(".leadgen-success-message").show();
                    $("#contact-form").hide();
                    track_lead_gen(true)
                }).fail(function () {
                    $("#contact-submit").removeClass('disabled');
                    track_lead_gen(false)
                });
                return false;
            }

        });

        //required field show up
        $("#contact-form").find("input, textarea").blur(function () {//required field show up
            var result = true;
            var fieldId = $(this).attr("id");
            if (fieldId && fieldId.toLowerCase().indexOf("name") >= 0) {
                var testName = isAlpha($(this).val());
                if (isEmpty($(this).val()) || !testName) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("organization" == fieldId || "feedback-content" == fieldId) {
                if (isEmpty($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("email" == fieldId) {
                if (isEmpty($(this).val()) || !validateEmail($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("phone" == fieldId && (isEmpty($(this).val()) || !isValidPhoneOrFax($(this).val()) || $(this).val().length < 9)) {
                highlightErrorFields($(this));
                result = false;
            }

            if (result) {
                clearHighlight($(this));
            }
        }).change(function () {
            if (validateContactForm(false)) {
                $("#contact-submit").removeClass("disabled");
            } else {
                $("#contact-submit").addClass("disabled");
            }
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            e.preventDefault();
            ssmp.modal.hideModal("#ssmp-success-panel-modal");
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            $('#contact-form .errMsg').hide();
            $("#contact-form .fieldError").removeClass("fieldError");
            $("#contact-form .fieldErrorLabel").removeClass("fieldErrorLabel");
            document.getElementById("contact-form").reset();
            //$("#contact-form .form-detail").slideUp("fast");
            $("html, body").animate({ scrollTop: 0 });
            $("#contact-submit").addClass("disabled");
        });

    });

    var getUnicodeWords = function (text) {
        var words = [],
            m,
            r = /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+/g;
        while ((m = r.exec(text))) {
            words.push(m[0])
        }
        return words;
    };

    function isEmpty(inputValue) {
        return !(inputValue != null && inputValue.trim() !== "");
    }

    function isAlpha(inputVal) {
        var inputText = inputVal.trim();
        var unicodeWords = getUnicodeWords(inputText);

        return !(unicodeWords.length == 0 || unicodeWords.join(' ') != inputText);
    }

    function highlightErrorFields(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.addClass('fieldError');
        fieldRow.siblings('label').not(".radio-label").addClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "block");
    }

    function clearHighlight(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.removeClass('fieldError');
        fieldRow.siblings('label').removeClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "none");
    }

    function validateEmail(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }

    function isValidPhoneOrFax(inputtxt) {
        var isValidPhone = false;
        var eachNum = inputtxt.split(';');
        for (var i = 0; i < eachNum.length; i++) {
            var phone = eachNum[i];
            if (!isEmpty(phone)) {
                var res = phone.match(/^\+?([( 0-9 )])+(-[ 0-9 ;]+)*$/);
                if (res == null) {
                    isValidPhone = false;
                } else {
                    isValidPhone = true;
                }
            }
        }
        return isValidPhone;
    }
    function validateContactJapanForm(showErrorMsg) {
        var hFirstNameObj = $("#hiraganaFirstName");
        var testhFirstName = hFirstNameObj.val() ? isAlpha(hFirstNameObj.val()) : true;
        var hLastNameObj = $('#hiraganaLastName');
        var testhLastName = hLastNameObj.val() ? isAlpha(hLastNameObj.val()) : true;
        var kFirstNameObj = $("#katakanaFirstName");
        var testkFirstName = kFirstNameObj.val() ? isAlpha(kFirstNameObj.val()) : true;
        var kLastNameObj = $('#katakanaLastName');
        var testkLastName = kLastNameObj.val() ? isAlpha(kLastNameObj.val()) : true;
        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(hFirstNameObj.val()) || !testhFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(hFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(hFirstNameObj);
        }

        if (isEmpty(hLastNameObj.val()) || !testhLastName) {
            if (showErrorMsg) {
                highlightErrorFields(hLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(hLastNameObj);
        }
        if (isEmpty(kFirstNameObj.val()) || !testkFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(kFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(kFirstNameObj);
        }

        if (isEmpty(kLastNameObj.val()) || !testkLastName) {
            if (showErrorMsg) {
                highlightErrorFields(kLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(kLastNameObj);
        }

        if (!agreementObj.is(":checked")) {
            if (showErrorMsg) {
                highlightErrorFields(agreementObj);
            }
            result = false;
        } else {
            clearHighlight(agreementObj);
        }

        return result;
    }

    function validateContactForm(showErrorMsg) {
        var nameObj = $('#first-name');
        var lastnameObj = $('#last-name');
        var organizationObj = $("#organization");
        var emailObj = $('#email');

        var testName = nameObj.val() ? isAlpha(nameObj.val()) : true;
        var testLastName = lastnameObj.val() ? isAlpha(lastnameObj.val()) : true;
        var testEmail = validateEmail(emailObj.val());


        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(nameObj.val()) || !testName) {
            if (showErrorMsg) {
                highlightErrorFields(nameObj);
            }
            result = false;
        } else {
            clearHighlight(nameObj);
        }

        if (isEmpty(lastnameObj.val()) || !testLastName) {
            if (showErrorMsg) {
                highlightErrorFields(lastnameObj);
            }
            result = false;
        } else {
            clearHighlight(lastnameObj);
        }

        if (!agreementObj.is(":checked")) {
            if (showErrorMsg) {
                highlightErrorFields(agreementObj);
            }
            result = false;
        } else {
            clearHighlight(agreementObj);
        }


        if (isEmpty(organizationObj.val())) {
            if (showErrorMsg) {
                highlightErrorFields(organizationObj);
            }
            result = false;
        } else {
            clearHighlight(organizationObj);
        }

        if (isEmpty(emailObj.val()) || !testEmail) {
            if (showErrorMsg) {
                highlightErrorFields(emailObj);
            }
            result = false;
        } else {
            clearHighlight(emailObj);
        }

        return result;
    }

}(window, window.jQuery, window["ssmp-js-core"]));

(function ($, ssmp) {
    var language = $("html").attr("lang");
    function shareResponsive() {
        $('.ssmp-video').each(function () {
            var self = $(this),
                description = self.find('.ssmp-video__description'),
                shareRight = self.find('.ssmp-video__share-right'),
                ytb = self.find('.ssmp-video__youtube'),
                iframe = self.find('iframe'),
                width = document.body.clientWidth;
            if (shareRight.length > 0 && width >= 840) {
                var iframeHeight;
                $(shareRight).siblings('.ssmp-video__level-one').addClass('ssmp-video_special');
                iframeHeight = (iframe.width() * 9) / 16;
                iframe.height(iframeHeight);
                ytb.css("padding-top", iframeHeight);
            } else {
                ytb.css("padding-top", "56.25%");
                iframe.height('100%');
            }
            if (description.length > 0) {
                var shareBottom = self.find('.ssmp-video__share-bottom');
                if (shareRight.length > 0) {
                    $(description).addClass('share-in-right');
                }
                if (shareBottom.length > 0) {
                    $(description).addClass('share-in-bottom');
                }
            }
        });
    }

    function videoIdCopy() {
        $('.ssmp-video').each(function () {
            var videoId = $(this).attr('id');
            $(this).find(".ssmp-sharemedia").attr("data-id", videoId);
        });
    }

    function shadowImg() {
        $('.ssmp-video__youtube-shadow').each(function () {
            var imgUrl = $(this).prev().data("url");
            imgUrl = imgUrl.substring(imgUrl.indexOf('embed/') + 6);
            imgUrl = "//img.youtube.com/vi/" + imgUrl + "/maxresdefault.jpg";
            $(this).css("background-image", "url(" + imgUrl + ")");
        });
    }

    function formatVideoDate(videoDate) {
        if (videoDate != "") {
            var dateEvent = new Date(videoDate),
                dateOptions = { year: 'numeric', month: 'long', day: 'numeric' },
                dateLan = dateEvent.toLocaleDateString(language, dateOptions);
            return dateLan
        }
    }

    function formatVideoTime(duration) {
        var seconds = duration < 0 ? 0 : Math.floor(duration),
            s = Math.floor(seconds % 60),
            m = Math.floor(seconds / 60 % 60),
            h = Math.floor(seconds / 3600);

        h = (h > 0) ? h + ':' : '';
        m = ((m < 10) ? '0' + m : m) + ':';
        s = (s < 10) ? '0' + s : s;

        return h + m + s;
    }

    function appendVideoTime($videoEle, duration, videoDate) {
        var $video = $videoEle.closest(".ssmp-video"),
            $videoDesp = $video.find(".ssmp-video__description"),
            $videoRunTime = $video.find(".ssmp-video-enhanced__runtime"),
            $videoDate = $video.find(".ssmp-video-enhanced__date"),
            videoDateStr = "",
            videoDesp = $.trim($videoDesp.text()),
            date = "",
            time = "";
        time = formatVideoTime(duration);
        if (videoDesp && time) {
            $videoDesp.append(" (" + time + ")");
        }

        if ($videoDate.length > 0) {
            videoDateStr = $videoDate.html().trim();
            if (videoDateStr != "") {
                date = formatVideoDate(videoDateStr);
            } else {
                date = formatVideoDate(videoDate);
            }
        }
        if ($videoDate.length > 0 && date) {
            $videoDate.html(date);
        } else {
            $videoDate.remove();
        }
        if ($videoRunTime.length > 0 && time) {
            $videoRunTime.append("Video (" + time + ")");
        }
    }

    function getBcVideoTime(player) {
        var duration = player.duration() || player.mediainfo.duration,
            videoDate = player.mediainfo.updatedAt,
            $videoEle = $(player.el());
        if (!videoDate) {
            videoDate = player.mediainfo.createdAt;
        }
        if (duration) {
            appendVideoTime($videoEle, duration, videoDate);
        } else {
            player.on('loadstart', function () {
                getBcVideoTime(player);
            });
        }
    }

    function trackBcVideoStatus(player, mediaType) {
        var $video = $(player.el());
        $video.find(".vjs-poster, .vjs-big-play-button").attr("aa-global-ctavideoplay", "");

        var tracked0 = false,
            tracked25 = false,
            tracked50 = false,
            tracked75 = false,
            tracked100 = false;
        player.on('timeupdate', timeupdateTrack);
        function timeupdateTrack() {
            var duration = player.duration(),
                playheadTime = player.currentTime();
            if (!duration && player.mediainfo) {
                duration = player.mediainfo.duration;
            }
            if (tracked100 && !player.ended()) {
                tracked0 = false;
                tracked25 = false;
                tracked50 = false;
                tracked75 = false;
                tracked100 = false;
            }
            if (!tracked0 && playheadTime > 0) {
                tracked0 = true;
                onTrackMilestone(0, player, mediaType);
            } else if (!tracked25 && playheadTime > duration * 25 / 100) {
                tracked25 = true;
                onTrackMilestone(25, player, mediaType);
            } else if (!tracked50 && playheadTime > duration * 50 / 100) {
                tracked50 = true;
                onTrackMilestone(50, player, mediaType);
            } else if (!tracked75 && playheadTime > duration * 75 / 100) {
                tracked75 = true;
                onTrackMilestone(75, player, mediaType);
            } else if (!tracked100 && player.ended()) {
                tracked100 = true;
                onTrackMilestone(100, player, mediaType);
            }
        }

        player.on('canplay', () => {
            if (window._satellite && mediaType == 'video') {
                window._satellite.track("brightcoveVideoLoaded");
            }
            if (mediaType == 'video' && window.digitalData) {
                let videoCount = countVideos();
                if (videoCount == 0) {
                    window.digitalData.video = {
                        videoName: player.mediainfo.name,
                        videoID: player.mediainfo.id,
                        videoDuration: formatVideoTime(player.duration())
                    }
                } else {
                    let count = videoCount + 1;
                    window.digitalData['video' + count] = {
                        videoName: player.mediainfo.name,
                        videoID: player.mediainfo.id,
                        videoDuration: formatVideoTime(player.duration())
                    }
                }
            }
        })
    }

    function onTrackMilestone(status, player, mediaType) {
        var mediaStatus = "";
        switch (status) {
            case 0:
                mediaStatus = "start";
                break;
            case 25:
                mediaStatus = "25-complete";
                break;
            case 50:
                mediaStatus = "50-complete";
                break;
            case 75:
                mediaStatus = "75-complete";
                break;
            case 100:
                mediaStatus = "100-complete";
                break;
            default:
                break;
        }
        if (typeof window.digitalData === "undefined" || !window.digitalData) {
            window.digitalData = {};
        }

        var mediaDetails = {},
            mediaInfo = {};
        mediaDetails[mediaType + "ID"] = player.mediainfo.id;
        mediaDetails[mediaType + "Name"] = player.mediainfo.name;
        mediaDetails[mediaType + "Status"] = mediaStatus;
        mediaDetails[mediaType + "Player"] = "brightcove-" + mediaType;
        mediaInfo[mediaType + "Info"] = mediaDetails;
        if (window.digitalData[mediaType]) {
            window.digitalData[mediaType][mediaType + "Info"] = mediaDetails;
        }
        if (window._satellite) {
            if (mediaType == "audio") {
                window._satellite.track("trackAudio");
            } else {
                window._satellite.track("trackVideo");
            }
        }
    }

    function onYtPlayerStateChange(event) {
        if (window._satellite) {
            window._satellite.setVar("ytPlayerEvent", event);
            window._satellite.track('track-yt-video');
        }
    }

    function onYtPlayerReady(event) {
        if (window._satellite) {
            window._satellite.track("youtubeVideoLoaded ");
        }
        var $videoEle = $(event.target.getIframe());
        appendVideoTime($videoEle, event.target.getDuration(), "");
        $videoEle.show();
        if (!$videoEle.data("autoplay")) {
            $videoEle.next().show();
            $videoEle.next().click(function () {
                $(this).hide();
                event.target.playVideo()
            });
        } else {
            event.target.playVideo();
        }
        if (window.digitalData) {
            let videoCount = countVideos();
            let _player = event.target
            if (videoCount == 0) {
                window.digitalData.video = {
                    videoName: _player.videoTitle,
                    videoID: _player.getVideoData().video_id,
                    videoDuration: formatVideoTime(_player.getDuration()),
                    videoURL: _player.getVideoUrl()
                }
            } else {
                let count = videoCount + 1;
                window.digitalData['video' + count] = {
                    videoName: _player.videoTitle,
                    videoID: _player.getVideoData().video_id,
                    videoDuration: formatVideoTime(_player.getDuration()),
                    videoURL: _player.getVideoUrl()
                }
            }
        }
    }

    function newYtPlayer(playerId) {
        new window.YT.Player(playerId, {
            height: '360',
            width: '640',
            events: {
                'onReady': onYtPlayerReady,
                'onStateChange': onYtPlayerStateChange
            }
        });
    }

    var initYtPlayer = (function () {
        var ytPlayerList = [],
            ytAPILoaded = false,
            ytAPIReady = false;

        return function (playerId) {
            if (!ytAPILoaded) {
                ytAPILoaded = true;
                var tag = document.createElement('script');
                tag.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
                window.onYouTubeIframeAPIReady = function () {
                    ytAPIReady = true;
                    ytPlayerList.forEach(function (player) {
                        newYtPlayer(player);
                    });
                }
            }
            if (!ytAPIReady) {
                ytPlayerList.push(playerId);
            } else {
                newYtPlayer(playerId);
            }
        }
    })();

    function handleYtPlayers($videoContainer) {
        ssmp.checkLoadingStatus($videoContainer, function () {
            $videoContainer.addClass("loaded");

            var $videoIframe = $videoContainer.find("iframe"),
                src = $videoIframe.data("url"),
                videoId = src.substring(src.indexOf('embed/') + 6),
                playerId = 'dtmYTplayer' + $videoContainer.data("index");
            if (src && src.indexOf("youtube.com") > -1) {
                if (src.indexOf("?") > -1) {
                    src += "&modestbranding=1&rel=0&enablejsapi=1&playsinline=1";
                } else {
                    src += "?modestbranding=1&rel=0&enablejsapi=1&playsinline=1";
                }
                src += "&autoplay=" + $videoIframe.data("autoplay");
                src += "&mute=" + $videoIframe.data("muted");
                src += "&playlist=" + videoId + "&loop=" + $videoIframe.data("loop");
                src += "&controls=" + $videoIframe.data("controls");

                $videoIframe.attr({ "src": src, "id": playerId });

                initYtPlayer(playerId);
            }
        });
    }

    function ytVideoObserverCallback(entries, observer) {
        entries.forEach(function (entry) {
            var $videoContainer = $(entry.target);
            if (entry.isIntersecting) {
                $videoContainer.attr("data-view", "true");
                handleYtPlayers($videoContainer);
            }
            if ($videoContainer.hasClass("loaded")) {
                observer.unobserve(entry.target);
            }
        });
    }

    function ytCookieObserverCallback(mutationList, observer) {
        mutationList.forEach(function (mutation) {
            var $videoContainer = $(mutation.target);
            handleYtPlayers($videoContainer);
            if ($videoContainer.hasClass("loaded")) {
                observer.disconnect();
            }
        });
    }

    function activateYtVideos() {
        var ytVideoObserver;
        if (typeof IntersectionObserver === "function" && typeof CQ === "undefined") {
            ytVideoObserver = new IntersectionObserver(ytVideoObserverCallback);
        }
        $(".ssmp-video__youtube").each(function (index) {
            var $videoContainer = $(this);

            if ($videoContainer.hasClass("loaded")) {
                return true;
            }

            $videoContainer.data("index", index);

            ssmp.createCookieObserver($videoContainer[0], ytCookieObserverCallback);
            if (ytVideoObserver) {
                //Lazy Load video
                ytVideoObserver.observe($videoContainer[0]);
            } else {
                $videoContainer.attr("data-view", "true");
                handleYtPlayers($videoContainer);
            }

        });
    }

    function handleBcPlayers(player) {
        var mediaType;
        if (player.hasClass("audio-player")) {
            mediaType = "audio";
        } else {
            mediaType = "video";
        }
        getBcVideoTime(player);
        trackBcVideoStatus(player, mediaType);
    }

    function loadBcVideo($video) {
        var playerId = $video.attr("data-player-placeholder"),
            accountId = $video.attr("data-account");
        $video.attr("data-player", playerId);
        $video.addClass("loaded");
        $.ajax({
            url: "//players.brightcove.net/" + accountId + "/" + playerId + "_default/index.min.js",
            dataType: "script",
            method: "GET",
            cache: true
        }).done(function () {
            window.videojs.getPlayer($video[0]).ready(function () {
                var player = this;
                handleBcPlayers(player);
            });
            //$video.addClass("loaded");
        });
    }
    
    function bcVideoObserverCallback(entries, observer) {
        entries.forEach(function (entry) {
            var videoEle = entry.target;
            if (entry.isIntersecting && !$(videoEle).hasClass("loaded")) {
                loadBcVideo($(videoEle));
                observer.unobserve(videoEle);
            }
        });
    }

    function activateBcVideos() {
        var bcVideoObserver;
        if (typeof IntersectionObserver === "function" && typeof CQ === "undefined") {
            bcVideoObserver = new IntersectionObserver(bcVideoObserverCallback, {
                rootMargin: "100px 0px"
            });
        }
        $(".ssmp-video .ssmp-video__brightcove video, .ssmp-audio .audio-player-holder video-js").each(function () {
            var $video = $(this);

            if ($video.hasClass("loaded")) {
                return true;
            }
            if (bcVideoObserver) {
                //Lazy Load video
                bcVideoObserver.observe($video[0]);
            } else {
                loadBcVideo($video);
            }
        });
    }

    $(document).ready(function () {
        /*
        if (typeof OptanonActiveGroups === "string") {
            if (OptanonActiveGroups.indexOf("C0002") >= 0) {
                activateBcVideos();
                activateYtVideos();
            }
        } else {
            activateBcVideos();
            activateYtVideos();
        }
        */

        activateBcVideos();
        activateYtVideos();

        /*
        shareResponsive();
        */
        videoIdCopy();
        shadowImg();

        /*
        window.onresize = function () {
            shareResponsive();
        }
        */
    });

    function countVideos() {
        let res = 0;
        if (window.digitalData) {
            for (const key in window.digitalData) {
                if (key.startsWith("video")) {
                    res += 1;
                }
            }
        }
        return res;
    }

}(window.jQuery, window["ssmp-js-core"]));

(function (win, $, ssmpCore, ssmpLazyLoad) {
    "use strict";

    var $searchComp = $(".ssmp-search");

    if ($searchComp.length > 0) {

        var Utils = {
            getURLParamByName: function (name, url) {
                var search = url || window.location.search,
                    regex = new RegExp("[?&]" + name + "=([^&;#]*)"),
                    result = null;

                result = regex.exec(search);
                return result ? decodeURIComponent(result[1]) : "";
            },
            setURLParamByName: function (name, value, url) {
                var regex = new RegExp("([?&])" + name + "=([^&;#]*)");

                value = encodeURIComponent(value);
                url = url || window.location.href;
                if (value) {
                    if (regex.test(url)) {
                        url = url.replace(regex, "$1" + name + "=" + value);
                    } else {
                        url = url.replace(/([^?#]*)[?]?([^#]*)/, function (match, p1, p2) {
                            p2 = p2 ? "&" + p2 : "";
                            return p1 + "?" + name + "=" + value + p2;
                        });
                    }

                } else {
                    url = url.replace(regex, "$1").replace(/([?&])&/, "$1");
                }

                return url;
            }
        };

        var Filters = function ($container, applyFiltersFunc, reflectOnUrl) {
            var self = this;
            if ($container.length > 0) {
                self.$container = $container;
                self.applyFiltersFunc = applyFiltersFunc;
                self.selectedEles = [];
                self.reflectOnUrl = !!reflectOnUrl;

                $container.find(".clear-filters").click(function (e) {
                    e.preventDefault();
                    self.clearFilters();
                    self.emitFiltersChanged();
                });

                $container.find(".category-name").click(function (e) {
                    e.preventDefault();
                    $(this).siblings(".sub-categories").slideToggle();
                    $(this).closest(".category").toggleClass("collapsed");
                });

                $container.find(".sub-categories .checkbox").click(function (e) {
                    e.preventDefault();
                    if (!$(this).hasClass("selected")) {
                        if (window.digitalData) {
                            if (window.digitalData.search) {
                                if (window._satellite) {
                                    window._satellite.track("searchFilter");
                                }
                            }
                            if (window.digitalData.insights) {
                                if (window._satellite) {
                                    window._satellite.track("insightsFilter");
                                }
                            }
                            if (window.digitalData.solutions) {
                                if (window._satellite) {
                                    window._satellite.track("solutionsFilter");
                                }
                            }
                        }
                    }
                    $(this).toggleClass("selected");

                    self.emitFiltersChanged();
                });

                $container.find(".sub-categories .radio").click(function (e) {
                    e.preventDefault();
                    if (!$(this).hasClass("selected")) {
                        $(this).closest(".radio-group").find(".radio").removeClass("selected");
                        $(this).addClass("selected");

                        if ($(this).hasClass("parent-ctg")) {
                            $(this).closest(".filters-list").find(".sub-ctg").hide().filter(".sub-ctg-" + $(this).attr("data-key")).show();
                        }

                        self.emitFiltersChanged();
                    }
                });

                $container.find(".mobile-filters-title").click(function (e) {
                    e.preventDefault();
                    $container.find(".filters-container").css("display", "block");
                    $container.find(".filters-content").css("margin-left", "-100%").animate({ marginLeft: 0 });
                    $("body").addClass("filters-open");
                });

                $container.find(".close-filters, .apply-filters, .filters-container").click(function (e) {
                    e.preventDefault();
                    if (!$(this).hasClass("filters-container") || e.target === e.currentTarget) {
                        $container.find(".filters-content").animate({ marginLeft: "-100%" }, function () {
                            $(this).css("margin-left", 0);
                            self.$container.find(".filters-container").css("display", "");
                            $("body").removeClass("filters-open");
                        });
                    }
                });

                if (reflectOnUrl) {
                    self.getElesByUrl();
                    window.onpopstate = function () {
                        self.getElesByUrl();
                    };
                }
            }
        };

        Filters.prototype = {
            constructor: Filters,
            setFilters: function (selectedEles) {
                var self = this,
                    selectors = "",
                    $category;
                selectedEles = selectedEles || self.selectedEles;
                self.clearFilters();

                $.each(selectedEles, function (i, ele) {
                    selectors = "";
                    $.each(ele.value, function (i, val) {
                        selectors += ".ctg[data-key=" + val + "],";
                    });
                    selectors = selectors.replace(/,\s*$/ig, "");
                    $category = self.$container.find(".category[data-key=" + ele.key + "]");
                    $category.removeClass("collapsed").find(".sub-categories").slideDown();
                    if ($category.hasClass("radio-group")) {
                        $category.find(".radio").removeClass("selected").filter(selectors).addClass("selected");
                    } else if ($category.hasClass("checkbox-group")) {
                        $category.find(".checkbox").filter(selectors).addClass("selected");
                    }
                });

                if (selectedEles.length > 0) {
                    self.$container.find(".clear-filters").show();
                } else {
                    self.$container.find(".clear-filters").hide();
                }
            },
            getFilters: function () {
                var self = this,
                    key = "",
                    value = [];
                self.selectedEles = [];
                self.$container.find(".category").filter(".auto-selected, :visible").each(function () {
                    key = $(this).attr("data-key");
                    value = [];
                    $(this).find(".selected").each(function () {
                        value.push($(this).attr("data-key"));
                    });
                    if (value.length > 0) {
                        self.selectedEles.push({
                            "key": key,
                            "value": value
                        });
                    }
                });
            },
            clearFilters: function () {
                var self = this;
                self.$container.find(".checkbox.selected").removeClass("selected");
                self.$container.find(".radio-group").each(function () {
                    $(this).find(".radio").removeClass("selected").eq(0).addClass("selected");
                });
            },
            setResultsNum: function (total, filtered) {
                var self = this;
                if (typeof total === "number") {
                    self.$container.find(".total-num").html(total);
                    if (typeof filtered === "number" && self.selectedEles.length > 0) {
                        self.$container.find(".filtered").show().find(".filtered-num").html(filtered);
                        if (window.digitalData) {
                            if (window.digitalData.search) {
                                window.digitalData.search.searchResults = filtered
                            }
                            if (window.digitalData.insights) {
                                window.digitalData.insights.insightsResults = filtered
                            }
                            if (window.digitalData.solutions) {
                                window.digitalData.solutions.solutionsResults = filtered
                            }
                        }
                    } else {
                        if (window.digitalData) {
                            if (window.digitalData.search) {
                                window.digitalData.search.searchResults = total
                            }
                            if (window.digitalData.insights) {
                                window.digitalData.insights.insightsResults = total
                            }
                            if (window.digitalData.solutions) {
                                window.digitalData.solutions.solutionsResults = total
                            }
                        }
                        self.$container.find(".filtered").hide();
                    }
                }

            },
            setApplyFilterFunc: function (applyFiltersFunc) {
                var self = this;
                self.applyFiltersFunc = applyFiltersFunc;
            },
            emitFiltersChanged: function () {
                var self = this;
                self.getFilters();
                if (self.reflectOnUrl) {
                    self.updateUrl();
                }
                if (self.selectedEles.length > 0) {
                    self.$container.find(".clear-filters").show();
                } else {
                    self.$container.find(".clear-filters").hide();
                }
                self.applyFiltersFunc(self.selectedEles);
            },
            getElesByUrl: function (url) {
                var self = this,
                    params = "";
                url = url || window.location.search;
                self.selectedEles = [];
                params = Utils.getURLParamByName("g", url);
                if (params) {
                    params = params.split(",");
                    $.each(params, function (i, val) {
                        var ele = val.split(":"),
                            value = [];
                        $.each(ele[1].split("~"), function (i, key) {
                            value.push(key);
                        });
                        self.selectedEles.push({
                            "key": ele[0],
                            "value": value
                        });
                    });
                }

                self.setFilters();
                self.applyFiltersFunc(self.selectedEles);
            },
            updateUrl: function (selectedEles) {
                var self = this,
                    value = "",
                    url = "",
                    filters4analytics = "";
                selectedEles = selectedEles || self.selectedEles;
                filters4analytics = selectedEles.map(_ => `${_.key}:${_.value.join(",")}`).join("|")
                if (window.digitalData) {
                    if (window.digitalData.search) {
                        window.digitalData.search.searchFilter = filters4analytics
                    }
                    if (window.digitalData.insights) {
                        window.digitalData.insights.insightsFilter = filters4analytics
                    }
                    if (window.digitalData.solutions) {
                        window.digitalData.solutions.solutionsFilter = filters4analytics
                    }
                }
                $.each(selectedEles, function (i, ele) {
                    value += ele.key + ":" + ele.value.join("~") + ",";
                });
                value = value.replace(/,\s*$/, "");
                url = Utils.setURLParamByName("g", value);
                window.history.pushState(null, "", url);
            }
        }

        var RESULT_PER_VIEW = 8,
            INSIGHTS_KEY = "Insights";

        let decodeTranslations = function (trans) {
            let _trans = Object.assign({}, trans)
            for (const k in _trans) {
                if (Object.hasOwnProperty.call(_trans, k)) {
                    const ele = _trans[k];
                    if (typeof ele == 'string') {
                        _trans[k] = decodeURIComponent(ele)
                    }
                }
            }
            return _trans
        }

        var keywords = Utils.getURLParamByName("q"),
            isInsightsPage = $("#search-type").val() === "insights",
            isSolutionsPage = $("#search-type").val() === "solutions",
            _translations = JSON.parse($("#search-info-translation").val()),
            translations = decodeTranslations(_translations),
            clrpURL = "/" + ssmpCore.getPageLocation() + "/" + ssmpCore.getPageLanguage() + "/" + ssmpCore.getPageRole() + "/" + ssmpCore.getPageProduct(),
            bannerSettings = JSON.parse($("#search-banner").val())["bannerSettings"];


        var renderResults = function (results) {
            var resultsHTML = "";
            $.each(results, function (i, result) {
                var dateAuthorStr = "",
                    ctgKey = "",
                    ctgClass = "";
                if (result.c && result.c.length > 0) {
                    $.each(result.c, function (i, ctg) {
                        ctgClass += " ctg-" + ctg.replace("/", "-");
                    });
                }
                if (result.m) {
                    ctgClass += " ctg-media-type-" + result.m.toLowerCase();
                }

                resultsHTML += "<li class='result-item" + ctgClass + "'><div class='details'>";

                resultsHTML += "<p class='title'><a href='" + result.l + "'>" + result.k + "</a></p>";

                if (result.t || result.a || result.m) {
                    resultsHTML += "<p class='date-author ssmp-d-tablet-none ssmp-d-mobile-none'>";
                    if (result.t) {
                        // hiding dates from solutions results page
                        let searchType = $('#search-type').val();
                        if (searchType == 'search-result' || searchType == 'insights') {
                            dateAuthorStr += "<span>" + result.t + "</span>";
                        }
                    }
                    if (result.a) {
                        dateAuthorStr += "<span class='author'>"
                        $.each(result.a, function (i, author) {
                            dateAuthorStr += i === 0 ? translations["ssmp By"] + " " : "";
                            if (author.u) {
                                dateAuthorStr += "<a href='" + author.u + "'>" + author.n + "</a>";
                            } else {
                                dateAuthorStr += author.n;
                            }
                            dateAuthorStr += ", ";
                        });
                        dateAuthorStr = dateAuthorStr.substr(0, dateAuthorStr.length - 2);
                        dateAuthorStr += "</span>"
                    }
                    if (result.m) {
                        dateAuthorStr += "<span class='media-type'>" + translations[result.m] + "</span>";
                    }
                    resultsHTML += dateAuthorStr;
                    resultsHTML += "</p>";
                }
                // modified by xin
                if (dateAuthorStr) {
                    resultsHTML += "<p class='date-author ssmp-d-desktop-none ssmp-d-large-screen-none'>" + dateAuthorStr + "</p>";
                }

                if (result.d) {
                    resultsHTML += "<p class='desc'>" + result.d + "</p>";
                }

                let taglink_prefix = '/content/statestreet/'
                if (window['getCookie']) {
                    let _clr = getCookie('stt-clr')
                    if (_clr && result.e) {
                        taglink_prefix += _clr.split(':').join('/') + '/insights.html'
                        let hrefs = result.e.map(_ => {
                            let _href = `${taglink_prefix}?g=${encodeURIComponent('insights-topic:' + _)}`
                            let _title = _
                            if (translations[_]) {
                                _title = translations[_]
                            }
                            return `<a href=${_href}>${_title}</a>`
                        }).join('')
                        resultsHTML += `<p class="eyebrow">${hrefs}</p>`;
                    }
                }

                resultsHTML += "</div>";
                if (result.i) {
                    resultsHTML += "<a href='" + result.l + "' class='img'><img data-srcset='" + result.i + "' alt='' class='lazy' width='900' height='490' ></a>";
                }


                resultsHTML += "</li>";
            });

            return $(resultsHTML);
        }

        var renderFilters = function (groups) {
            var filtersHTML = "",
                orderedTags = translations.tags,
                productList = []
            // productList = JSON.parse($("#search-product").val())["products"];
            // productList = ['etfs']
            // productList.push("InsightsMore");
            // Maping the result tags to the ordered tags object
            $.each(groups, function (i, group) {
                var tagGroup = orderedTags[group.k];
                if (!tagGroup) {
                    tagGroup = {
                        child: {}
                    };
                }

                tagGroup.visible = true;
                // tagGroup.count = group.count;

                if (!isInsightsPage) {
                    $.each(productList, function (i, product) {
                        if (!tagGroup.child[product]) {
                            tagGroup.child[product] = { visible: true, count: 0 };
                        }
                    })
                }
                $.each(group.ctgs, function (j, ctg) {
                    var subTag = tagGroup.child[ctg.k];
                    subTag = subTag || {};
                    subTag.visible = true;
                    subTag.count = ctg.count;
                    tagGroup.child[ctg.k] = subTag;
                });
                orderedTags[group.k] = tagGroup;
            });

            var i = 0;
            $.each(orderedTags, function (key, group) {
                if (group.visible) {
                    if (key === "ResultType") {
                        filtersHTML += "<li class='category checkbox-group' data-key='" + key + "'>";
                    } else {
                        filtersHTML += "<li class='category checkbox-group" + (i !== 0 ? " collapsed" : "") + "' data-key='" + key + "'>";
                        filtersHTML += "<a href='#' class='category-name'>" + translations[key] + "<svg class='ssmpsvg ssmpsvg-s caret-down'><use xlink:href='#caret-down'></use></svg>" + "</a>";
                    }

                    filtersHTML += "<ul class='sub-categories'>";
                    $.each(group.child, function (key, ctg) {
                        if (ctg.visible) {
                            filtersHTML += "<li class='ctg checkbox' data-key='" + key + "' data-count='" + ctg.count + "'>" + "<svg class='ssmpsvg close'><use xlink:href='#close'></use></svg>" + translations[key];
                            if (!isInsightsPage) {
                                filtersHTML += " (" + ctg.count + ")";
                            }
                            filtersHTML += "</li>";
                        }
                    });

                    filtersHTML += "</ul></li>";
                    i++;
                }
            });

            $searchComp.find(".filters-list .dynamic-filters").replaceWith(filtersHTML);
        }

        var renderBanners = function (bannerSettings, filters) {
            var setBanner = {};
            var $bannerList = $searchComp.find(".banner-list");
            var $insightBanner = $bannerList.find(".insights-banner").eq(0);
            var tag = filters[0].key + "/" + filters[0].value[0];
            var tagClass = tag.replace("/", "__");
            if ($bannerList.find("." + tagClass).length == 1) {
                $(".insights-banner").removeClass("visible");
                $bannerList.find("." + tagClass).addClass("visible");
                $bannerList.addClass("visible");
            } else {
                $.each(bannerSettings, function (i, banner) {
                    if (banner.tag == tag) {
                        setBanner = bannerSettings[i];
                        var $newBanner = "";
                        if ($insightBanner.hasClass("insights-banner-templete")) {
                            $insightBanner.removeClass("insights-banner-templete");
                            $newBanner = $insightBanner;
                        } else {
                            $newBanner = $insightBanner.clone(true).attr("class", "insights-banner aem-GridColumn aem-GridColumn--default--12 aem-GridColumn--tablet--12 aem-GridColumn--phone--12");
                        }
                        $newBanner.addClass(tagClass);
                        $newBanner.css("background-color", setBanner.bgColor);
                        if (ssmpCore.checkGray(setBanner.bgColor)) {
                            $newBanner.css("color", "#fff");
                            $newBanner.find(".banner-cta").addClass("ssmp-ctalink--button-outlined");
                        } else {
                            if (ssmpCore.SITE == "paif") {
                                $newBanner.css("color", "#262626");
                            } else {
                                $newBanner.css("color", "#273F33");
                            }
                            $newBanner.find(".banner-cta").removeClass("ssmp-ctalink--button-outlined");
                        }
                        var tagTitle = setBanner.tagTitle || $searchComp.find(".filter-label").html();
                        $newBanner.find(".banner-title h2").html(tagTitle);
                        if (setBanner.description) {
                            $newBanner.find(".banner-desc").html(setBanner.description);
                            $newBanner.find(".banner-desc").show();
                        } else {
                            $newBanner.find(".banner-desc").hide();
                        }
                        if (setBanner.ctaLabel && setBanner.ctaLink) {
                            $newBanner.find(".ssmp-ctalink").html("<a class='ssmp-ctalink__link' href=''>" + setBanner.ctaLabel + "</a>");
                            var pattern = /\.(?:doc|docx|eps|jpg|png|svg|xls|ppt|pptx|pdf|xlsx|tab|csv|zip|txt|vsd|vxd|xml|js|css|rar|exe|wma|mov|avi|wmv|mp3|wav|m4v)/i;
                            var pathname = setBanner.ctaLink;
                            if (pathname && pathname.indexOf("/library-content/") === 0 && pattern.test(setBanner.ctaLink)) {
                                $newBanner.find(".ssmp-ctalink__link").attr("target", "_blank");
                                var pageLocation = ssmpCore.getPageLocation() || 'hk',
                                    pageLanguage = ssmpCore.getPageLanguage() || 'en',
                                    pageRole = ssmpCore.getPageRole() || 'individual',
                                    pageProduct = ssmpCore.getPageProduct() || 'etfs';
                                if (pageLocation && pageLanguage && pageRole && pageProduct) {
                                    setBanner.ctaLink = setBanner.ctaLink.replace("/library-content/", "/" + pageLocation + "/" + pageLanguage + "/" + pageRole + "/" + pageProduct + "/library-content/");
                                }
                            }
                            $newBanner.find(".ssmp-ctalink__link").attr("href", setBanner.ctaLink);
                            $newBanner.find(".banner-cta").show();
                        } else {
                            $newBanner.find(".ssmp-ctalink").html('');
                            $newBanner.find(".banner-cta").hide();
                        }
                        if (setBanner.image) {
                            var imgHtml = "<img class='cmp-image__image' src='" + setBanner.image + "' alt=''>";
                            $newBanner.find(".banner-img").html(imgHtml);
                        } else {
                            $newBanner.find(".banner-img").html('');
                        }
                        $bannerList.append($newBanner);
                        $newBanner.addClass("visible");
                        $bannerList.addClass("visible");
                        return false;
                    }
                })
            }
        }

        $(window).resize(function () {
            if (document.body.offsetWidth < 840) {
                $searchComp.find(".insights-banner .banner-img").each(function () {
                    $(this).insertAfter($(this).closest(".insights-banner").find(".banner-title"));
                })
            } else {
                $searchComp.find(".insights-banner .banner-img").each(function () {
                    $(this).appendTo($(this).closest(".insights-banner").find(".banner-right"));
                })
            }
        });

        var dataParams = {
            "geoloc": ssmpCore.getPageLocation() + ":" + ssmpCore.getPageLanguage(),
            "roleproduct": ssmpCore.getPageRole() + ":" + ssmpCore.getPageProduct(),
            "site": ssmpCore.SITE
        };

        if (keywords) {
            $searchComp.find(".keywords").html(keywords);
            dataParams["q"] = keywords;

            // Start Adobe atrack search result page and define digitalData
            ssmpCore.isDigitalData("search");
            // End Adobe atrack search result page and define digitalData

        } else if (isInsightsPage) {
            dataParams["n"] = INSIGHTS_KEY;
        }

        let _val = $('#search-type').val()
        let _type = 'Others'
        if (_val && _val == 'insights') {
            _type = 'Insights'
        }
        if (_val && _val == 'solutions') {
            _type = 'Solutions'
        }
        _fetch(_type, dataParams["q"])
            .then(data => {
                if (data.status === "success" && data.hits.total > 0) {
                    $searchComp.removeClass("place");
                    var loadCounts = RESULT_PER_VIEW,
                        $results = renderResults(data.results),
                        $filtered;

                    renderFilters(data.hits.groups);

                    var applyFiltersFunc = function (filters) {
                        var self = this,
                            filterSelector = "",
                            filterLabels = "";
                        $filtered = $results;
                        loadCounts = RESULT_PER_VIEW;

                        if (filters.length > 0) {
                            var mediaTypes = filters[filters.length - 1].key == "media-type" ? filters.pop() : "";
                            if (mediaTypes) {
                                if (filters.length == 0) {
                                    $.each(mediaTypes.value, function (k, media) {
                                        filterSelector += ".ctg-media-type-" + media + ", ";
                                    });
                                } else {
                                    $.each(filters, function (i, ele) {
                                        $.each(ele.value, function (j, ctg) {
                                            $.each(mediaTypes.value, function (k, media) {
                                                filterSelector += ".ctg-media-type-" + media + ".ctg-" + ele.key + "-" + ctg + ", ";
                                            });
                                            filterLabels += translations[ctg] + "; ";
                                        });
                                    })
                                }
                                filters.push(mediaTypes);
                                filterLabels += mediaTypes.value.map(function (item) {
                                    return translations[item];
                                }).join("; ");
                            } else {
                                $.each(filters, function (i, ele) {
                                    $.each(ele.value, function (j, ctg) {
                                        filterSelector += ".ctg-" + ele.key + "-" + ctg + ", ";
                                        filterLabels += translations[ctg] + "; ";
                                    });
                                })
                            }
                            if (filterSelector) {
                                filterSelector = filterSelector.replace(/,\s*$/, "");
                                $filtered = $filtered.filter(filterSelector);
                                if (isInsightsPage) {
                                    $searchComp.find(".filter-label").html(filterLabels.replace(/;\s*$/, "")).addClass("visible");
                                    $searchComp.find(".keywords").hide();
                                }
                            }
                        } else if (isInsightsPage) {
                            $searchComp.find(".filter-label").removeClass("visible");
                            $searchComp.find(".keywords").show();
                        }
                        self.setResultsNum(data.hits.total, $filtered.length);

                        // Set banner message for insights page
                        var selectedCount = $searchComp.find(".ssmp-filters .checkbox.selected").length;
                        if (selectedCount == 1 && isInsightsPage) {
                            renderBanners(bannerSettings, filters)
                        } else {
                            $(".banner-list").removeClass("visible");
                            $(".insights-banner").removeClass("visible");
                        }
                        if ($(".banner-list").hasClass("visible")) {
                            $searchComp.find(".keywords").hide();
                            $searchComp.find(".filter-label").removeClass("visible");
                        }

                        // Get loadCounts and Clicked Result Item Index from session storage
                        var loadCountsInSession = sessionStorage.getItem("loadCounts"),
                            scrollPosition = sessionStorage.getItem("scrollPosition");
                        if (loadCountsInSession) {
                            loadCounts = loadCountsInSession - 0;
                            sessionStorage.removeItem("loadCounts");
                        }

                        if ($filtered.length > loadCounts) {
                            $searchComp.find(".ssmp-load-more").css("display", "inline-block");
                            $searchComp.find(".results-list").html($filtered.slice(0, loadCounts));
                            ssmpLazyLoad.lazyLoadForImages();

                        } else {
                            $searchComp.find(".ssmp-load-more").hide();
                            $searchComp.find(".results-list").html($filtered);
                            ssmpLazyLoad.lazyLoadForImages();
                        }

                        if (scrollPosition) {
                            $("html").scrollTop(scrollPosition);

                            sessionStorage.removeItem("scrollPosition");
                        }

                        if ($filtered.length <= 0) {
                            $searchComp.find(".no-result").show();
                        } else {
                            $searchComp.find(".no-result").hide();
                        }
                    };

                    $searchComp.find(".ssmp-load-more").click(function (e) {
                        e.preventDefault();
                        $searchComp.find(".results-list").append($filtered.slice(loadCounts, RESULT_PER_VIEW + loadCounts));
                        ssmpLazyLoad.lazyLoadForImages();
                        loadCounts += RESULT_PER_VIEW;

                        if ($filtered.length <= loadCounts) {
                            $(this).hide();
                        }
                    });

                    let result_lists = document.getElementsByClassName("results-list");
                    if (result_lists.length == 1) {
                        let list = result_lists[0];
                        list.addEventListener('click', (ele, ev) => {
                            sessionStorage.setItem("loadCounts", loadCounts);
                            sessionStorage.setItem("scrollPosition", $("html").scrollTop());
                            let _src = ele.srcElement;
                            let details = _src.closest(".details");
                            let _title = details.querySelector(".title a");
                            let _p = _src.closest("p.eyebrow");
                            if (_p) {
                                _title = _src
                            }
                            _title.setAttribute("event-info", true);
                            let title = _title.textContent;
                            let url = _title.getAttribute("href");
                            let mediaType = details.querySelector(".media-type").textContent;
                            let pdate = details.querySelector("p.date-author span").textContent;
                            if (window._satellite) {
                                if (window.digitalData.search) {
                                    window.digitalData.search.internalClickedPageTitle = title;
                                    window.digitalData.search.internalSearchURL = url;
                                    window.digitalData.search.mediaType = mediaType;
                                    window.digitalData.search.publishedDate = pdate;
                                    window._satellite.track("internalSearchResultClick");
                                }
                                if (window.digitalData.insights) {
                                    window.digitalData.insights.insightsClickedPageTitle = title;
                                    window.digitalData.insights.insightsURL = url;
                                    window.digitalData.insights.mediaType = mediaType;
                                    window.digitalData.insights.publishedDate = pdate;
                                    window._satellite.track("insightsSearchClick");
                                }
                                if (window.digitalData.solutions) {
                                    window.digitalData.solutions.solutionsClickedPageTitle = title;
                                    window.digitalData.solutions.solutionsURL = url;
                                    window.digitalData.solutions.mediaType = mediaType;
                                    window._satellite.track("solutionsSearchClick");
                                }
                            }
                        })
                    }

                    new Filters($searchComp.find(".ssmp-filters"), applyFiltersFunc, true);

                    // Start Adobe Atrack search result success
                    if (keywords || _type == 'Insights' || _type == 'Solutions') {
                        if (keywords && _type == 'Others') {
                            window.digitalData.search = {
                                searchKeyword: keywords,
                                searchSuccess: true,
                                searchResults: data.hits.total,
                                searchFilter: ""
                            }
                            if (window._satellite) {
                                window._satellite.track("internalSearch");
                            }
                        }
                        if (_type == 'Insights') {
                            window.digitalData.insights = {
                                searchSuccess: true,
                                insightsResults: data.hits.total,
                                insightsFilter: "",
                                mediaType: ""
                            }
                        }
                        if (_type == 'Solutions') {
                            window.digitalData.solutions = {
                                searchSuccess: true,
                                solutionsResults: data.hits.total,
                                solutionsFilter: ""
                            }
                        }
                    }
                    // End Adobe Atrack search result success

                } else {
                    $searchComp.find(".no-result").show();

                    // Start Adobe Atrack ssearch result fail
                    if (keywords) {
                        window.digitalData.search = {
                            searchKeyword: keywords,
                            searchSuccess: false,
                            searchResults: 0,
                            searchFilter: ""
                        }
                        if (window._satellite) {
                            window._satellite.track("internalSearch");
                        }
                    }
                    // End Adobe Atrack search result fail
                }
                $(window).trigger("resize");
            })
            .catch(err => {
                $searchComp.find(".no-result").show();
                // Start Adobe Atrack ssearch result fail
                if (keywords) {
                    window.digitalData.search = {
                        searchKeyword: keywords,
                        searchSuccess: false,
                        searchResults: 0,
                        searchFilter: ""
                    }
                    if (window._satellite) {
                        window._satellite.track("internalSearch");
                    }
                }
                // End Adobe Atrack search result fail
            })


        // remove parameters if CLR switched (keep search params)
        var oldUrl = document.referrer || "",
            newUrl = window.location.href || "",
            newNoQuery = "",
            paramsStr = "",
            oldParseAdd = ssmpCore.parseSSMPWebAddress(oldUrl),
            oldLocation = oldParseAdd.clrp.location,
            oldLanguage = oldParseAdd.clrp.language,
            oldRole = oldParseAdd.clrp.role,
            newParseAdd = ssmpCore.parseSSMPWebAddress(newUrl),
            newLocation = newParseAdd.clrp.location,
            newLanguage = newParseAdd.clrp.language,
            newRole = newParseAdd.clrp.role;
        if (newUrl) {
            newNoQuery = newUrl.split('?');
        }
        if (oldUrl && ((oldLocation !== newLocation) || (oldLanguage !== newLanguage)
            || (oldRole !== newRole)) && newNoQuery.length > 1) {
            var paramsArr = newNoQuery[1].split('&');
            paramsArr.forEach(function (item) {
                if (item.charAt(0) == 'q') {
                    paramsStr = '?' + item;
                }
            })
            var parAnchor = newNoQuery[1].split('#').length > 1 ? ('#' + newNoQuery[1].split('#')[1]) : '';
            var updateUrl = newNoQuery[0] + paramsStr + parAnchor;
            window.history.pushState(null, "", updateUrl);
        }
    }
}(window, window.jQuery, window["ssmp-js-core"], window["ssmp-lazy-load"]));

function _adapt(item) {
    var _a;
    let res = {};
    res.c = [];
    if (item.clientTypes) {
        item.clientTypes.forEach(_ => {
            res.c.push(`client-type/${_}`);
        });
    }
    if (item.insightsType) {
        res.c.push(`insights-type/${item.insightsType}`);
    }
    if (item.insightsSection) {
        res.c.push(`insights-section/${item.insightsSection}`);
    }
    if (item.insightsTopics) {
        item.insightsTopics.forEach(_ => {
            res.c.push(`insights-topic/${_}`);
        });
    }
    if (item.coreCapability) {
        res.c.push(`core-capability/${item.coreCapability}`);
    }
    if (item.solutionsCategories) {
        item.solutionsCategories.forEach(_ => {
            res.c.push(`solutions-category/${_}`);
        });
    }
    if (item.mediaType) {
        res.c.push(`media-type/${item.mediaType}`);
    }
    res.k = item.title;
    res.l = item.url;
    if (item.digest) {
        res.d = item.digest;
    }
    else if (item.content) {
        res.d = item.content.slice(0, 500) + '...';
    }
    else {
        res.d = null;
    }
    let dt = new Date((_a = item.tstamp) !== null && _a !== void 0 ? _a : 0);
    res.t = dt.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
    res.a = null;
    if (item.authors) {
        res.a = item.authors.map(_ => ({
            n: _,
            u: ""
        }));
    }
    if (item.insightsTopics) {
        res.e = item.insightsTopics;
    }
    if (item.mediaType) {
        res.m = item.mediaType;
    }
    res.i = item.image;
    res.p = null;
    res.r = null;
    res.b = null;
    res.o = null;
    return res;
}
function _fetch(siteSection, title) {
    let _clr = null;
    if (window['getCookie']) {
        _clr = getCookie('stt-clr');
    }
    else {
        return;
    }
    if (!_clr) {
        return;
    }
    let clr_prefix = _clr.split(':').join('/');
    let _params;
    if (siteSection == 'Insights' || siteSection == 'Solutions') {
        _params = [`url:*${clr_prefix}*`, `siteSection:${siteSection}`];
    }
    else {
        _params = [`url:*${clr_prefix}*`, `"${title}"`];
    }
    let _params_str = encodeURIComponent(_params.join(' AND '));
    let input = document.getElementById('solrAPI');
    let solrCollection = input.getAttribute('value');
    let docsquery = `${solrCollection}indent=true&q.op=OR&q=${_params_str}&rows=1000&start=0&sort=tstamp%20desc`;
    return fetch(docsquery)
        .then(x => x.json())
        .then(x => {
            let res = {};
            res.msg = null;
            res.status = x.responseHeader.status == 0 ? 'success' : 'failure';
            res.results = [];
            x.response.docs.forEach(_ => {
                try {
                    res.results.push(_adapt(_));
                }
                catch (err) {
                }
            });
            let grps = [];
            let cates = [];
            if (siteSection == 'Others') {
                cates = ['insights-topic', 'insights-section', 'core-capability', 'solutions-category'];
            }
            if (siteSection == 'Insights') {
                cates = ['insights-topic', 'insights-section'];
            }
            if (siteSection == 'Solutions') {
                cates = ['core-capability'];
            }
            cates.forEach(_ => {
                grps.push({
                    k: _,
                    v: null,
                    ctgs: []
                });
            });
            res.results.forEach(__ => {
                __.c.forEach(_ => {
                    let arr = _.split('/');
                    let idx = grps.findIndex(x => x.k == arr[0]);
                    if (idx != -1 && arr[1]) {
                        let _idx = grps[idx].ctgs.findIndex(u => u.k == arr[1]);
                        if (_idx == -1) {
                            grps[idx].ctgs.push({
                                k: arr[1],
                                v: null,
                                count: 1,
                                ctgs: null
                            });
                        }
                        else {
                            grps[idx].ctgs[_idx].count += 1;
                        }
                    }
                });
            });
            res.hits = {
                page: 0,
                total: x.response.docs.length,
                time: 0.1,
                groups: grps
            };
            return res;
        });
}

function track_contact_us(success) {
    if (window._satellite) {
        if (success) {
            if (window.digitalData && window.digitalData.page && window.digitalData.page.pageInfo) {
                let _pageName = window.digitalData.page.pageInfo.pageName
                window.digitalData.page.pageInfo.formAction = _pageName + ":contactus:success"
            }
            window._satellite.track("contactUsSuccess");
        } else {
            if (window.digitalData && window.digitalData.page && window.digitalData.page.pageInfo) {
                let _pageName = window.digitalData.page.pageInfo.pageName
                window.digitalData.page.pageInfo.formAction = _pageName + ":contactus:failure"
            }
            window._satellite.track("contactUsFailure");
        }
    }
}

function track_lead_gen(success) {
    if (window._satellite) {
        if (success) {
            if (window.digitalData && window.digitalData.page && window.digitalData.page.pageInfo) {
                let _pageName = window.digitalData.page.pageInfo.pageName
                window.digitalData.page.pageInfo.formAction = _pageName + ":signupform:success"
            }
            window._satellite.track("leadGenSuccess");
        } else {
            if (window.digitalData && window.digitalData.page && window.digitalData.page.pageInfo) {
                let _pageName = window.digitalData.page.pageInfo.pageName
                window.digitalData.page.pageInfo.formAction = _pageName + ":signupform:failure"
            }
            window._satellite.track("leadGenFailure");
        }
    }
}


(function (win, $, ssmp) {
	"use strict";

	$(document).ready(function () {
		$(".contact-us-button").hover(function () {
			$(this).css("background-color", "#0A2F5D");
			$(".submit-button").css("background-color", "#0A2F5D");
			$(".submit-button").css("color", "white");
		},
			function () {
				$(this).css("background-color", "white");
				$(".submit-button").css("background-color", "white");
				$(".submit-button").css("color", "#0A2F5D");

			});
		$(document).on('click', '#contact-us-button', function (e) {    //click submit button action
			e.preventDefault();
			$("#success").css("display", "none");
			$("#failure").css("display", "none");
			if (!validateContactForm(true)) {
				$(".errormsg").css("display", "block");
				$('.fieldError input, .fieldError textarea').eq(0).focus();
				track_contact_us(false)
				return false;
			} else {
				var postData = $('#conatct-us-form').serializeArray();
				var formURL = $('#conatct-us-form').attr("action");
				var formName = $('#conatct-us-form').attr('name');
				var eventName = "";
				$.ajax({
					url: formURL,
					type: "POST",
					data: postData,
					success: function (data) {
						if (data.status) {
							$("#success").css("display", "block");
							$("#failure").css("display", "none");
							$(".errormsg").attr("style", "display:none");
							$('#conatct-us-form')[0].reset();
							$(".error").css("display", "none");
							$(".checkbox-error").css("display", "none");

							//top focus
							$("#success").attr("tabindex", -1);
							$('html,body').animate({ scrollTop: $('#conatct-us-form').offset().top - 100 });


						} else {
							$("#success").css("display", "none");
							$(".errormsg").attr("style", "display:none");
							$("#failure").css("display", "block");
							$(".checkbox-error").css("display", "none");
							//top focus
							$("#failure").attr("tabindex", -1);
							$('html,body').animate({ scrollTop: $('#conatct-us-form').offset().top - 100 });

						}
						track_contact_us(true)
					},
					error: function (jqXHR, textStatus, errorThrown) {
						$("#success").css("display", "none");
						$(".errormsg").attr("style", "display:none");
						$("#failure").css("display", "block");
						$("#failure").attr("tabindex", -1);
						$('html,body').animate({ scrollTop: $('#conatct-us-form').offset().top - 100 });
						track_contact_us(false)
					}
				});
			}

		});

	});

	var getUnicodeWords = function (text) {
		var words = [], m, r = /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+/g;
		while ((m = r.exec(text))) {
			words.push(m[0])
		}
		return words;
	};

	function isEmpty(inputValue) {
		return !(inputValue != null && inputValue.trim() !== "");
	}

	function isAlpha(inputVal) {
		var inputText = inputVal.trim();
		var unicodeWords = getUnicodeWords(inputText);

		return !(unicodeWords.length == 0 || unicodeWords.join(' ') != inputText);
	}

	function validateEmail(email) {
		if (!isEmpty(email)) {
			var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			return re.test(email);
		}
		return false;
	}

	function isValidPhoneOrFax(inputtxt) {
		if (isEmpty(inputtxt)) {
			return true;
		} else if (null != inputtxt.match(/\d/g) && inputtxt.match(/\d/g).length > 9) {
			var res = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g;
			return res.test(inputtxt);
		}
		return false;
	}

	function validateContactForm(showErrorMsg) {

		var fnameObj = $('#fname');
		var lnameObj = $('#lname');
		var organizationObj = $("#organization");
		var emailObj = $('#email');
		var topicObj = $('#topic');
		var phoneObj = $('#phone');
		var locationObj = $('#location');
		var agreementObj = $("input:checkbox[name='agreement-checkbox']");
		var result = true;
		if (isEmpty(fnameObj.val()) || !isAlpha(fnameObj.val())) {
			if (showErrorMsg) {
				$(".fname .error").css("display", "block");
			}
			result = false;
		} else {
			$(".fname .error").css("display", "none");
		}

		if (isEmpty(lnameObj.val()) || !isAlpha(lnameObj.val())) {
			if (showErrorMsg) {
				$(".lname .error").css("display", "block");
			}
			result = false;
		} else {
			$(".lname .error").css("display", "none");
		}

		if (!agreementObj.is(":checked")) {
			if (showErrorMsg) {
				$(".agreement-block .checkbox-error").css("display", "block");
			}
			result = false;
		} else {
			$(".agreement-block .checkbox-error").css("display", "none");
		}
		if (isEmpty(organizationObj.val())) {
			if (showErrorMsg) {
				$(".organization .error").css("display", "block");
			}
			result = false;
		} else {
			$(".organization .error").css("display", "none");
		}

		if (!validateEmail(emailObj.val())) {
			if (showErrorMsg) {
				$(".email .error").css("display", "block");
			}
			result = false;
		} else {
			$(".email .error").css("display", "none");
		}
		if (!isValidPhoneOrFax(phoneObj.val())) {
			if (showErrorMsg) {
				$(".phone-number .error").css("display", "block");
			}
			result = false;
		} else {
			$(".phone-number .error").css("display", "none");
		}

		if ($("select#topic option:selected").val() === "") {
			if (showErrorMsg) {
				$(".select-topic-for-query .error").css("display", "block");

			}
			result = false;
		} else {

			$(".select-topic-for-query .error").css("display", "none");

		}

		if ($("select#location option:selected").val() === "") {
			if (showErrorMsg) {

				$(".organization-location .error").css("display", "block");

			}
			result = false;
		}

		else {

			$(".organization-location .error").css("display", "none");

		}
		return result;
	}

}(window, window.jQuery, window["ssmp-js-core"]));

(function (win, $, ssmp) {
    "use strict";

    $(document).ready(function () {
        $("#contact-submit").addClass("disabled");//disable the submit button

        $(document).on('click', '#contact-submit', function () {    //click submit button action
            if ($(this).hasClass("disabled")) {
                return false;
            }

            $('#unsubscribe-form .errMsg').hide();
            var validation = validateContactForm(true);

            if (!validation) {
                $('.fieldError input, .fieldError textarea').eq(0).focus();
                track_lead_gen(false)
                return false;
            } else {
                var formArr = $("#unsubscribe-form").serializeArray(),
                    formData = {};
                formArr.forEach(function (item, index) {
                    var key = item.name,
                        label = $("input[name=" + key + "], textarea[name=" + key + "]").closest(".row").find("label").first().text();
                    item["label"] = label;
                    formData[index] = item;
                });
                
                //alert(formArr);
                $.ajax({
                    // method: "Get",
                    // url: window.location.href,
                    // dataType: "text",
                    method: "Post",
                    url: "/bin/stt/unsubscribe",
                    data: JSON.stringify(formData),
                    contentType: "application/json; charset=utf-8",
                }).done(function (response) {
                    //$("#unsubscribe-form .form-detail").slideUp("fast");
                    //alert(response);
                    document.getElementById("unsubscribe-form").reset();
                    //$("html, body").animate({ scrollTop: 0 });
                    //on author env, we need to add ?wcmmode=disabled, the pop up modal can work
                    //ssmp.modal.showModal("#ssmp-success-panel-modal");
                    $(".unsubscribe-success-message").show();
                    $("#unsubscribe-form").hide();
                    track_lead_gen(true)
                }).fail(function () {
                    $("#contact-submit").removeClass('disabled');
                    track_lead_gen(false)
                });
                return false;
            }

        });

        //required field show up
        $("#unsubscribe-form").find("input, textarea").blur(function () {//required field show up
            var result = true;
            var fieldId = $(this).attr("id");
            if (fieldId && fieldId.toLowerCase().indexOf("name") >= 0) {
                var testName = isAlpha($(this).val());
                if (isEmpty($(this).val()) || !testName) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("organization" == fieldId || "feedback-content" == fieldId) {
                if (isEmpty($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("email" == fieldId) {
                if (isEmpty($(this).val()) || !validateEmail($(this).val())) {
                    highlightErrorFields($(this));
                    result = false;
                }
            } else if ("phone" == fieldId && (isEmpty($(this).val()) || !isValidPhoneOrFax($(this).val()) || $(this).val().length < 9)) {
                highlightErrorFields($(this));
                result = false;
            }

            if (result) {
                clearHighlight($(this));
            }
        }).change(function () {
            if (validateContactForm(false)) {
                $("#contact-submit").removeClass("disabled");
            } else {
                $("#contact-submit").addClass("disabled");
            }
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            e.preventDefault();
            ssmp.modal.hideModal("#ssmp-success-panel-modal");
        });

        $(".ssmp-ctalink").on("click", "#ssmp-success-close", function (e) {
            $('#unsubscribe-form .errMsg').hide();
            $("#unsubscribe-form .fieldError").removeClass("fieldError");
            $("#unsubscribe-form .fieldErrorLabel").removeClass("fieldErrorLabel");
            document.getElementById("unsubscribe-form").reset();
            //$("#unsubscribe-form .form-detail").slideUp("fast");
            $("html, body").animate({ scrollTop: 0 });
            $("#contact-submit").addClass("disabled");
        });

    });

    var getUnicodeWords = function (text) {
        var words = [],
            m,
            r = /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+/g;
        while ((m = r.exec(text))) {
            words.push(m[0])
        }
        return words;
    };

    function isEmpty(inputValue) {
        return !(inputValue != null && inputValue.trim() !== "");
    }

    function isAlpha(inputVal) {
        var inputText = inputVal.trim();
        var unicodeWords = getUnicodeWords(inputText);

        return !(unicodeWords.length == 0 || unicodeWords.join(' ') != inputText);
    }

    function highlightErrorFields(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.addClass('fieldError');
        fieldRow.siblings('label').not(".radio-label").addClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "block");
    }

    function clearHighlight(errorField) {
        var fieldRow = errorField.closest(".row");
        fieldRow.removeClass('fieldError');
        fieldRow.siblings('label').removeClass('fieldErrorLabel');
        fieldRow.find(".errMsg").css("display", "none");
    }

    function validateEmail(email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }

    function isValidPhoneOrFax(inputtxt) {
        var isValidPhone = false;
        var eachNum = inputtxt.split(';');
        for (var i = 0; i < eachNum.length; i++) {
            var phone = eachNum[i];
            if (!isEmpty(phone)) {
                var res = phone.match(/^\+?([( 0-9 )])+(-[ 0-9 ;]+)*$/);
                if (res == null) {
                    isValidPhone = false;
                } else {
                    isValidPhone = true;
                }
            }
        }
        return isValidPhone;
    }
    function validateContactJapanForm(showErrorMsg) {
        var hFirstNameObj = $("#hiraganaFirstName");
        var testhFirstName = hFirstNameObj.val() ? isAlpha(hFirstNameObj.val()) : true;
        var hLastNameObj = $('#hiraganaLastName');
        var testhLastName = hLastNameObj.val() ? isAlpha(hLastNameObj.val()) : true;
        var kFirstNameObj = $("#katakanaFirstName");
        var testkFirstName = kFirstNameObj.val() ? isAlpha(kFirstNameObj.val()) : true;
        var kLastNameObj = $('#katakanaLastName');
        var testkLastName = kLastNameObj.val() ? isAlpha(kLastNameObj.val()) : true;
        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(hFirstNameObj.val()) || !testhFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(hFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(hFirstNameObj);
        }

        if (isEmpty(hLastNameObj.val()) || !testhLastName) {
            if (showErrorMsg) {
                highlightErrorFields(hLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(hLastNameObj);
        }
        if (isEmpty(kFirstNameObj.val()) || !testkFirstName) {
            if (showErrorMsg) {
                highlightErrorFields(kFirstNameObj);
            }
            result = false;
        } else {
            clearHighlight(kFirstNameObj);
        }

        if (isEmpty(kLastNameObj.val()) || !testkLastName) {
            if (showErrorMsg) {
                highlightErrorFields(kLastNameObj);
            }
            result = false;
        } else {
            clearHighlight(kLastNameObj);
        }

        if (!agreementObj.is(":checked")) {
            if (showErrorMsg) {
                highlightErrorFields(agreementObj);
            }
            result = false;
        } else {
            clearHighlight(agreementObj);
        }

        return result;
    }

    function validateContactForm(showErrorMsg) {
        var nameObj = $('#first-name');
        var lastnameObj = $('#last-name');
        //var organizationObj = $("#organization");
        var emailObj = $('#email');

        var testName = nameObj.val() ? isAlpha(nameObj.val()) : true;
        var testLastName = lastnameObj.val() ? isAlpha(lastnameObj.val()) : true;
        var testEmail = validateEmail(emailObj.val());


        var agreementObj = $("input:checkbox[name='agreementBox']");
        var result = true;

        if (isEmpty(nameObj.val()) || !testName) {
            if (showErrorMsg) {
                highlightErrorFields(nameObj);
            }
            result = false;
        } else {
            clearHighlight(nameObj);
        }

        if (isEmpty(lastnameObj.val()) || !testLastName) {
            if (showErrorMsg) {
                highlightErrorFields(lastnameObj);
            }
            result = false;
        } else {
            clearHighlight(lastnameObj);
        }

        // if (!agreementObj.is(":checked")) {
        //     if (showErrorMsg) {
        //         highlightErrorFields(agreementObj);
        //     }
        //     result = false;
        // } else {
        //     clearHighlight(agreementObj);
        // }


        // if (isEmpty(organizationObj.val())) {
        //     if (showErrorMsg) {
        //         highlightErrorFields(organizationObj);
        //     }
        //     result = false;
        // } else {
        //     clearHighlight(organizationObj);
        // }

        if (isEmpty(emailObj.val()) || !testEmail) {
            if (showErrorMsg) {
                highlightErrorFields(emailObj);
            }
            result = false;
        } else {
            clearHighlight(emailObj);
        }

        return result;
    }

}(window, window.jQuery, window["ssmp-js-core"]));

(function () {
    "use strict";

    var NS = "cmp";
    var IS = "search";

    var DELAY = 300; // time before fetching new results when the user is typing a search string
    var LOADING_DISPLAY_DELAY = 300; // minimum time during which the loading indicator is displayed
    var PARAM_RESULTS_OFFSET = "resultsOffset";

    var keyCodes = {
        TAB: 9,
        ENTER: 13,
        ESCAPE: 27,
        ARROW_UP: 38,
        ARROW_DOWN: 40
    };

    var selectors = {
        self: "[data-" + NS + '-is="' + IS + '"]',
        item: {
            self: "[data-" + NS + "-hook-" + IS + '="item"]',
            title: "[data-" + NS + "-hook-" + IS + '="itemTitle"]',
            focused: "." + NS + "-search__item--is-focused"
        }
    };

    var properties = {
        /**
         * The minimum required length of the search term before results are fetched.
         *
         * @memberof Search
         * @type {Number}
         * @default 3
         */
        minLength: {
            "default": 3,
            transform: function (value) {
                value = parseFloat(value);
                return isNaN(value) ? null : value;
            }
        },
        /**
         * The maximal number of results fetched by a search request.
         *
         * @memberof Search
         * @type {Number}
         * @default 10
         */
        resultsSize: {
            "default": 10,
            transform: function (value) {
                value = parseFloat(value);
                return isNaN(value) ? null : value;
            }
        }
    };

    var idCount = 0;

    const devHosts = ["10.56.241.30", "10.56.241.15", "10.56.241.6"];
    const qaHosts = ["10.56.240.37", "10.56.240.49", "10.56.240.54"];
    const uatHosts = ["10.57.82.17", "10.57.82.11", "10.57.82.42", "10.57.82.24", "10.57.82.15", "10.57.82.43", "10.57.82.8", "10.57.82.57"];
    const prdHosts = ["10.57.82.86", "10.57.82.90", "10.57.82.106", "10.57.82.93", "10.57.82.110"];
    const devSolrAPI = "https://dev-ams-www.statestreet.com/solr/sttdevcollection/select";
    const qaSolrAPI = "https://qa-ams-www.statestreet.com/solr/sttqacollection/select";
    const uatSolrAPI = "https://uat-ams-www.statestreet.com/solr/sttuatcollection/select";
    const prdSolrAPI = "https://prd-ams-www.statestreet.com/solr/sttprodcollection/select";

    function solrAPIByEnv() {
        var host_name = window.location.hostname;
        if (devHosts.includes(host_name) || host_name.includes("dev")) {//dev env
            return devSolrAPI;
        } else if (qaHosts.includes(host_name) || host_name.includes("qa")) {//qa env
            return qaSolrAPI;
        } else if (uatHosts.includes(host_name) || host_name.includes("uat")) {//uat env
            return uatSolrAPI;
        } else if (prdHosts.includes(host_name) || host_name.includes("prd")) {//prd env
            return prdSolrAPI;
        } else {
            return devSolrAPI;
        }
    }

    function readData(element) {
        var data = element.dataset;
        var options = [];
        var capitalized = IS;
        capitalized = capitalized.charAt(0).toUpperCase() + capitalized.slice(1);
        var reserved = ["is", "hook" + capitalized];

        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                var value = data[key];

                if (key.indexOf(NS) === 0) {
                    key = key.slice(NS.length);
                    key = key.charAt(0).toLowerCase() + key.substring(1);

                    if (reserved.indexOf(key) === -1) {
                        options[key] = value;
                    }
                }
            }
        }

        return options;
    }

    function toggleShow(element, show) {
        if (element) {
            if (show !== false) {
                element.style.display = "block";
                element.setAttribute("aria-hidden", false);
            } else {
                element.style.display = "none";
                element.setAttribute("aria-hidden", true);
            }
        }
    }

    function serialize(form) {
        var query = [];
        if (form && form.elements) {
            for (var i = 0; i < form.elements.length; i++) {
                var node = form.elements[i];
                if (!node.disabled && node.name) {
                    var param = [node.name, encodeURIComponent(node.value)];
                    query.push(param.join("="));
                }
            }
        }
        return query.join("&");
    }

    function mark(node, regex) {
        if (!node || !regex) {
            return;
        }

        // text nodes
        if (node.nodeType === 3) {
            var nodeValue = node.nodeValue;
            var match = regex.exec(nodeValue);

            if (nodeValue && match) {
                var element = document.createElement("mark");
                element.className = NS + "-search__item-mark";
                element.appendChild(document.createTextNode(match[0]));

                var after = node.splitText(match.index);
                after.nodeValue = after.nodeValue.substring(match[0].length);
                node.parentNode.insertBefore(element, after);
            }
        } else if (node.hasChildNodes()) {
            for (var i = 0; i < node.childNodes.length; i++) {
                // recurse
                mark(node.childNodes[i], regex);
            }
        }
    }

    function Search(config) {
        if (config.element) {
            // prevents multiple initialization
            config.element.removeAttribute("data-" + NS + "-is");
        }

        this._cacheElements(config.element);
        this._setupProperties(config.options);

        this._action = this._elements.form.getAttribute("action");
        window.solrPrefix = this._action
        this._resultsOffset = 0;
        this._hasMoreResults = true;

        //this._elements.input.addEventListener("input", this._onInput.bind(this));
        //this._elements.input.addEventListener("focus", this._onInput.bind(this));
        this._elements.input.addEventListener("keydown", this._onKeydown.bind(this));
        this._elements.clear.addEventListener("click", this._onClearClick.bind(this));
        document.addEventListener("click", this._onDocumentClick.bind(this));
        //this._elements.results.addEventListener("scroll", this._onScroll.bind(this));

        this._makeAccessible();
    }

    Search.prototype._displayResults = function () {
        if (this._elements.input.value.length === 0) {
            toggleShow(this._elements.clear, false);
            this._cancelResults();
        } else if (this._elements.input.value.length < this._properties.minLength) {
            toggleShow(this._elements.clear, true);
        } else {
            this._updateResults();
            toggleShow(this._elements.clear, true);
        }
    };

    Search.prototype._onScroll = function (event) {
        // fetch new results when the results to be scrolled down are less than the visible results
        if (this._elements.results.scrollTop + 2 * this._elements.results.clientHeight >= this._elements.results.scrollHeight) {
            this._resultsOffset += this._properties.resultsSize;
            //this._displayResults();
        }
    };

    Search.prototype._onInput = function (event) {
        var self = this;
        self._cancelResults();
        // start searching when the search term reaches the minimum length
        this._timeout = setTimeout(function () {
            self._displayResults();
        }, DELAY);
    };

    Search.prototype._onKeydown = function (event) {
        var self = this;

        switch (event.keyCode) {
            case keyCodes.TAB:
                if (self._resultsOpen()) {
                    event.preventDefault();
                }
                break;
            case keyCodes.ENTER:
                event.preventDefault();
                if (self._resultsOpen()) {
                    var focused = self._elements.results.querySelector(selectors.item.focused);
                    if (focused) {
                        //tracking
                        if (window._satellite) {
                            window._satellite.track("internalSearchComplete");
                        }

                        //click item
                        focused.click();
                    } else {
                        //tracking
                        if (window._satellite) {
                            window._satellite.track("internalSearchComplete");
                        }
                        //redirect
                        var q = self._elements.input.value;
                        /*
                        var sttCookie = getCookie('stt-clr');
                        if (sttCookie) {
                            var clrArray = sttCookie.split(":");
                            if (sttCookie.indexOf("undefined") == -1) {
                                var rl = "/content/statestreet/" + clrArray[0] + "/" + clrArray[1] + "/" + clrArray[2] + "/search-results.html?q=" + q;
                                window.location.href = rl;
                            } else {
                                window.location.href = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
                            }
                        } else {
                            window.location.href = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
                        }
                        */
                        var redirect_url = redirectByCLRPath(q);
                        window.location.href = redirect_url;
                    }
                } else {
                    //tracking
                    if (window._satellite) {
                        window._satellite.track("internalSearchComplete");
                    }

                    //redirect
                    var q = self._elements.input.value;
                    /*                    
                    var sttCookie = getCookie('stt-clr');
                    if (sttCookie) {
                        var clrArray = sttCookie.split(":");
                        if (sttCookie.indexOf("undefined") == -1) {
                            var rl = "/content/statestreet/" + clrArray[0] + "/" + clrArray[1] + "/" + clrArray[2] + "/search-results.html?q=" + q;
                            window.location.href = rl;
                        } else {
                            window.location.href = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
                        }
                    } else {
                        window.location.href = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
                    }
                    */
                    var redirect_url = redirectByCLRPath(q);
                    window.location.href = redirect_url;
                }
                break;
            case keyCodes.ESCAPE:
                self._cancelResults();
                break;
            case keyCodes.ARROW_UP:
                if (self._resultsOpen()) {
                    event.preventDefault();
                    self._stepResultFocus(true);
                }
                break;
            case keyCodes.ARROW_DOWN:
                if (self._resultsOpen()) {
                    event.preventDefault();
                    self._stepResultFocus();
                } else {
                    // test the input and if necessary fetch and display the results
                    self._onInput();
                }
                break;
            default:
                return;
        }
    };

    function redirectByCLRPath(q) {
        var redirect_url;
        var pathArray = window.location.pathname.split('/');
        if (window.location.pathname.indexOf("/content/statestreet") < 0) {//Dispatcher Url
            if (pathArray.length < 4) {//clr
                redirect_url = redirectByCLRCookie(q);
            } else {//pathname
                var clr_r = pathArray[3].replace('.html', '');
                redirect_url = "/content/statestreet/" + pathArray[1] + "/" + pathArray[2] + "/" + clr_r + "/search-results.html?q=" + q;
                //window.location.href = redirect_url;
            }
        } else {//Author url
            if (pathArray.length < 6) {//clr
                redirect_url = redirectByCLRCookie(q);
            } else {//pathname
                var clr_r = pathArray[5].replace('.html', '');
                redirect_url = "/content/statestreet/" + pathArray[3] + "/" + pathArray[4] + "/" + clr_r + "/search-results.html?q=" + q;
                //window.location.href = redirect_url;
            }
        }
        return redirect_url;
    }
    function redirectByCLRCookie(q) {
        var redirect_url;
        var sttCookie = getCookie('stt-clr');
        if (sttCookie) {
            var clrArray = sttCookie.split(":");
            if (sttCookie.indexOf("undefined") == -1) {
                redirect_url = "/content/statestreet/" + clrArray[0] + "/" + clrArray[1] + "/" + clrArray[2] + "/search-results.html?q=" + q;
                //window.location.href = redirect_url;
            } else {
                redirect_url = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
                //window.location.href = redirect_url;
            }
        } else {
            redirect_url = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
            //window.location.href = redirect_url;
        }
        return redirect_url;
    }

    Search.prototype._onClearClick = function (event) {
        event.preventDefault();
        this._elements.input.value = "";
        toggleShow(this._elements.clear, false);
        toggleShow(this._elements.results, false);
    };

    Search.prototype._onDocumentClick = function (event) {
        var inputContainsTarget = this._elements.input.contains(event.target);
        var resultsContainTarget = this._elements.results.contains(event.target);

        if (!(inputContainsTarget || resultsContainTarget)) {
            toggleShow(this._elements.results, false);
        }
    };

    Search.prototype._resultsOpen = function () {
        return this._elements.results.style.display !== "none";
    };

    Search.prototype._makeAccessible = function () {
        var id = NS + "-search-results-" + idCount;
        this._elements.input.setAttribute("aria-owns", id);
        this._elements.results.id = id;
        idCount++;
    };

    Search.prototype._generateItems = function (data, results) {
        var self = this;

        data.forEach(function (item) {
            var el = document.createElement("span");
            el.innerHTML = self._elements.itemTemplate.innerHTML;
            el.querySelectorAll(selectors.item.title)[0].appendChild(document.createTextNode(item.title));
            el.querySelectorAll(selectors.item.self)[0].setAttribute("href", item.url);
            results.innerHTML += el.innerHTML;
        });
        /*
        var lm = document.createElement("span");
        lm.innerHTML = self._elements.itemTemplate.innerHTML;
        lm.querySelectorAll(selectors.item.title)[0].appendChild(document.createTextNode("More Results"));
        lm.querySelectorAll(selectors.item.self)[0].setAttribute("href", "https://google.com");
        results.innerHTML += lm.innerHTML;
        */

        var q = self._elements.input.value;
        /*  
        var rl = "";      
        var sttCookie = getCookie('stt-clr');
        if (sttCookie) {
            var clrArray = sttCookie.split(":");
            if (sttCookie.indexOf("undefined") == -1) {
                rl = "/content/statestreet/" + clrArray[0] + "/" + clrArray[1] + "/" + clrArray[2] + "/search-results.html?q=" + q;
            } else {
                rl = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
            }
        } else {
            rl = "/content/statestreet/us/en/asset-manager/search-results.html?q=" + q;
        }
        */
        //var rl = "/content/statestreet/" + clrArray[0] + "/" + clrArray[1] + "/" + clrArray[2] + "/search-results.html?q=" + q;
        //results.innerHTML += '<div class="cmp-search__item__bottom"><a class="cmp-search__item" href="' + rl + '"><span class="cmp-search__item-title">More Results</span></a></div>';
        var redirect_url = redirectByCLRPath(q);
        results.innerHTML += '<a class="cmp-search__item" data-cmp-hook-search="item" href="' + redirect_url + '"><span class="cmp-search__item-title cmp-search__item__bottom">More Results</span></a>';
    };

    Search.prototype._markResults = function () {
        var nodeList = this._elements.results.querySelectorAll(selectors.item.self);
        var escapedTerm = this._elements.input.value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        var regex = new RegExp("(" + escapedTerm + ")", "gi");

        for (var i = this._resultsOffset - 1; i < nodeList.length; ++i) {
            var result = nodeList[i];
            mark(result, regex);
        }
    };

    Search.prototype._stepResultFocus = function (reverse) {
        var results = this._elements.results.querySelectorAll(selectors.item.self);
        var focused = this._elements.results.querySelector(selectors.item.focused);
        var newFocused;
        var index = Array.prototype.indexOf.call(results, focused);
        var focusedCssClass = NS + "-search__item--is-focused";

        if (results.length > 0) {

            if (!reverse) {
                // highlight the next result
                if (index < 0) {
                    results[0].classList.add(focusedCssClass);
                } else if (index + 1 < results.length) {
                    results[index].classList.remove(focusedCssClass);
                    results[index + 1].classList.add(focusedCssClass);
                }

                // if the last visible result is partially hidden, scroll up until it's completely visible
                newFocused = this._elements.results.querySelector(selectors.item.focused);
                if (newFocused) {
                    var bottomHiddenHeight = newFocused.offsetTop + newFocused.offsetHeight - this._elements.results.scrollTop - this._elements.results.clientHeight;
                    if (bottomHiddenHeight > 0) {
                        this._elements.results.scrollTop += bottomHiddenHeight;
                    } else {
                        //this._onScroll();
                    }
                }

            } else {
                // highlight the previous result
                if (index >= 1) {
                    results[index].classList.remove(focusedCssClass);
                    results[index - 1].classList.add(focusedCssClass);
                }

                // if the first visible result is partially hidden, scroll down until it's completely visible
                newFocused = this._elements.results.querySelector(selectors.item.focused);
                if (newFocused) {
                    var topHiddenHeight = this._elements.results.scrollTop - newFocused.offsetTop;
                    if (topHiddenHeight > 0) {
                        this._elements.results.scrollTop -= topHiddenHeight;
                    }
                }
            }
        }
    };

    Search.prototype._updateResults = function () {
        var self = this;
        if (self._hasMoreResults) {
            var request = new XMLHttpRequest();

            var q = self._elements.input.value;
            var url = "";
            //url = self._action + "?" + serialize(self._elements.form) + "&" + PARAM_RESULTS_OFFSET + "=" + self._resultsOffset;
            //url = self._action; 
            /*                        
            if (self._action == null) {
                //set url default value
                //url = "http://localhost:8983/solr/coll3/select?" + serialize(self._elements.form);
                if (q == "*") {
                    url = "http://localhost:8983/solr/sttqacollection/select?indent=true&q.op=OR&q=title:%2A&rows=10&start=0";
                } else {
                    url = "http://localhost:8983/solr/sttqacollection/select?indent=true&q.op=OR&q=title:%2A" + q + "%2A" + "&rows=10&start=0";
                }
            } else {
                //url = self._action + "?" + serialize(self._elements.form);
                if (q == "*") {
                    url = self._action + "?indent=true&q.op=OR&q=title:%2A&rows=10&start=0";
                } else {
                    url = self._action + "?indent=true&q.op=OR&q=title:%2A" + q + "%2A&rows=10&start=0";
                }
            }
            */
            if (q == "*") {
                url = solrAPIByEnv() + "?indent=true&q.op=OR&q=title:%2A&rows=10&start=0";
            } else {
                url = solrAPIByEnv() + "?indent=true&q.op=OR&q=title:%2A" + q + "%2A&rows=10&start=0";
            }

            //console.log(self._elements.form.input.value);
            //console.log(serialize(self._elements.form));
            //console.log("URL : " + url);

            request.open("GET", url, true);
            request.onload = function () {
                // when the results are loaded: hide the loading indicator and display the search icon after a minimum period
                setTimeout(function () {
                    toggleShow(self._elements.loadingIndicator, false);
                    toggleShow(self._elements.icon, true);
                }, LOADING_DISPLAY_DELAY);
                if (request.status >= 200 && request.status < 400) {
                    // success status
                    var data = JSON.parse(request.responseText);
                    //var demoResult = '[{"url":"/content/we-retail/language-masters/en/women.html","path":"/content/we-retail/language-masters/en/women","lastModified":1457988163340,"description":null,"title":"Women"},{"url":"/content/we-retail/us/en/women.html","path":"/content/we-retail/us/en/women","lastModified":1457990338106,"description":null,"title":"Women"},{"url":"/content/we-retail/ca/en/women.html","path":"/content/we-retail/ca/en/women","lastModified":1477493024741,"description":null,"title":"Women"},{"url":"/content/we-retail/language-masters/en.html","path":"/content/we-retail/language-masters/en","lastModified":1533220305152,"description":null,"title":"English"},{"url":"/content/we-retail/language-masters/es.html","path":"/content/we-retail/language-masters/es","lastModified":1474672365159,"description":null,"title":"Español"},{"url":"/content/we-retail/language-masters/it.html","path":"/content/we-retail/language-masters/it","lastModified":1474672338372,"description":null,"title":"Italiano"},{"url":"/content/we-retail/language-masters/fr.html","path":"/content/we-retail/language-masters/fr","lastModified":1474672324593,"description":null,"title":"Français"},{"url":"/content/we-retail/language-masters/de.html","path":"/content/we-retail/language-masters/de","lastModified":1474672295387,"description":null,"title":"Deutsch"},{"url":"/content/we-retail/us/en.html","path":"/content/we-retail/us/en","lastModified":1534859297578,"description":null,"title":"English"},{"url":"/content/we-retail/us/es.html","path":"/content/we-retail/us/es","lastModified":1534860011954,"description":null,"title":"Español"}]';
                    //var data = JSON.parse(demoResult);
                    if (data.response.docs.length > 0) {
                        self._generateItems(data.response.docs, self._elements.results);
                        self._markResults();
                        toggleShow(self._elements.results, true);
                    } else {
                        self._hasMoreResults = false;
                    }
                    // the total number of results is not a multiple of the fetched results:
                    // -> we reached the end of the query
                    if (self._elements.results.querySelectorAll(selectors.item.self).length % self._properties.resultsSize > 0) {
                        self._hasMoreResults = false;
                    }
                    if (window._satellite) {
                        window._satellite.track("internalSearchComplete");
                    }
                } else {
                    // error status
                    if (window._satellite) {
                        window._satellite.track("internalSearchError");
                    }
                }
            };
            // when the results are loading: display the loading indicator and hide the search icon
            toggleShow(self._elements.loadingIndicator, true);
            toggleShow(self._elements.icon, false);
            request.send();
        }
    };

    Search.prototype._cancelResults = function () {
        clearTimeout(this._timeout);
        this._elements.results.scrollTop = 0;
        this._resultsOffset = 0;
        this._hasMoreResults = true;
        this._elements.results.innerHTML = "";
    };

    Search.prototype._cacheElements = function (wrapper) {
        this._elements = {};
        this._elements.self = wrapper;
        var hooks = this._elements.self.querySelectorAll("[data-" + NS + "-hook-" + IS + "]");

        for (var i = 0; i < hooks.length; i++) {
            var hook = hooks[i];
            var capitalized = IS;
            capitalized = capitalized.charAt(0).toUpperCase() + capitalized.slice(1);
            var key = hook.dataset[NS + "Hook" + capitalized];
            this._elements[key] = hook;
        }
    };

    Search.prototype._setupProperties = function (options) {
        this._properties = {};

        for (var key in properties) {
            if (properties.hasOwnProperty(key)) {
                var property = properties[key];
                if (options && options[key] != null) {
                    if (property && typeof property.transform === "function") {
                        this._properties[key] = property.transform(options[key]);
                    } else {
                        this._properties[key] = options[key];
                    }
                } else {
                    this._properties[key] = properties[key]["default"];
                }
            }
        }
    };

    function onDocumentReady() {
        var elements = document.querySelectorAll(selectors.self);
        for (var i = 0; i < elements.length; i++) {
            new Search({ element: elements[i], options: readData(elements[i]) });
        }

        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
        var body = document.querySelector("body");
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                // needed for IE
                var nodesArray = [].slice.call(mutation.addedNodes);
                if (nodesArray.length > 0) {
                    nodesArray.forEach(function (addedNode) {
                        if (addedNode.querySelectorAll) {
                            var elementsArray = [].slice.call(addedNode.querySelectorAll(selectors.self));
                            elementsArray.forEach(function (element) {
                                new Search({ element: element, options: readData(element) });
                            });
                        }
                    });
                }
            });
        });

        observer.observe(body, {
            subtree: true,
            childList: true,
            characterData: true
        });
    }

    if (document.readyState !== "loading") {
        onDocumentReady();
    } else {
        document.addEventListener("DOMContentLoaded", onDocumentReady);
    }

})();

(function($, ssmp){
    "use strict";

    $(function(){
        $(document).on("click", ".btn-cookie-settings", function(e){
            e.preventDefault();
            if(typeof OneTrust !== "undefined" && OneTrust){
                OneTrust.ToggleInfoDisplay();
            }
        });
    
        $(document).on("click", ".btn-accept-all-cookies", function(e){
            e.preventDefault();
            if(typeof OneTrust !== "undefined" && OneTrust){
                OneTrust.AllowAll();
            }
        });
    });

    /**
     * Check loading status and execute the callback function after the loading animation
     * @param {jQuery} $element The jquery element to check the loading status
     * @param {Function} callback The callback function to execute after the loading animation
     */
    function checkLoadingStatus($element, callback){
        var isCookiePassed = true,
            isInView = true,
            isLoadingAnimate = false,
            isReadyToLoad = false;

        if($element.is(".loaded")){
            return false;
        }

        if(typeof callback !== "function"){
            callback = function(){
                // Set to be a empty function if it's not provided
            };
        }
        
        if($element.is(".ssmp-cookie-consent")){
            //if($element.attr("data-cookie-consent") === "false" && $element.attr("data-cookie-check") !== "false"){
            if($element.attr("data-cookie-consent") === "false"){
                $element.hide();
                $element.siblings(".ssmp-cookie-error").addClass("visible");
                isCookiePassed = false;
            }else {
                $element.siblings(".ssmp-cookie-error").find(".loader-container").show();
                isLoadingAnimate = true;
            }
        }
        if($element.attr("data-view") !== "true"){
            isInView = false;
        }
        /*
		if($element.is(".ssmp-video__brightcove")) {
            isInView = true
            var videoEle =  $element.find("video")[0];
            if($(videoEle).attr("data-view") !== "true"){
                isInView = false;
            }
        }
        */
        isReadyToLoad = isCookiePassed && isInView

        if(isLoadingAnimate){
            if(isReadyToLoad){
                setTimeout(function(){
                    $element.show();
                    $element.siblings(".ssmp-cookie-error").removeClass("visible");
                    callback();
                }, 500);
            }else {
                setTimeout(function(){
                    $element.show();
                    $element.siblings(".ssmp-cookie-error").removeClass("visible");
                }, 500);
            }
            
        }else if(isReadyToLoad){
            callback();
        }

        return isReadyToLoad;
    }

    /**
     * Create the Mutation Observer object for cookie consent changes
     * @param {Node} element The DOM Node element to observe for the Mutation Observer
     * @param {Function} callback The observer function for the Mutation Observer
     */
    function createCookieObserver(element, callback){
        var cookieObserver;
        //if(typeof MutationObserver === "function" && typeof CQ === "undefined"){
        if(typeof MutationObserver === "function"){
            cookieObserver = new MutationObserver(callback);
        }

        if(cookieObserver){
            cookieObserver.observe(element, {
                attributes: true,
                attributeFilter: ["data-cookie-consent"]
            });
        }else {
            $(element).attr("data-cookie-check", "false");
        }
    }

    ssmp.checkLoadingStatus = checkLoadingStatus;
    ssmp.createCookieObserver = createCookieObserver;
    
})(window.jQuery, window["ssmp-js-core"]);
let _windowUrl = decodeURIComponent(window.location.href);

document.addEventListener('DOMContentLoaded', function () {
    let shareIndex = _windowUrl.indexOf('videoId');
    if (shareIndex != -1) {
        let shareScrolls = new URL(window.location.href).searchParams.get('videoId')
        let shareEle = document.getElementById(shareScrolls);
        let shareScrollen;
        if (shareEle) {
            shareScrollen = shareEle.parentNode.parentNode.parentNode.parentNode;
            if (/(iPhone|iPad|iPod|iOS)/i.test(navigator.userAgent) || /(Android)/i.test(navigator.userAgent)) {
                shareScrollen = shareScrollen.offsetTop;
                window.scrollTo({
                    top: shareScrollen,
                    behavior: 'smooth'
                });
            } else {
                shareScrollen = shareScrollen.offsetTop - 120;
                window.scrollTo({
                    top: shareScrollen,
                    behavior: 'smooth'
                });
            }
        }
    }
});

function getElementTop(element) {
    let top = element.offsetTop;
    let parent = element.offsetParent;
    while (parent != null) {
        top += parent.offsetTop;
        parent = parent.offsetParent;
    }
    return top;
}

function getShare(ele) {
    let pageUrl = '';
    let shareCon = ele.closest('.ssmp-sharemedia');
    let sharevid = shareCon.getAttribute("id");
    let shareTitle = shareCon.getAttribute("data-title");
    let shareDescription = shareCon.getAttribute("data-description");
    let shareImage = shareCon.getAttribute("data-image-path");
    if (!shareTitle) {
        shareTitle = document.title
    }
    if (_windowUrl.indexOf('videoId') > -1) {
        _windowUrl = _windowUrl.substring(0, _windowUrl.indexOf('?videoId'));
    }
    if (sharevid) {
        pageUrl = _windowUrl + '?videoId=' + sharevid;
    } else {
        pageUrl = _windowUrl;
    }
    return { pageUrl: pageUrl, shareTitle: shareTitle, shareDescription: shareDescription, shareImage: shareImage }
}

window.onload = function () {
    document.querySelectorAll('.ssmp-sharemedia-twitter-share-site').forEach(v => {
        v.addEventListener('click', _ => {
            let _share = getShare(v);
            let imagePath = _share.shareImage;
            if (imagePath) {
                imagePath = imagePath.startsWith("/content/dam/" + window["ssmp-js-core"].SITE) ? imagePath.replace("/content/dam/" + window["ssmp-js-core"].SITE) : imagePath;
            }
            let href = "https://www.twitter.com/share?text=" + encodeURIComponent(_share.shareTitle) + "&url=" + encodeURIComponent(_share.pageUrl) + "&description=" + encodeURIComponent(_share.shareDescription) + "&imageurl=" + encodeURIComponent(imagePath);
            window.open(href, "_blank", "toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=800, height=600");
        });
    });

    document.querySelectorAll('.ssmp-sharemedia-linkedin-share-site').forEach(v => {
        v.addEventListener('click', _ => {
            let _share = getShare(v);
            let imagePath = _share.shareImage;
            if (imagePath) {
                imagePath = imagePath.startsWith("/content/dam/" + window["ssmp-js-core"].SITE) ? imagePath.replace("/content/dam/" + window["ssmp-js-core"].SITE) : imagePath;
            }
            let href = 'https://www.linkedin.com/shareArticle?mini=true&url=' + encodeURIComponent(_share.pageUrl) + '&title=' + encodeURIComponent(_share.shareTitle) + "&description=" + encodeURIComponent(_share.shareDescription) + "&imageurl=" + encodeURIComponent(imagePath);
            window.open(href, "_blank", "toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=800, height=600");
        });
    });

    document.querySelectorAll('.ssmp-sharemedia-email-share-site').forEach(v => {
        v.addEventListener('click', _ => {
            let pageUrl = '';
            let shareCon = v.closest('.ssmp-sharemedia');
            let sharevid = shareCon.getAttribute("id");
            let subject = shareCon.getAttribute("data-title");
            let shareDescription = shareCon.getAttribute("data-description");
            let defaultEmail = shareCon.getAttribute("data-add-default-email") == "true";
            if (_windowUrl.indexOf('videoId') > -1) {
                _windowUrl = _windowUrl.substring(0, _windowUrl.indexOf('?videoId'));
            }
            if (sharevid) {
                pageUrl = _windowUrl + '?videoId=' + sharevid;
            } else {
                pageUrl = _windowUrl;
            }
            let body = '';
            let shareHref = '';
            if (defaultEmail) {
                subject = ' ';
                shareHref = "mailto:?subject=" + subject + "&body=" + encodeURIComponent(pageUrl);
            } else {
                if (!subject) {
                    subject = document.title;
                }
                if (!shareDescription) {
                    shareDescription = document.querySelector("meta[name='description']")?.getAttribute('content');
                }
                if (!shareDescription) {
                    body = encodeURIComponent(pageUrl);
                } else {
                    body = encodeURIComponent(shareDescription + ":  " + pageUrl);
                }
                shareHref = "mailto:?subject=" + subject + "&body=" + body;
            }
            v.setAttribute("href", shareHref);
        });
    });
};
/**
     * This JS file for Adobe Analytics tracking general clicks must be introduced at the end of js,because tracking general click has a click order, it needs to be executed at last
     * 
     */
(function (win, $, ssmp) {
    "use strict";

    $(document).ready(function () {
        ssmp.isDigitalData();
        // Start add track flag for Homepage Hero Click (Promoted Links?)
        $(".homepage-template .hero-enhance-video").find("a").attr("data-hero-banner-link", "true");
        $(".homepage-template .aem-GridColumn--default--9").each(function(){
            if($(this).find("img, video").length <= 0){
                return true;
            }

            $(this).find(".aem-GridColumn--default--3 a, .aem-GridColumn--default--4 a").attr("data-hero-banner-link", "false");
            $(this).find("a").not("[data-hero-banner-link]").attr("data-hero-banner-link", "true");
        });

        // End add track flag for Homepage Hero Click (Promoted Links?)

        // Start add analytics attributes for general links/buttons
        ssmp.addClickAttrForAA($(".ssmp-page, .ssmp-global-modal"));
        // End add analytics attributes for general links/buttons

        // Start track general clicks for AA
        $(document).on("click", "a", function() {
            ssmp.setGeneralClickEventForAA($(this));
        })
        // End track general clicks for AA
    })

}(window, window.jQuery, window["ssmp-js-core"]));

